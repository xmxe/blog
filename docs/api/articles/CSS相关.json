{"title":"CSS相关","slug":"CSS相关","date":"2023-04-03T02:30:01.179Z","updated":"2023-08-29T00:41:17.012Z","comments":true,"path":"api/articles/CSS相关.json","excerpt":null,"covers":"https://pic1.zhimg.com/v2-bdccba68ad2e37f6efc96a15f7897e2d.jpg","content":"\r\n\r\n\r\n## 居中\r\n\r\n```html\r\n<!-- div居中,需要设置宽度-->\r\n<div style=\"margin : 0 auto;width:80%\"></div>\r\n<!-- div里面的内容居中-->\r\n<div style=\"margin : 0 auto;width:80%;text-align:center\">\r\n    <button></button>\r\n</div>\r\n\r\n<!-- 两个div设置间距 -->\r\n<div style=\"margin:10px 0\"></div>\r\n\r\n<!--margin外间距是外边距，即盒子与盒子之间的距离，而padding是内边距，是盒子的边与盒子内部元素的距离。margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内距离。\r\n例如两个文本框的距离使用margin，文本框的边框和文本内容之间的距离使用padding-->\r\n<!-- 使用弹性容器 -->\r\n<div class=\"container\">\r\n    <div class=\"centered\">\r\n    \t<p>要居中的内容</p>\r\n    </div>\r\n</div>\r\n```\r\n```css\r\n.container {\r\n    display: flex; /* 设置为Flex容器 */\r\n    justify-content: center; /* 水平居中 */\r\n    align-items: center; /* 垂直居中 */\r\n    height: 100vh; /* 设置容器高度 */\r\n}\r\n.centered {\r\n  /* 可以给要居中的元素设置一些样式 */\r\n}\r\n```\r\n> [42种前端常用布局方案总结※](https://mp.weixin.qq.com/s/5ZSMlbjcvaMksx4zakhgzA)\r\n> [如何用一行CSS实现10种现代布局？](https://mp.weixin.qq.com/s/3yToJq5N8-8SXb0nPDL47g)\r\n\r\n## n个元素等比例在一行展示\r\n\r\n```html\r\n<div class=\"image-container\">\r\n    <img src=\"image1.jpg\" alt=\"Image 1\" />\r\n    <img src=\"image2.jpg\" alt=\"Image 2\" />\r\n    <img src=\"image3.jpg\" alt=\"Image 3\" />\r\n    <img src=\"image4.jpg\" alt=\"Image 4\" />\r\n</div>\r\n```\r\n```css\r\n.image-container {\r\n    display: flex; /* 使用 Flexbox 布局 */\r\n    flex-wrap: wrap; /* 等比例图片自动换行到下一行 */\r\n    justify-content: space-between; /* 图片之间间距相等 */\r\n}\r\nimg {\r\n    width: 25%; /* 将每个图片的宽度设置为 25% 使其等比例放缩 */\r\n    height: auto; /* 高度设置为 auto，使其自适应宽度 */\r\n    margin-bottom: 1rem; /* 使用 margin 来设置图片之间的间距 */\r\n    object-fit: cover; /* 自适应填充图片容器，保持图片比例 */\r\n}\r\n```\r\n> 扩展**display:flex**\r\n\r\n```css\r\ndiv{\r\n\tdisplay: flex\r\n\tflex-direction: row;/*属性决定主轴的方向（即项目的排列方向）*/\r\n    /*\r\n    - row（默认值）:主轴为水平方向，起点在左端。\r\n    - row-reverse:主轴为水平方向，起点在右端。\r\n    - column:主轴为垂直方向，起点在上沿。\r\n    - column-reverse:主轴为垂直方向，起点在下沿。\r\n    */\r\n    flex-wrap: nowrap;/*属性决定了如果一条轴线排不下,如何换行*/\r\n    /*\r\n    - nowrap（默认）:不换行。\r\n    - wrap:换行，第一行在上方。\r\n    - wrap-reverse:换行，第一行在下方。\r\n    */\r\n    justify-content: flex-start;/*属性定义了项目在主轴上的对齐方式。*/\r\n    /*\r\n    - flex-start（默认值）:左对齐\r\n    - flex-end:右对齐\r\n    - center:居中\r\n    - space-between:两端对齐，项目之间的间隔都相等。\r\n    - space-around:每个项目两侧的间隔相等。\r\n    */\r\n    align-items: stretch;/*属性定义项目在交叉轴上如何对齐。简单来讲，假如我们将flex-direction设置为row，即主轴为行。align-items可以决定元素在列上的布局*/\r\n    /*\r\n    - flex-start:交叉轴的起点对齐，一行根据上边对齐。\r\n    - flex-end:交叉轴的终点对齐，一行根据下边对齐。\r\n    - center:交叉轴的中点对齐。\r\n    - baseline:项目的第一行文字的基线对齐。\r\n    - stretch（默认值）:如果项目未设置高度或设为auto，将占满整个容器的高度。\r\n    */\r\n    align-content: stretch;/*属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。简单来讲，假如我们将flex-direction设置为row，即主轴为行。align-content决定了出现很多行时，这些行之间怎么对齐。其有一下几个属性：*/\r\n    /*\r\n    - flex-start:与交叉轴的起点对齐，跟作文一样，一行一行紧挨着。\r\n    - flex-end:与交叉轴的终点对齐，跟 flex-start类型，不过时从底部开始数。\r\n    - center:与交叉轴的中点对齐，从中间向下向上扩散。\r\n    - space-between:与交叉轴两端对齐，轴线之间的间隔平均分布。\r\n    - space-around:每根轴线两侧的间隔都相等。\r\n    - stretch（默认值）:轴线占满整个交叉轴。\r\n    */\r\n}\r\n\r\n```\r\n\r\n## 隐藏滚动条\r\n\r\n```css\r\n/**css隐藏滚动条**/\r\n.class::-webkit-scrollbar{ width:0 !important /*display:none;*/}\r\n::-webkit-scrollbar{width:0 !important /*display:none;*/}\r\n```\r\n\r\n## 渐变\r\n\r\n```css\r\n文字{\r\n    /*\r\n    linear-gradient是CSS中的一个渐变函数，用于在元素的背景中创建一个沿着一条直线方向的颜色渐变效果。linear-gradient函数的基本语法如下：background: linear-gradient(direction, color stop1, color stop2, ...);其中的参数解释如下：\t\r\n    - direction: 表示渐变的方向，可以是角度、关键字（top、bottom、left、right、to top left、to bottom right等）以及渐变轴线（由坐标(x1,y1)和(x2,y2)确定的一条直线，可使用两个坐标的百分比表示），也可以是任意组合;\r\n    - color stop: 表示渐变的颜色及其所在的位置，可以定义多个颜色值，用逗号分隔。例如，color stop1可以表示位于渐变的起始点的颜色停止点，而color stop2则对应着终点的颜色停止点。\r\n\r\n    CSS3渐变也支持透明度（transparent），可用于创建减弱变淡的效果。为了添加透明度，我们使用rgba()函数来定义颜色节点。rgba()函数中的最后一个参数可以是从0到1的值，它定义了颜色的透明度：0表示完全透明，1表示完全不透明。\r\n    */\r\n\tbackground-image:-webkit-linear-gradient(bottom,#708a41,#8585a5,#4b8e9a);\r\n    background-image: linear-gradient(top, hsla(0, 0%, 100%, .2) 1px, hsla(0, 0%, 100%, 0) 1px, hsla(0, 0%, 0%, .1) 100%);\r\n    /*\r\n     background-clip属性指定背景绘制区域。\r\n       - border-box默认值。背景绘制在边框方框内（剪切成边框方框）。\r\n       - padding-box背景绘制在衬距方框内（剪切成衬距方框）。\r\n       - content-box背景绘制在内容方框内（剪切成内容方框）。\r\n     */\r\n    -webkit-background-clip:text;\r\n    \r\n    /**文字中填充颜色transparent:透明色**/\r\n    -webkit-text-fill-color:transparent;\r\n    \r\n    /**text-stroke(文本边框)是text-stroke-width和text-stroke-color（边框填充颜色）两个属性的简写**/\r\n    -webkit-text-stroke:6px transparent;\r\n}\r\n背景图{\r\n    /*从下到上，从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束*/\r\n    background-image: linear-gradient(0deg, blue, green 40%, red);\r\n    /**创建一个从圆心开始，向四周渐变的径向渐变效果**/\r\n    background: radial-gradient(circle at center, #ffafbd, #ffc3a0);\r\n    /**创建一个从最外部向圆心渐变的径向渐变效果,farthest-corner关键字会将圆心设置在最远的角落，而不是默认的居中位置**/\r\n    background: radial-gradient(circle farthest-corner at center, #ffafbd, #ffc3a0);\r\n    /*\r\n    radial-gradient是CSS中的一个渐变函数，用于在元素的背景中创建一个从一个中心向周围辐射的颜色渐变效果。\r\n    radial-gradient函数的基本语法如下：background: radial-gradient(shape size at position, start-color, ..., last-color);其中的参数解释如下：\r\n    shape: 表示渐变形状，可以是circle(默认)或ellipse；\r\n    size: 表示渐变的大小\r\n      - closest-side表示最近侧的边缘，\r\n      - farthest-side表示最远侧的边缘，\r\n      - closest-corner表示最近角落，\r\n      - farthest-corner表示最远角落，\r\n      - contain表示至少需要占满整个容器，\r\n      - cover则表示覆盖整个容器；\r\n    at position: 表示渐变的中心位置，可以是长度(像素或百分比)或关键字(center、top、bottom、left、right等)\r\n    start-color和last-color: 表示渐变的起始颜色和结束颜色。可以定义多个颜色值，用逗号分隔。\r\n    */\r\n}\r\n\r\npage {\r\n    background: linear-gradient(-45deg, #ac7399, #a8a38e, #b6c24a);\r\n    background-size: 500% 500%;\r\n    animation: moiveAnimation 7s infinite;\r\n}\r\n\r\n@keyframes moiveAnimation {\r\n    0% {\r\n        background-position: 0% 50%\r\n    }\r\n\r\n    50% {\r\n        background-position: 100% 50%\r\n    }\r\n\r\n    100% {\r\n        background-position: 0% 50%\r\n    }\r\n}\r\n```\r\n> [超精美渐变色动态背景完整示例](https://blog.csdn.net/A757291228/article/details/124611342)\r\n\r\n## 文字自动换行\r\n\r\n```css\r\n/*文章内容自动换行*/\r\n#articleContent {\r\n    /*\r\n    - break-word:在长单词或URL地址内部进行换行。\r\n    - normal:只在允许的断字点换行（浏览器保持默认处理）\r\n    */\r\n    word-wrap: break-word;\r\n    \r\n    /*\r\n    - normal:使用浏览器默认的换行规则\r\n    - break-all:允许在单词内换行允许在单词内换行。\r\n    - keep-all:只能在半角空格或连字符处换行\r\n    */\r\n    word-break: break-all;\r\n    \r\n    /*\r\n     - normal:忽略多余的空白，只保留一个空白（默认）\r\n     - pre:保留空白(行为方式类似于html中的pre标签)\r\n     - nowrap:文本不会换行，会在在同一行上继续，直到遇到br标签为止\r\n     - pre-wrap:保留空白符序列，正常地进行换行\r\n     - pre-line:合并空白符序列，保留换行符\r\n     - inherit:从父元素继承white-space属性的值。\r\n     */\r\n    white-space: normal;\r\n}\r\n```\r\n> [前端正确处理“文字溢出”的思路](https://mp.weixin.qq.com/s/7-NxE7K6QPSPLHEKW8ME8g)\r\n\r\n## 动画@keyframes\r\n\r\n```css\r\n/**上下浮动动画**/\r\n@keyframes float {\r\n  /**0%是动画的开始时间，100%动画的结束时间。或者通过关键词\"from\"和\"to\"，等价于0%和100%。**/\t\r\n  100% {\r\n   /*\r\n    transform属性向元素应用2D或3D转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。应用多个属性使用空格如transform: rotate(45deg) scale(2) skew(10deg,5deg) translate(50px,90px);\r\n    - rotate(xxdeg)(2D),rotateX()(3D),rotateY()(3D),rotateZ(180deg)：以中心为基点，deg表示旋转的角度，为负数时表示逆时针旋转\r\n    - translate(x,y)，translateX(x)，translateY(y)：以中心为基点按照设定的x,y参数值,对元素进行进行平移。\r\n    - scale(x,y)，scaleX(X)，scaleY(Y)：缩放基数为1，如果其值大于1元素就放大，反之其值小于1为缩小。缩放后不影响文档流,不改变原有布局,元素还是会占用,和relative定位一样,或者可以考虑zoom属性\r\n    - skew(x,y)，skewX(x)，skewY(y)：以中心为基点，第一个参数是水平方向扭曲角度，第二个参数是垂直方向扭曲角度。\r\n    */\r\n   transform: translateY(20px);\r\n   \r\n   /**box-shadow属性可以设置一个或多个下拉阴影的框。**/\r\n   box-shadow: 0 40px 10px -18px hsla(0, 0%, 0%, .2), 0 40px 16px -12px hsla(0, 0%, 0%, .2)\r\n   transform-origin: right;/**(x,y)来改变元素基点**/\r\n  }\r\n}\r\n\r\n/**隐藏/显示动画**/\r\n@keyframes move{\r\n    0%{\r\n        transform: translate(100px, 0);\r\n        opacity: 0;\r\n    }\r\n    50%{\r\n        transform: translate(50px, 0);\r\n        opacity: 0.5;\r\n    }\r\n    100%{\r\n        transform: translate(0, 0);\r\n        opacity: 1;\r\n\t}\r\n}\r\n\r\n/**使用**/\r\ndiv{\r\n    box-shadow: 0 60px 12px -18px hsla(0, 0%, 0%, .1), 0 60px 20px -12px hsla(0, 0%, 0%, .1);\r\n    /*\r\n     animation: name duration timing-function delay iteration-count direction;\r\n     animation-name:规定需要绑定到选择器的keyframe名称。\r\n     animation-duration:规定完成动画所花费的时间，以秒或毫秒计\r\n     animation-timing-function:规定动画的速度曲线。\r\n       - linear:动画从头到尾的速度是相同的\r\n       - ease:默认。动画以低速开始，然后加快,在结束前变慢\r\n       - ease-in:动画以低速开始\r\n       - ease-out:动画以低速结束\r\n       - ease-in-out:动画以低速开始和结束\r\n       - cubic-bezier(n,n,n,n):在cubic-bezier函数中自己的值\r\n     animation-delay:规定在动画开始之前的延迟。\r\n     animation-iteration-count:规定动画应该播放的次数。默认为1次，可以填写数字\r\n     animation-direction:规定是否应该轮流反向播放动画。如果animation-direction值是“alternate”，则动画会在奇数次数（1、3、5等等）正常播放，而在偶数次数（2、4、6等等）向后播放。如果把动画设置为只播放一次，则该属性没有效果\r\n    */\r\n    animation: float 1s infinite ease-in-out alternate\r\n    /**animation: move .4s linear 1 normal**/\r\n}\r\ndiv:hover{\r\n    /*\r\n     animation-play-state属性规定动画正在运行还是暂停。只有两个属性可以设置：\r\n       - paused:规定动画已暂停\r\n       - running:规定动画正在播放\r\n     */\r\n\tanimation-play-state: paused\r\n     \r\n    /*\r\n     animation-fill-mode属性规定动画在播放之前或之后，其动画效果是否可见。(规定当动画不播放时（当动画完成时或当动画有一个延迟为开始播放时）要用到的元素样式)\r\n       - none表示等待期和完成期，元素样式都为初始状态样式，不受动画定义（@keyframes）的影响\r\n       - both表示等待期样式为第一帧样式，完成期保持最后一帧样式\r\n       - backwards表示等待期为第一帧样式，完成期跳转为初始样式\r\n       - forwards表示等待期保持初始样式，完成期间保持最后一帧样式\r\n     */\r\n     animation-fill-mode:none;\r\n}\r\n\r\n/**鼠标滑过翻转**/\r\nimg:hover {\r\n  animation: fadenum 2s;\r\n}\r\n@keyframes fadenum {\r\n   100%{ transform:rotate(360deg);}\r\n}\r\n\r\n```\r\n\r\n## transition\r\n\r\n```css\r\n/**鼠标滑动图标旋转**/\r\ndiv{\r\n    -webkit-transform: rotate(3600deg) !important;\r\n    -moz-transform: rotate(360deg) !important;\r\n    -o-transform: rotate(360deg) !important;\r\n    -ms-transform: rotate(360deg) !important;\r\n    transform: rotate(360deg) !important;\r\n    \r\n    /*\r\n     transition属性是一个简写属性，用于设置四个过渡属性.\r\n       - transition-property:规定设置过渡效果的CSS属性的名称。none没有属性会获得过渡效果。all所有属性都将获得过渡效果。property定义应用过渡效果的CSS属性名称列表，列表以逗号分隔。\r\n       - transition-duration:规定完成过渡效果需要多少秒或毫秒。\r\n       - transition-timing-function:规定速度效果的速度曲线。\r\n         -- inear规定以相同速度开始至结束的过渡效果（等于cubic-bezier(0,0,1,1)）\r\n         -- ease规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）\r\n         -- ease-in规定以慢速开始的过渡效果（等于cubic-bezier(0.42,0,1,1)）\r\n         -- ease-out规定以慢速结束的过渡效果（等于cubic-bezier(0,0,0.58,1)）\r\n         -- ease-in-out规定以慢速开始和结束的过渡效果（等于cubic-bezier(0.42,0,0.58,1)）。\r\n         -- cubic-bezier(n,n,n,n)在cubic-bezier函数中定义自己的值。可能的值是0至1之间的数值。\r\n       - transition-delay:定义过渡效果何时开始。\r\n     */\r\n    -webkit-transition: all .7s;\r\n    -moz-transition: all .7s;\r\n    -o-transition: all .7s;\r\n    transition: all .7s;\r\n}\r\n\r\na{\r\n    /*光标样式*/\r\n    cursor: pointer;\r\n}\r\n```\r\n\r\n## 网站变灰\r\n\r\n```css\r\n/*在想要变灰的控件里加入此属性即可,如果想要网站整体变灰在html{}里面加入即可*/\r\n.gray {\r\n    -webkit-filter: grayscale(100%);\r\n    -webkit-filter:grayscale(1);\r\n    -moz-filter: grayscale(100%);\r\n    -ms-filter: grayscale(100%);\r\n    -o-filter: grayscale(100%);\r\n    filter: grayscale(100%);\r\n    filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);\r\n    filter:url(\"data:image/svg+xml;utf8,<svg xmlns=\\'http://www.w3.org/2000/svg\\'><filter id=\\'grayscale\\'><feColorMatrix type=\\'matrix\\' values=\\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\\'/></filter></svg>#grayscale\");\r\n}\r\n```\r\n\r\n\r\n## css伪类\r\n\r\n```css\r\n:link /*应用于未被访问过的链接*/\r\n:hover /*应用于鼠标悬停到的元素*/\r\n:active /*应用于被激活的元素*/\r\n:visited /*应用于被访问过的链接，与:link互斥。*/\r\n:focus /*应用于拥有键盘输入焦点的元素。*/\r\n\r\n:first-child /*选择某个元素的第一个子元素*/\r\n:last-child /*选择某个元素的最后一个子元素*/\r\n:nth-child(n) /*匹配属于其父元素的第n个子元素，不论元素的类型*/\r\n:nth-last-child() /*从这个元素的最后一个子元素开始算,选匹配属于其父元素的第n个子元素，不论元素的类型*/\r\n:nth-of-type() /*规定属于其父元素的第n个指定元素*/\r\n:nth-last-of-type() /*从元素的最后一个开始计算,规定属于其父元素的指定元素*/\r\n:first-of-type /*选择一个上级元素下的第一个同类子元素*/\r\n:last-of-type /*选择一个上级元素的最后一个同类子元素*/\r\n:only-child /*选择它的父元素的唯一一个子元素*/\r\n:only-of-type /*选择一个元素是它的上级元素的唯一一个相同类型的子元素*/\r\n:checked /*匹配被选中的input元素，这个input元素包括radio和checkbox。*/\r\n:empty /*选择的元素里面没有任何内容。*/\r\n:disabled /*匹配禁用的表单元素。*/\r\n:enabled /*匹配没有设置disabled属性的表单元素。*/\r\n:valid /*匹配条件验证正确的表单元素。*/\r\n:in-range /*选择具有指定范围内的值的<input>元素。*/\r\n:invalid input:invalid /*选择所有具有无效值的<input>元素。*/\r\n:optional input:optional /*选择不带\"required\"属性的<input>元素。*/\r\n:lang(language)\tp:lang(it) /*选择每个lang属性值以\"it\"开头的<p>元素。*/\r\n:focus /*选择获得焦点的<input>元素。*/\r\n:not(selector) :not(p) /*选择每个非<p>元素的元素。*/\r\n:out-of-range input:out-of-range /*选择值在指定范围之外的<input>元素。*/\r\n:read-only input:read-only /*选择指定了\"readonly\"属性的<input>元素。*/\r\n:read-write\tinput:read-write /*选择不带\"readonly\"属性的<input>元素。*/\r\n:required input:required /*选择指定了\"required\"属性的<input>元素。*/\r\n:root root /*选择元素的根元素。*/\r\n:target\t#news:target /*选择当前活动的#news元素（单击包含该锚名称的URL）*/\r\n```\r\n\r\n## css伪元素\r\n```css\r\n::after /*例: p::after\t在每个<p>元素之后插入内容。*/\r\n::before /*例: p::before 在每个<p>元素之前插入内容。*/\r\n::first-letter /*例: p::first-letter 选择每个<p>元素的首字母。*/\r\n::first-line /*例: p::first-line 选择每个<p>元素的首行。*/\r\n::selection /*例: p::selection 选择用户选择的元素部分。*/\r\n::marker /*例: li::marker {content:'>';} 把li前面的'•'变成'>'*/\r\n```\r\n> [CSS伪元素](https://www.w3school.com.cn/css/css_pseudo_elements.asp)\r\n\r\n## 21个超实用的CSS技巧\r\n\r\n### 文档布局\r\n仅用两行CSS，就可以创建响应式文档样式布局。\r\n\r\n```css\r\n.parent{\r\n  display: grid;\r\n  grid-template-columns: minmax(150px, 25%) 1fr;\r\n}\r\n```\r\n\r\n### 自定义光标\r\n\r\n```css\r\nhtml{\r\n  cursor:url('no.png'), auto;\r\n}\r\n```\r\n\r\n### 用图像填充文本\r\n\r\n```css\r\nh1{\r\n  background-image: url('images/flower.jpg');\r\n  background-clip: text;\r\n  color: transparent;\r\n  background-color: white;\r\n}\r\n```\r\n> 注意：使用此技术时，请始终指定background-color，因为如果由于某种原因图像未加载，可以将其用作回退值。\r\n\r\n### 为文本添加描边效果\r\n\r\n使用text-stroke属性可以使文本更清晰可见，因为会向文本添加描边笔触或轮廓。\r\n\r\n```css\r\n/* Apply a 5px wide crimson text stroke to h1 elements */\r\nh1 {\r\n  -webkit-text-stroke: 5px crimson;\r\n  text-stroke: 5px crimson;\r\n}\r\n```\r\n\r\n### :paused伪类\r\n\r\n使用:paused选择器在暂停状态下设置媒体元素的样式，与:paused类似的还有:playing。\r\n\r\n```css\r\n/* 目前只支持Safari浏览器 */\r\nvideo:paused {\r\n  opacity: 0.6;\r\n}\r\n```\r\n\r\n### 强调文本\r\n\r\n使用text-emphasis属性将强调标记应用于文本元素。你可以指定任意字符串（包括表情符号）作为值。\r\n\r\n```css\r\nh1 {\r\n  text-emphasis: \"⏰\";\r\n}\r\n```\r\n\r\n### 首字母下沉\r\n\r\n避免不必要的span，改用伪元素来设置内容的样式，同样，与:first-letter伪元素类似的还有:first-line伪元素。\r\n\r\n```css\r\nh1::first-letter{\r\n  font-size: 2rem;\r\n  color:#ff8A00;\r\n}\r\n```\r\n\r\n### 变量回退值\r\n\r\n```css\r\n:root {\r\n  --orange: orange;\r\n  --coral: coral;\r\n}\r\n\r\nh1 {\r\n  color: var(--black, crimson);\r\n}\r\n```\r\n\r\n### 更改书写模式\r\n\r\n你可以使用书写模式属性来指定文本在网站上的布局方式，垂直或水平布局。\r\n\r\n```css\r\n<h1>Cakes & Bakes</h1>\r\nh1 {\r\n  writing-mode: sideways-lr;\r\n}\r\n```\r\n\r\n### 彩虹动画\r\n\r\n为元素创建连续循环的颜色动画以吸引用户的注意力。\r\n\r\n```css\r\nbutton{\r\n  animation: rainbow-animation 200ms linear infinite;\r\n}\r\n\r\n@keyframes rainbow-animation {\r\n  to{\r\n    filter: hue-rotate(0deg);\r\n  }\r\n from{\r\n    filter: hue-rotate(360deg);\r\n  }\r\n}\r\n```\r\n\r\n### 悬停缩放\r\n\r\n```css\r\n/* 定义图片容器的高度和宽度，以及设置图元溢出时隐藏 */\r\n.img-container {\r\n  height: 250px; width: 250px; overflow: hidden;\r\n }\r\n\r\n/* 让图片填充整个容器 */\r\n\r\n.img-container img {\r\n  height: 100%; width: 100%; object-fit: cover; \r\n  transition: transform 200m ease-in;\r\n }\r\n\r\n img:hover{\r\n  transform: scale(1.2);\r\n }\r\n```\r\n\r\n### 属性选择器\r\n\r\n使用属性选择器根据属性选择HTML元素。\r\n\r\n```css\r\n<a href=\"\">HTML</a>\r\n<a>CSS</a>\r\n<a href=\"\">JavaScript</a>\r\n/* 为每个带href的a元素设置颜色 */\r\n\r\na[href] {\r\n  color: crimson;\r\n}\r\n```\r\n\r\n### 剪切元素\r\n\r\n使用clip-path属性创建有趣的视觉效果，例如将元素剪裁为自定义的三角形或六边形形状。\r\n\r\n```css\r\ndiv {\r\n  height: 150px;\r\n  width: 150px;\r\n  background-color: crimson;\r\n  clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\r\n}\r\n```\r\n\r\n### 检测属性支持\r\n\r\n使用CSS @support rule直接在CSS中检测对CSS功能的支持。\r\n\r\n```css\r\n@supports (accent-color: #74992e) {\r\n/* 如果浏览器支持，则以下代码可以运行 */\r\n  blockquote {\r\n    color: crimson;\r\n  }\r\n\r\n}\r\n```\r\n\r\n### CSS嵌套\r\n\r\nCSS工作组一直在研究如何将嵌套添加到CSS中。通过嵌套，我们将能够编写更直观、更有条理、更高效的CSS。\r\n\r\n```css\r\n<header class=\"header\">\r\n  <p class=\"text\">Lorem ipsum, dolor</p>\r\n</header>\r\n/* 你可以在Safari浏览器中尝试使用CSS嵌套*/\r\n.header{\r\n  background-color: salmon;\r\n  .text{\r\n    font-size: 18px;\r\n  }\r\n}\r\n```\r\n\r\n### clamp函数\r\n\r\nclamp()函数可用于响应式和流畅的排版。\r\n\r\n```css\r\n/* Syntax: clamp(minimum, preferred, maximum) */\r\nh1{\r\n  font-size: clamp(2.25rem,6vw,4rem);\r\n}\r\n```\r\n\r\n### 设置可选字段的样式\r\n\r\n你可以使用:optional伪类设置表单字段的样式，例如输入框、下拉框和文本框，这些字段上没有必要属性。\r\n\r\n```css\r\n*:optional{\r\n  background-color: green;\r\n}\r\n```\r\n\r\n### 字间距属性\r\n\r\n使用word-spacing属性指定两个单词之间的空格长度。\r\n\r\n```css\r\np {\r\n  word-spacing: 1.245rem;\r\n}\r\n```\r\n\r\n### 创建渐变阴影\r\n\r\n创建渐变阴影以提供独特的用户体验。\r\n\r\n```css\r\n:root{\r\n  --gradient: linear-gradient(to bottom right, crimson, coral);\r\n}\r\n\r\ndiv {\r\n  height: 200px;\r\n  width: 200px;\r\n  background-image: var(--gradient);\r\n  border-radius: 1rem;\r\n  position: relative;\r\n}\r\n\r\ndiv::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  inset: 0;\r\n  background-image: var(--gradient);\r\n  border-radius: inherit;\r\n  filter: blur(25px) brightness(1.5);\r\n  transform: translateY(15%) scale(0.95);\r\n  z-index: -1;\r\n}\r\n```\r\n\r\n### 更改标题位置\r\n\r\n使用caption-side属性将表格标题放在表格的指定一侧。\r\n\r\n### 创建文本列\r\n\r\n使用column属性为文本元素制作漂亮的列布局。\r\n\r\n```css\r\np{\r\n  column-count: 3;\r\n  column-gap: 4.45rem;\r\n  column-rule: 2px dotted crimson;\r\n}\r\n```\r\n\r\n## 细数那些惊艳一时的CSS属性\r\n\r\n### position: sticky\r\n\r\n标题在滚动的时候，会一直贴着最顶上。这种场景实际上很多：比如表格的标题栏、网站的导航栏、手机通讯录的人名首字母标题等等。\r\n\r\ncss部分\r\n```css\r\n.container {\r\n    background-color: oldlace;\r\n    height: 200px;\r\n    width: 140px;\r\n    overflow: auto;\r\n}\r\n.container div {\r\n    height: 20px;\r\n    background-color: aqua;\r\n    border: 1px solid;\r\n}\r\n.container .header {\r\n    position: sticky;\r\n    top: 0;\r\n    background-color: rgb(187, 153, 153);\r\n}\r\n```\r\nhtml部分\r\n```html\r\n<div class=\"container\">\r\n  <div class=\"header\">Header</div>\r\n  <div>1</div>\r\n  <div>2</div>\r\n  <div>3</div>\r\n</div>\r\n```\r\n\r\n### :empty选择器\r\n\r\n平时开发的时候数据都是通过请求接口获取的，也会存在接口没有数据的情况。这个时候正常的做法是给用户一个提示，让用户知道当前不是出bug了，而是确实没有数据。一般的做法是我们人为的判断当前数据返回列表的长度是否为0，如果为0则显示一个“暂无数据”给用户，反之则隐藏该提示。写过Vue的小伙伴是不是经常这么做：\r\n\r\n```html\r\n<div>\r\n    <template v-if=\"datas.length\">\r\n        <div v-for=\"data in datas\"></div>\r\n    </template>\r\n    <template v-else>\r\n        <div>暂无数据</div>\r\n    </template>\r\n</div>\r\n```\r\n但是有了:empty这个选择器后，你大可以把这个活交给CSS来干。\r\n\r\n```css\r\n.container {\r\n    height: 400px;\r\n    width: 600px;\r\n    background-color: antiquewhite;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.container:empty::after {\r\n    content: \"暂无数据\";\r\n}\r\n```\r\n\r\n### gap\r\n\r\n日常开发中，都有用过padding和margin吧，margin一般用做边距，让两个元素隔开一点距离，但是对于一些场景下，我们很难通过计算得到一个除的尽的值，比如100px我要让3个元素等分，且每个元素隔开10px，这就很尴尬了。没关系！我们可以用gap属性，gap属性它适用于Grid布局、Flex布局以及多列布局，并不一定只是Grid布局中可以使用。比如我们要让每个元素之间隔开20px，那么使用gap我们可以这样：\r\n\r\n```css\r\ndiv{\r\n    display: flex | grid;\r\n    gap: 20px;\r\n}\r\n```\r\n\r\n### background-clip: text\r\n\r\n大家平时background-clip是不是都用来做一些裁切效果？你知道它还有个属性值是text吗？background-clip:text用来做带背景的文字效果，相信大家平时浏览一些网站的时候都会看到类似的实现，实际上通过CSS我们也能做到这种效果，可不要傻傻的以为都是用制图工具做的。\r\n\r\n### user-select\r\n\r\n网页和APP有个不同点是，网页上的字是可以通过光标选中的，而APP的不行。有的小伙伴可能会疑惑：那我网页上也用不着这个属性啊？非也非也，我们知道现在很多新的技术产生，可以在APP上嵌套webview或者是网页，比如Electron做的桌面端应用，大家没见过哪个桌面端应用是可以光标选中的吧？而user-select属性可以禁用光标选中，让网页看着和移动端一样。\r\n\r\n### :invalid伪类\r\n\r\n:invalid表示任意内容未通过验证的input或其他form元素。什么意思呢？举个例子。这是一个表单。\r\n\r\n```html\r\n<form>\r\n  <label for=\"url_input\">Enter a URL:</label>\r\n  <input type=\"url\" id=\"url_input\" />\r\n  <br />\r\n  <br />\r\n  <label for=\"email_input\">Enter an email address:</label>\r\n  <input type=\"email\" id=\"email_input\" required/>\r\n</form>\r\n```\r\n我们的需求是让input当值有效时，元素颜色为绿色，无效时为红色。\r\n\r\n```css\r\ninput:invalid {\r\n  background-color: #ffdddd;\r\n}\r\nform:invalid {\r\n  border: 5px solid #ffdddd;\r\n}\r\ninput:valid {\r\n  background-color: #ddffdd;\r\n}\r\nform:valid {\r\n  border: 5px solid #ddffdd;\r\n}\r\ninput:required {\r\n  border-color: #800000;\r\n  border-width: 3px;\r\n}\r\ninput:required:invalid {\r\n  border-color: #C00000;\r\n}\r\n```\r\n\r\n有了:invalid属性后，我们就可以不用JS也能实现校验提示的效果了。\r\n\r\n### :focus-within伪类\r\n\r\n:focus-within表示一个元素获得焦点，或该元素的后代元素获得焦点，就会匹配上。\r\n\r\nCSS\r\n```css\r\nform {\r\n    border: 1px solid;\r\n    width: 400px;\r\n    height: 300px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\nform:focus-within {\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.3);\r\n    background-color: beige;\r\n}\r\n```\r\n\r\nHTML\r\n```html\r\n<form>\r\n  <input type=\"text\" id=\"ipt\" placeholder=\"请输入...\" />\r\n</form>\r\n```\r\n可以根据子元素的状态来改变父元素的样式，方便的很。也能玩出不少花样来。\r\n\r\n### mix-blend-mode:difference\r\n\r\nmix-blend-mode:difference属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。其中，difference表示差值。\r\n\r\n```css\r\n.mode {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    mix-blend-mode:difference;\r\n}\r\n.dark {\r\n    position: relative;\r\n    left: 6px;\r\n    height: 24px;\r\n    width: 24px;\r\n    background-color: grey;\r\n    border-radius: 50%;\r\n}\r\n.light {\r\n    mix-blend-mode:difference;\r\n    position: relative;\r\n    left: -6px;\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 50%;\r\n    border: 4px solid grey;\r\n}\r\n```\r\n\r\n## 超酷的纯CSS Loading效果\r\n\r\n为保证运行正常，咱先规定下：\r\n\r\n```css\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n```\r\n\r\n### 平滑加载\r\n\r\n```css\r\n<div class=\"progress-1\"></div>\r\n.progress-1 {\r\n    width:120px;\r\n    height:20px;\r\n    background: linear-gradient(#000 0 0) 0/0% no-repeat #ddd;\r\n    animation:p1 2s infinite linear;\r\n}\r\n@keyframes p1 {\r\n    100% {background-size:100%}\r\n}\r\n```\r\n\r\n1. linear-gradient(#000 0 0)你可以理解为linear-gradient(#000 0 100%)，如果还不熟悉，复制linear-gradient(#000 0 50%, #f00 50% 0)，替换原先的部分跑一下。觉得linear-gradient(#000 0 0)别扭的话，直接写#000即可。\r\n2. 0/0%是background-position: 0;/background-size: 0;的简写。\r\n\r\n### 按步加载\r\n\r\n```css\r\n<div class=\"progress-2\"></div>\r\n.progress-2 {\r\n    width:120px;\r\n    height:20px;\r\n    border-radius: 20px;\r\n    background: linear-gradient(orange 0 0) 0/0% no-repeat lightblue;\r\n    animation:p2 2s infinite steps(10);\r\n}\r\n@keyframes p2 {\r\n    100% {background-size:110%}\r\n}\r\n```\r\n\r\n1. steps(10)是step(10, end)的简写，指明刚开始没有，所以有**第2点**的处理\r\n2. 100% {background-size:110%}添加多一个step的百分比，上面的step是10，所以是`100% + (1/10)*100% = 110%`\r\n\r\n### 条纹加载\r\n\r\n```css\r\n<div class=\"progress-3\"></div>\r\n.progress-3 {\r\n    width:120px;\r\n    height:20px;\r\n    border-radius: 20px;\r\n    background: repeating-linear-gradient(135deg,#f03355 0 10px,#ffa516 0 20px) 0/0% no-repeat,repeating-linear-gradient(135deg,#ddd 0 10px,#eee 0 20px) 0/100%;\r\n    animation:p3 2s infinite;\r\n}\r\n@keyframes p3 {\r\n    100% {background-size:100%}\r\n}\r\n```\r\nrepeating-linear-gradient(135deg,#ddd 0 10px,#eee 0 20px) 0/100%;画出灰色的斑马线条纹，repeating-linear-gradient(135deg,#f03355 0 10px,#ffa516 0 20px) 0/0% no-repeat则是进度条加载的条纹。\r\n\r\n### 虚线加载\r\n\r\n```css\r\n<div class=\"progress-4\"></div>\r\n.progress-4 {\r\n    width:120px;\r\n    height:20px;\r\n    -webkit-mask:linear-gradient(90deg,#000 70%,#0000 0) 0/20%;\r\n    background:linear-gradient(#000 0 0) 0/0% no-repeat #ddd;\r\n    animation:p4 2s infinite steps(6);\r\n}\r\n@keyframes p4 {\r\n    100% {background-size:120%}\r\n}\r\n```\r\n-webkit-mask默认有值repeat，不然遮罩不会有五个。\r\n\r\n### 电池加载\r\n\r\n```css\r\n<div class=\"progress-5\"></div>\r\n.progress-5 {\r\n    width:80px;\r\n    height:40px;\r\n    border:2px solid #000;\r\n    padding:3px;\r\n    background: repeating-linear-gradient(90deg,#000 0 10px,#0000 0 16px) 0/0% no-repeat content-box content-box;\r\n    position: relative;\r\n    animation:p5 2s infinite steps(6);\r\n}\r\n.progress-5::before {\r\n    content:\"\";\r\n    position: absolute;\r\n    top: 50%;\r\n    left:100%;\r\n    transform: translateY(-50%);\r\n    width:10px;\r\n    height: 10px;\r\n    border: 2px solid #000;\r\n}\r\n@keyframes p5 {\r\n    100% {background-size:120%}\r\n}\r\n```\r\n原作者对.progress-5::before伪元素实现如下：\r\n\r\n```css\r\n.progress-5::before {\r\n    content:\"\";\r\n    position: absolute;\r\n    top:-2px;\r\n    bottom:-2px;\r\n    left:100%;\r\n    width:10px;\r\n    background: linear-gradient(#0000   calc(50% - 7px),#000 0 calc(50% - 5px),#0000 0 calc(50% + 5px),#000 0 calc(50% + 7px),#0000 0) left /100% 100%,linear-gradient(#000 calc(50% - 5px),#0000 0 calc(50% + 5px),#000 0) left /2px 100%,linear-gradient(#0000 calc(50% - 5px),#000 0 calc(50% + 5px),#0000 0) right/2px 100%;\r\n    background-repeat:no-repeat;\r\n}\r\n```\r\n\r\n> #0000是透明，同等transparent\r\n\r\n### 内嵌加载\r\n\r\n```css\r\n<div class=\"progress-6\"></div>\r\n.progress-6 {\r\n    width:120px;\r\n    height:22px;\r\n    border-radius: 20px;\r\n    color: #514b82;\r\n    border:2px solid;\r\n    position: relative;\r\n}\r\n.progress-6::before {\r\n    content:\"\";\r\n    position: absolute;\r\n    margin:2px;\r\n    inset:0 100% 0 0;\r\n    border-radius: inherit;\r\n    background: #514b82;\r\n    animation:p6 2s infinite;\r\n}\r\n@keyframes p6 {\r\n    100% {inset:0}\r\n}\r\n```\r\ninset:0 100% 0 0;右边内缩100%，所以在keyframes部分需要将inset设置为0。\r\n\r\n### 珠链加载\r\n\r\n```css\r\n<div class=\"progress-7\"></div>\r\n.progress-7 {\r\n    width:120px;\r\n    height:24px;\r\n    -webkit-mask:radial-gradient(circle closest-side,#000 94%,#0000) 0 0/25% 100%,linear-gradient(#000 0 0) center/calc(100% - 12px) calc(100% - 12px) no-repeat;\r\n    background:linear-gradient(#25b09b 0 0) 0/0% no-repeat #ddd;\r\n    animation:p7 2s infinite linear;\r\n}\r\n@keyframes p7 {\r\n    100% {background-size:100%}\r\n}\r\n```\r\n\r\n遮罩-webkit-mask中radial-gradient是将宽度四等份，每份以最小closest-side的边为直径画圆。\r\n\r\n### 斑马线加载\r\n\r\n```css\r\n<div class=\"progress-8\"></div>\r\n.progress-8 {\r\n    width:60px;\r\n    height:60px;\r\n    border-radius: 50%;\r\n    -webkit-mask:linear-gradient(0deg,#000 55%,#0000 0) bottom/100% 18.18%;\r\n    background: linear-gradient(#f03355 0 0) bottom/100% 0% no-repeat #ddd;\r\n    animation:p8 2s infinite steps(7);\r\n}\r\n@keyframes p8 {\r\n    100% {background-size:100% 115%}\r\n}\r\n```\r\n\r\n对linear-gradient描绘的角度做调整，再加上蒙版。\r\n\r\n### 水柱加载\r\n\r\n```css\r\n<div class=\"progress-9\"></div>\r\n.progress-9 {\r\n    --r1: 154%;\r\n    --r2: 68.5%;\r\n    width:60px;\r\n    height:60px;\r\n    border-radius: 50%;\r\n    background:\r\n        radial-gradient(var(--r1) var(--r2) at top ,#0000 79.5%,#269af2 80%) center left,\r\n        radial-gradient(var(--r1) var(--r2) at bottom,#269af2 79.5%,#0000 80%) center center,\r\n        radial-gradient(var(--r1) var(--r2) at top ,#0000 79.5%,#269af2 80%) center right,\r\n        #ccc;\r\n    background-size: 50.5% 220%;\r\n    background-position: -100% 0%,0% 0%,100% 0%;\r\n    background-repeat:no-repeat;\r\n    animation:p9 2s infinite linear;\r\n}\r\n@keyframes p9 {\r\n    33%  {background-position: 0% 33% ,100% 33% ,200% 33% }\r\n    66%  {background-position: -100% 66%,0% 66% ,100% 66% }\r\n    100% {background-position: 0% 100%,100% 100%,200% 100%}\r\n}\r\n```\r\nradial-gradient画出水平面的波动，就三个圆。var(--r1)直接调用定义好的属性值。\r\n\r\n### 信号加载\r\n\r\n```css\r\n<div class=\"progress-10\"></div>\r\n.progress-10 {\r\n    width:120px;\r\n    height:60px;\r\n    border-radius:200px 200px 0 0;\r\n    -webkit-mask:repeating-radial-gradient(farthest-side at bottom ,#0000 0,#000 1px 12%,#0000 calc(12% + 1px) 20%);\r\n    background: radial-gradient(farthest-side at bottom,#514b82 0 95%,#0000 0) bottom/0% 0% no-repeat #ddd;\r\n    animation:p10 2s infinite steps(6);\r\n}\r\n@keyframes p10 {\r\n    100% {background-size:120% 120%}\r\n}\r\n```\r\n\r\n用repeating-radial-gradient方法画出环状的蒙版遮罩。radial-gradient从底部向上圆形渐变填充。\r\n\r\n### 3d加载\r\n\r\nhtml部分\r\n```html\r\n<body>\r\n<div class=\"pl\">\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__dot\"></div>\r\n\t<div class=\"pl__text\">Loading…</div>\r\n</div>\r\n</body>\r\n```\r\ncss部分\r\n```css\r\n* {\r\n  border: 0;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n:root {\r\n  --bg: #454954;\r\n  --fg: #e3e4e8;\r\n  --fg-t: rgba(227, 228, 232, 0.5);\r\n  --primary1: #255ff4;\r\n  --primary2: #5583f6;\r\n  --trans-dur: 0.3s;\r\n  font-size: calc(16px + (20 - 16) * (100vw - 320px) / (1280 - 320));\r\n}\r\n\r\nbody {\r\n  background-color: var(--bg);\r\n  background-image: linear-gradient(135deg, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2));\r\n  color: var(--fg);\r\n  font: 1em/1.5 \"Varela Round\", Helvetica, sans-serif;\r\n  height: 100vh;\r\n  min-height: 360px;\r\n  display: grid;\r\n  place-items: center;\r\n  transition: background-color var(--trans-dur), color var(--trans-dur);\r\n}\r\n\r\n.pl {\r\n  box-shadow: 2em 0 2em rgba(0, 0, 0, 0.2) inset, -2em 0 2em rgba(255, 255, 255, 0.1) inset;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  letter-spacing: 0.1em;\r\n  text-transform: uppercase;\r\n  transform: rotateX(30deg) rotateZ(45deg);\r\n  width: 15em;\r\n  height: 15em;\r\n}\r\n.pl, .pl__dot {\r\n  border-radius: 50%;\r\n}\r\n.pl__dot {\r\n  animation-name: shadow;\r\n  box-shadow: 0.1em 0.1em 0 0.1em black, 0.3em 0 0.3em rgba(0, 0, 0, 0.5);\r\n  top: calc(50% - 0.75em);\r\n  left: calc(50% - 0.75em);\r\n  width: 1.5em;\r\n  height: 1.5em;\r\n}\r\n.pl__dot, .pl__dot:before, .pl__dot:after {\r\n  animation-duration: 2s;\r\n  animation-iteration-count: infinite;\r\n  position: absolute;\r\n}\r\n.pl__dot:before, .pl__dot:after {\r\n  content: \"\";\r\n  display: block;\r\n  left: 0;\r\n  width: inherit;\r\n  transition: background-color var(--trans-dur);\r\n}\r\n.pl__dot:before {\r\n  animation-name: pushInOut1;\r\n  background-color: var(--bg);\r\n  border-radius: inherit;\r\n  box-shadow: 0.05em 0 0.1em rgba(255, 255, 255, 0.2) inset;\r\n  height: inherit;\r\n  z-index: 1;\r\n}\r\n.pl__dot:after {\r\n  animation-name: pushInOut2;\r\n  background-color: var(--primary1);\r\n  border-radius: 0.75em;\r\n  box-shadow: 0.1em 0.3em 0.2em rgba(255, 255, 255, 0.4) inset, 0 -0.4em 0.2em #2e3138 inset, 0 -1em 0.25em rgba(0, 0, 0, 0.3) inset;\r\n  bottom: 0;\r\n  clip-path: polygon(0 75%, 100% 75%, 100% 100%, 0 100%);\r\n  height: 3em;\r\n  transform: rotate(-45deg);\r\n  transform-origin: 50% 2.25em;\r\n}\r\n.pl__dot:nth-child(1) {\r\n  transform: rotate(0deg) translateX(5em) rotate(0deg);\r\n  z-index: 5;\r\n}\r\n.pl__dot:nth-child(1), .pl__dot:nth-child(1):before, .pl__dot:nth-child(1):after {\r\n  animation-delay: 0s;\r\n}\r\n.pl__dot:nth-child(2) {\r\n  transform: rotate(-30deg) translateX(5em) rotate(30deg);\r\n  z-index: 4;\r\n}\r\n.pl__dot:nth-child(2), .pl__dot:nth-child(2):before, .pl__dot:nth-child(2):after {\r\n  animation-delay: -0.1666666667s;\r\n}\r\n.pl__dot:nth-child(3) {\r\n  transform: rotate(-60deg) translateX(5em) rotate(60deg);\r\n  z-index: 3;\r\n}\r\n.pl__dot:nth-child(3), .pl__dot:nth-child(3):before, .pl__dot:nth-child(3):after {\r\n  animation-delay: -0.3333333333s;\r\n}\r\n.pl__dot:nth-child(4) {\r\n  transform: rotate(-90deg) translateX(5em) rotate(90deg);\r\n  z-index: 2;\r\n}\r\n.pl__dot:nth-child(4), .pl__dot:nth-child(4):before, .pl__dot:nth-child(4):after {\r\n  animation-delay: -0.5s;\r\n}\r\n.pl__dot:nth-child(5) {\r\n  transform: rotate(-120deg) translateX(5em) rotate(120deg);\r\n  z-index: 1;\r\n}\r\n.pl__dot:nth-child(5), .pl__dot:nth-child(5):before, .pl__dot:nth-child(5):after {\r\n  animation-delay: -0.6666666667s;\r\n}\r\n.pl__dot:nth-child(6) {\r\n  transform: rotate(-150deg) translateX(5em) rotate(150deg);\r\n  z-index: 1;\r\n}\r\n.pl__dot:nth-child(6), .pl__dot:nth-child(6):before, .pl__dot:nth-child(6):after {\r\n  animation-delay: -0.8333333333s;\r\n}\r\n.pl__dot:nth-child(7) {\r\n  transform: rotate(-180deg) translateX(5em) rotate(180deg);\r\n  z-index: 2;\r\n}\r\n.pl__dot:nth-child(7), .pl__dot:nth-child(7):before, .pl__dot:nth-child(7):after {\r\n  animation-delay: -1s;\r\n}\r\n.pl__dot:nth-child(8) {\r\n  transform: rotate(-210deg) translateX(5em) rotate(210deg);\r\n  z-index: 3;\r\n}\r\n.pl__dot:nth-child(8), .pl__dot:nth-child(8):before, .pl__dot:nth-child(8):after {\r\n  animation-delay: -1.1666666667s;\r\n}\r\n.pl__dot:nth-child(9) {\r\n  transform: rotate(-240deg) translateX(5em) rotate(240deg);\r\n  z-index: 4;\r\n}\r\n.pl__dot:nth-child(9), .pl__dot:nth-child(9):before, .pl__dot:nth-child(9):after {\r\n  animation-delay: -1.3333333333s;\r\n}\r\n.pl__dot:nth-child(10) {\r\n  transform: rotate(-270deg) translateX(5em) rotate(270deg);\r\n  z-index: 5;\r\n}\r\n.pl__dot:nth-child(10), .pl__dot:nth-child(10):before, .pl__dot:nth-child(10):after {\r\n  animation-delay: -1.5s;\r\n}\r\n.pl__dot:nth-child(11) {\r\n  transform: rotate(-300deg) translateX(5em) rotate(300deg);\r\n  z-index: 6;\r\n}\r\n.pl__dot:nth-child(11), .pl__dot:nth-child(11):before, .pl__dot:nth-child(11):after {\r\n  animation-delay: -1.6666666667s;\r\n}\r\n.pl__dot:nth-child(12) {\r\n  transform: rotate(-330deg) translateX(5em) rotate(330deg);\r\n  z-index: 6;\r\n}\r\n.pl__dot:nth-child(12), .pl__dot:nth-child(12):before, .pl__dot:nth-child(12):after {\r\n  animation-delay: -1.8333333333s;\r\n}\r\n.pl__text {\r\n  font-size: 0.75em;\r\n  max-width: 5rem;\r\n  position: relative;\r\n  text-shadow: 0 0 0.1em var(--fg-t);\r\n  transform: rotateZ(-45deg);\r\n}\r\n/* Animations */\r\n@keyframes shadow {\r\n  from {\r\n    animation-timing-function: ease-in;\r\n    box-shadow: 0.1em 0.1em 0 0.1em black, 0.3em 0 0.3em rgba(0, 0, 0, 0.3);\r\n  }\r\n  25% {\r\n    animation-timing-function: ease-out;\r\n    box-shadow: 0.1em 0.1em 0 0.1em black, 0.8em 0 0.8em rgba(0, 0, 0, 0.5);\r\n  }\r\n  50%, to {\r\n    box-shadow: 0.1em 0.1em 0 0.1em black, 0.3em 0 0.3em rgba(0, 0, 0, 0.3);\r\n  }\r\n}\r\n@keyframes pushInOut1 {\r\n  from {\r\n    animation-timing-function: ease-in;\r\n    background-color: var(--bg);\r\n    transform: translate(0, 0);\r\n  }\r\n  25% {\r\n    animation-timing-function: ease-out;\r\n    background-color: var(--primary2);\r\n    transform: translate(-71%, -71%);\r\n  }\r\n  50%, to {\r\n    background-color: var(--bg);\r\n    transform: translate(0, 0);\r\n  }\r\n}\r\n@keyframes pushInOut2 {\r\n  from {\r\n    animation-timing-function: ease-in;\r\n    background-color: var(--bg);\r\n    clip-path: polygon(0 75%, 100% 75%, 100% 100%, 0 100%);\r\n  }\r\n  25% {\r\n    animation-timing-function: ease-out;\r\n    background-color: var(--primary1);\r\n    clip-path: polygon(0 25%, 100% 25%, 100% 100%, 0 100%);\r\n  }\r\n  50%, to {\r\n    background-color: var(--bg);\r\n    clip-path: polygon(0 75%, 100% 75%, 100% 100%, 0 100%);\r\n  }\r\n}\r\n```\r\n\r\n### 文字旋转扭曲\r\n\r\n整体实现思路如下：\r\n1. 构建n个同心的div矩形。每个矩形的尺寸逐渐递减，每个矩形的旋转延迟时间也逐渐递减，实现旋转时的扭曲效果。并且每个div矩形使用伪类::after来显示文本内容。\r\n2. 设置滤镜filter。用来设置文本的模糊效果以及明暗对比度。\r\n3. 设置animation旋转动画。让矩形在指定的周期内做360度旋转。\r\n\r\nhtml部分\r\n\r\n```html\r\n<body>\r\n<div class=\"twist\" id=\"textArea\"></div>\r\n<script type=\"text/javascript\">\r\n    var text = \"CSS3_Rotate\";\r\n    var size = 860;\r\n    var delay = 2;\r\n    // 首先我们通过JS往容器中生成n个同心div矩形，这里我们生成42个。\r\n    var areaCount = 42;\r\n    var container = document.getElementById(\"textArea\");\r\n    for (var i = 0; i < areaCount; i++) {\r\n        addArea(\r\n            size - (size / areaCount) * i,\r\n            delay - (delay / areaCount) * i,\r\n            container\r\n        );\r\n    }\r\n    function addArea(areaSize, areaDelay, parentContainer) {\r\n        var area = document.createElement(\"div\");\r\n        area.setAttribute(\r\n            \"style\",\r\n            \"--size:\" + areaSize + \"px;\" + \"--delay:\" + areaDelay + \"s;\"\r\n        );\r\n        area.setAttribute(\r\n            \"title\",\r\n            text\r\n        );\r\n        parentContainer.appendChild(area);\r\n    }\r\n</script>\r\n</body>\r\n```\r\n\r\ncss部分\r\n\r\n```css\r\n*, *::before, *::after {\r\n  padding: 0;\r\n  margin: 0 auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: \"Lobster\", cursive;\r\n  background-color: #000;\r\n  color: #fff;\r\n  min-height: 100vh;\r\n  display: grid;\r\n  place-items: center;\r\n  overflow:hidden;\r\n}\r\n\r\n.twist {\r\n  position: relative;\r\n  color: aquamarine;\r\n  font-size: 78px;\r\n  /*blur(2px)表示元素外边框2px外使用高斯模糊效果,contrast(4)设置对比度，默认是1。可以使用百分比也可以使用小数表示*/\r\n  filter: blur(2px) contrast(4);\r\n}\r\n.twist > div {\r\n  position: absolute;\r\n  width: var(--size);\r\n  height: var(--size);\r\n  background-color: #000;\r\n  transform: translate(-50%, -50%);\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  -webkit-animation: twist 4s var(--delay) infinite ease-in-out;\r\n          animation: twist 4s var(--delay) infinite ease-in-out;\r\n}\r\n.twist > div::after {\r\n  content: attr(title);\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n@-webkit-keyframes twist {\r\n  0% {\r\n    transform: translate(-50%, -50%) rotateZ(0deg);\r\n  }\r\n  50%, 100% {\r\n    transform: translate(-50%, -50%) rotateZ(360deg);\r\n  }\r\n}\r\n/*旋转和淡入淡出的动画效果，每个div元素延迟旋转的时间在之前创建同心矩形的时候已经设置了*/\r\n@keyframes twist {\r\n  0% {\r\n    transform: translate(-50%, -50%) rotateZ(0deg);\r\n  }\r\n  50%, 100% {\r\n    transform: translate(-50%, -50%) rotateZ(360deg);\r\n  }\r\n}\r\n```\r\n\r\n\r\n## 相关文章\r\n\r\n- [CSS@规则](http://c.biancheng.net/css3/at-rule.html)\r\n- [64个超级有用的CSS资源](https://mp.weixin.qq.com/s/xYUjsf4IKYORqOLNNnEHlA)\r\n- [HTML、CSS demo](https://www.html5tricks.com/page/26)\r\n- [10个值得收藏的CSS资源](https://mp.weixin.qq.com/s/Sn22fn_70QHWD753eFZHiQ)\r\n- [13个让你值得一试的CSS技巧](https://mp.weixin.qq.com/s/F22r72FW1CCYug_OtarZdQ)\r\n- [10个顶级的CSS动画库](https://mp.weixin.qq.com/s/fkocUOGricoH4Zad4U3Wjw)\r\n","categories":[{"name":"CSS","path":"api/categories/CSS.json"}],"tags":[{"name":"代码实战","path":"api/tags/代码实战.json"}]}