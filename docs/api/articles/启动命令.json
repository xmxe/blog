{"title":"启动命令","slug":"启动命令","date":"2022-09-27T06:26:58.323Z","updated":"2023-12-25T02:55:04.378Z","comments":true,"path":"api/articles/启动命令.json","excerpt":null,"covers":"https://pic1.zhimg.com/v2-c35c3cd265fdcbb1fa7adbea81378c7a.jpg","content":"\r\n\r\n### redis\r\n\r\n```shell\r\n./redis-server /usr/local/redis/redis.conf\r\n./redis-cli -h 127.0.0.1 -p 6379 -a 123456\r\n./redis-cli -h 127.0.0.1 -p 6379 -a 123456 shutdown # 关闭redis\r\n```\r\n\r\n### nginx\r\n\r\n```shell\r\n/usr/local/nginx/sbin/nginx -s reload\r\n/usr/local/nginx/sbin/nginx -s quit # (正常退出，保存相关信息)\r\n/usr/local/nginx/sbin/nginx -s stop # (立即退出，不保存相关信息)\r\n\r\n# windows\r\nstart nginx(.exe)\r\n```\r\n\r\n### zookeeper\r\n\r\n```shell\r\n./zkServer.sh start\r\n./zkCli.sh -server 127.0.0.1:2181\r\n```\r\n\r\n### kafka\r\n\r\n```shell\r\n./kafka-server-start.sh ../config/server.properties 1>/dev/null 2>&1 &\r\n./kafka-server-stop.sh\r\n./zookeeper-server-start.sh ../conf/zookeeper.properties\r\n./zookeeper-server-stop.sh\r\n```\r\n\r\n### nexus\r\n\r\n```shell\r\n./bin/nexus start\r\n# 访问地址:http://192.168.236.131:8081/nexus 默认账号:admin/admin123\r\n```\r\n\r\n### cas_server\r\n\r\n```shell\r\ncd /usr/local/cas/cas-overlay-template\r\n./build.sh run\r\n# 清除target文件夹\r\n./build.sh clean\r\n# 其他命令可以查看build.sh里面的脚本内容,控制台出现READY后访问ip:port/cas/login 即可登陆,默认账号：casuser:Mellon\r\n```\r\n\r\n### nacos\r\n\r\n```shell\r\n# 单机模式启动\r\n./startup.sh -m standalone\r\n# 集群启动使用外置数据源,需要配置cluster.conf且节点数量要>=3\r\n./startup.sh\r\n# 集群启动使用内置数据源\r\nsh startup.sh -p embedded\r\n# 默认账号：nacos:nacos\r\n```\r\n\r\n### arthas\r\n\r\n```shell\r\njava -jar arthas-boot.jar [java pid]\r\n# web console：127.0.0.1:8563 127.0.0.1:3658\r\n```\r\n\r\n### consul\r\n\r\n```shell\r\n# -dev表示开发模式运行，只有本地可以访问，另外还有-server表示服务模式运行\r\nconsul agent -dev\r\n# 可以使用ip访问\r\n./consul agent -dev -client 0.0.0.0 -ui\r\n# 访问localhost:8500\r\n```\r\n\r\n### weblogic\r\n\r\n```shell\r\n# 执行./startWebLogic.sh\r\n# 访问http://ip:7001/console\r\n/home/test/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin\r\n```\r\n\r\n### shell脚本\r\n\r\n> [shell菜鸟教程](https://www.runoob.com/linux/linux-shell.html)\r\n> [9个实用shell脚本，建议收藏](https://mp.weixin.qq.com/s/KhCmbC5UPuRgmqGX-uOJCw)\r\n> [Shell编程基础知识总结](https://javaguide.cn/cs-basics/operating-system/shell-intro.html)\r\n> [手把手教你写一个Shell脚本部署你的服务](https://mp.weixin.qq.com/s/Bumh5WedbvsNLL4sL5S4Qg)\r\n> \r\n> $#是传给脚本的参数个数\r\n> $0是脚本本身的名字\r\n> $1是传递给该shell脚本的第一个参数\r\n> $2是传递给该shell脚本的第二个参数\r\n> $@是传给脚本的所有参数的列表\r\n> $\\*是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个\r\n> $$是脚本运行的当前进程ID号\r\n> $?是显示最后命令的退出状态，0表示没有错误，其他表示有错误\r\n\r\n#### 启动jar\r\n\r\n> #!/bin/bash是指此脚本使用/bin/bash来解释执行。其中，#!是一个特殊的表示符，其后，跟着解释此脚本的shell路径。命令文件所在的路径是/bin/sh或者/usr/bin/sh.bash只是shell的一种，还有很多其它shell，如：sh,csh,ksh,tcsh.除第一行外，脚本中所有以“#”开头的行都是注释。\r\n\r\n```shell\r\n#!/bin.sh\r\n# 注意不要有空格,否则解释成命令\r\ngatewayjar=gateway.jar\r\ngatewaypid=$(ps -ef | grep java | grep $gatewayjar | grep -v 'grep'| awk '{print $2}')\r\n# 两个命令在一行的话使用分号断开\r\nif [ $gatewaypid ]; then\r\n\tkill -9 $gatewaypid\r\n\techo \"进程$gatewaypid killed\"\r\nfi\r\nnohup java -jar gateway.jar >/dev/null 2>&1 &\r\n# 判断上一个命令是否执行成功 $?返回上一个命令执行状态 0成功1失败 -ne表示不等于\r\nif [ $? -ne 0 ]; then\r\n\techo \"start failed\"\r\nelse\r\n\techo \"start success\"\r\nfi\r\n\r\n# ...\r\n```\r\n\r\n#### kill所有java进程\r\n```shell\r\n#!/bin.sh\r\n# 查找进程们（注意可能返回多个）\r\npIdArr=$(ps -ef | grep java | grep -v \"grep\" | awk '{print $2}')\r\n# 遍历kill进程们\r\nfor pId in ${pIdArr}; do\r\n  kill -9 ${pId}\r\n  echo \"进程：${pId} 被kill\"\r\ndone\r\n```\r\n#### ruoyi脚本\r\n```shell\r\n#!/bin/sh\r\n# ./ry.sh start:启动 stop:停止 restart:重启 status:状态\r\nAppName=ruoyi-admin.jar\r\n\r\n# JVM参数\r\nJVM_OPTS=\"-Dname=$AppName  -Duser.timezone=Asia/Shanghai -Xms512m -Xmx1024m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:+PrintGCDateStamps  -XX:+PrintGCDetails -XX:NewRatio=1 -XX:SurvivorRatio=30 -XX:+UseParallelGC -XX:+UseParallelOldGC\"\r\nAPP_HOME=`pwd`\r\nLOG_PATH=$APP_HOME/logs/$AppName.log\r\n# start stop restart status\r\nif [ \"$1\" = \"\" ];\r\nthen\r\n\t# echo -e 将转义后的内容输出到屏幕上\r\n    echo -e \"\\033[0;31m 未输入操作名 \\033[0m  \\033[0;34m {start|stop|restart|status} \\033[0m\"\r\n    exit 1\r\nfi\r\n\r\nif [ \"$AppName\" = \"\" ];\r\nthen\r\n    echo -e \"\\033[0;31m 未输入应用名 \\033[0m\"\r\n    exit 1\r\nfi\r\n\r\nfunction start()\r\n{\r\n    PID=`ps -ef |grep java|grep $AppName|grep -v grep|awk '{print $2}'`\r\n\r\n\tif [ x\"$PID\" != x\"\" ]; then\r\n\t    echo \"$AppName is running...\"\r\n\telse\r\n\t\tnohup java $JVM_OPTS -jar $AppName > /dev/null 2>&1 &\r\n\t\techo \"Start $AppName success...\"\r\n\tfi\r\n}\r\n\r\nfunction stop()\r\n{\r\n    echo \"Stop $AppName\"\r\n\r\n\tPID=\"\"\r\n\tquery(){\r\n\t\tPID=`ps -ef |grep java|grep $AppName|grep -v grep|awk '{print $2}'`\r\n\t}\r\n\r\n\tquery\r\n\tif [ x\"$PID\" != x\"\" ]; then\r\n\t\tkill -TERM $PID\r\n\t\techo \"$AppName (pid:$PID) exiting...\"\r\n\t\twhile [ x\"$PID\" != x\"\" ]\r\n\t\tdo\r\n\t\t\tsleep 1\r\n\t\t\tquery\r\n\t\tdone\r\n\t\techo \"$AppName exited.\"\r\n\telse\r\n\t\techo \"$AppName already stopped.\"\r\n\tfi\r\n}\r\n\r\nfunction restart()\r\n{\r\n    stop\r\n    sleep 2\r\n    start\r\n}\r\n\r\nfunction status()\r\n{\r\n    PID=`ps -ef |grep java|grep $AppName|grep -v grep|wc -l`\r\n    if [ $PID != 0 ];then\r\n        echo \"$AppName is running...\"\r\n    else\r\n        echo \"$AppName is not running...\"\r\n    fi\r\n}\r\n\r\ncase $1 in\r\n    start)\r\n    start;;\r\n    stop)\r\n    stop;;\r\n    restart)\r\n    restart;;\r\n    status)\r\n    status;;\r\n    *)\r\n\r\nesac\r\n\r\n```\r\n\r\n","categories":[],"tags":[{"name":"随笔","path":"api/tags/随笔.json"}]}