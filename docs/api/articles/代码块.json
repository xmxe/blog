{"title":"代码块","slug":"代码块","date":"2022-09-30T00:51:14.833Z","updated":"2023-07-05T00:28:35.985Z","comments":true,"path":"api/articles/代码块.json","excerpt":null,"covers":"https://pic1.zhimg.com/v2-a15c9d4dd48986974acd43e8b722350d_r.jpg","content":"\r\n\r\n\r\n## Java相关\r\n\r\n### fastjson转换\r\n\r\n```java\r\n// json = {\"a\":1,\"b\":2,\"c\":[\"d\":3,\"e\":4]}\r\n// json转JSONObject\r\nJSONObject a = json.getJSONObject(\"a\");\r\n// json转JSONArray\r\nJSONArray b = json.getJSONArray(\"c\");\r\n// json转对象\r\nMap<String,Object> map = JSONObject.parseObject(json.get(\"c\"),new TypeReference<Map<String,Object>>(){});\r\n// 将Java对象序列化为JSON字符串，支持各种各种Java基本类型和JavaBean,避免value为null时过滤掉字段\r\nJSONObject.toJSONString(data,SerializerFeature.WriteMapNullValue);\r\nJSON.parse() JSON.parseObject()JSON.parseArray()  json.get() ...\r\n```\r\n\r\n### 获取路径\r\n\r\n```java\r\n// http://localhost:8080/demo/course/index.jsp\r\n// 返回：/demo\r\nrequest.getContextPath()\r\n// 返回当前页面所在目录下全名称:/course/index.jsp\r\nrequest.getServletPath()\r\n// 返回浏览器地址栏地址 http://localhost:8080/demo/course/index.jsp\r\nrequest.getRequestURL()\r\n// 返回包含工程名的当前页面全路径：/demo/course/index.jsp\r\nrequest.getRequestURI()\r\n// 返回 http://localhost:8080\r\nrequest.getScheme()+\"://\"+request.getServerName()+\":\"+ request.getServerPort()\r\n// 返回E:\\apache-tomcat-7.0.82\\webapps\\jnhouse\\\r\nrequest.getSession().getServletContext().getRealPath(File.separator)\r\n// 获取项目存放class文件的全路径 F:\\zhongzhu\\WebRoot\\WEB-INF\\classes\r\nThread.currentThread().getContextClassLoader().getResource(\"/\").getPath()\r\n//从classpath路径下获取资源并返回一个InputStream供读取文件\r\n(this)类名.class.getClassLoader().getResourceAsStream(\"name\")\r\n// 会在当前类所在的包结构下查找相应的资源\r\n类名.class.getResourceAsStream(\"name\")\r\n// 请求转发\r\nreturn “forward:forward2.html”;\r\n// 重定向\r\nreturn “redirect:redirect2.html”;\r\nrequest.getRequestDispatcher(\"url\").forward(request, response)\r\nresponse.sendRedirect(\"leader.htm\");\r\n\r\n```\r\n\r\n### list操作\r\n\r\n```java\r\n// 交集 listA内容变为listA和listB都存在的对象 listB不变\r\nlistA.retainAll(listB)\r\n// 差集 listA中存在listB的内容去重 listB不变\r\nlistA.removeAll(listB)\r\n// 并集,为了去重，listA先取差集，然后追加全部的listB listB不变\r\nlistA.removeAll(listB) listA.addAll(listB)\r\n```\r\n\r\n### 代码分页\r\n\r\n```java\r\nInteger page = map.get(\"page\");\r\nInteger limit = map.get(\"rows\");\r\nInteger start = (page-1)*limit;\r\n//List<Map<String,Object>> subList = list.subList(start,start+limit>list.size()?list.size():start+limit)\r\nList<Map<String,Object>> subList = list.subList(start,Math.min(start+limit,list.size))\r\n```\r\n### mybatis foreach批量添加/更新写法\r\n\r\n```xml\r\n<insert id=\"insertList\" parameterType=\"map\">\r\n begin try\r\n  insert into gs_job_pfr_mx (tag_code,val,time) values\r\n  <foreach collection=\"list\" item=\"item\" separator=\",\"  index=\"index\">\r\n   (#{item.tag},#{item.value},GETDATE())\r\n  </foreach>\r\n end try\r\n begin catch\r\n  update gs_job_pfr_mx set val =\r\n<foreach collection=\"list\" item=\"item\" separator=\" \"open=\"case tag_code\" close=\"end\">\r\n  when #{item.tag} then #{item.value}\r\n </foreach>,\r\n  time = GETDATE()\r\n  where tag_code in\r\n <foreach collection=\"list\" item=\"item\" separator=\",\" open=\"(\" close=\")\">\r\n    #{item.tag}\r\n  </foreach>\r\n end catch\r\n </insert>\r\n\r\n<!-- trim标签-->\r\n<update id=\"updateYsz\" parameterType=\"tblYsz\">\r\n    update tblysz set\r\n        <trim suffixOverrides=\",\">\r\n            <if test=\"name!=null\">name=#{name},</if>\r\n            <if test=\"jgdm!=null\">jgdm=#{jgdm},</if>\r\n            <if test=\"xz!=null\">xz=#{xz},</if>\r\n        </trim>\r\n     <where>id=#{id}</where>\r\n </update>\r\n\r\n<!-- choose标签 -->\r\n<select id=\"selectByIdOrName\" resultMap=\"BaseResultMap\" parameterType=\"com.homejim.mybatis.entity.Student\">\r\n    select\r\n    <include refid=\"Base_Column_List\" />\r\n    from student\r\n    where 1=1\r\n    <choose>\r\n      <when test=\"studentId != null\">\r\n        and student_id=#{studentId}\r\n      </when>\r\n      <when test=\"name != null and name != ''\">\r\n        and name=#{name}\r\n      </when>\r\n      <otherwise>\r\n        and 1=2\r\n      </otherwise>\r\n    </choose>\r\n  </select>\r\n\r\n<!-- resultMap-->\r\n<resultMap id=\"BaseResultMap\"type=\"com.xmxe.entity.User\">\r\n<id property=\"id\" column=\"id\" jdbcType=\"INTEGER\" javaType=\"java.lang.IntegerINTEGER\"/>\r\n<result property=\"username\" column=\"username\" jdbcType=\"VARCHAR\" javaType=\"java.lang.String\"/>\r\n<result property=\"password\" column=\"password\" jdbcType=\"VARCHAR\" javaType=\"java.lang.String\"/>\r\n</resultMap>\r\n\r\n<sql id=\"commonsSql\">\r\n\tid,username,password\r\n</sql>\r\n\r\n```\r\n\r\n> [MyBatis动态SQL](https://mp.weixin.qq.com/s/-aIum139UB_dt7OIaiccfA)\r\n> [10种超好用的MyBatis写法](https://mp.weixin.qq.com/s/G7JpSRbEAw0dDbSj3lneOw)\r\n\r\n### mybatis连接数据库\r\n\r\n```java\r\nString mybatisConfig= \"mybatis-config.xml\";\r\nInputStream is = Resources.getResourceAsStream(mybatisConfig);\r\nSqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);\r\nSqlSession session = sessionFactory.openSession();\r\nsession.getMapper(Mapper.class).findByid();\r\n```\r\n\r\n### 正则表达式\r\n\r\n匹配数字，包括小数\r\n```js\r\nvar patten = /^[+-]?(0|([1-9]\\d*))(\\.\\d+)?$/\r\n```\r\n[+-] 中括号表示其内的内容都是符合要求的匹配，所以这个表示“+”或\"-\"\r\nMatcher 类中group(0) 表示正则表达式中符合条件的字符串。\r\nMatcher 类中group(1) 表示正则表达式中符合条件的字符串中的第一个()中的字符串。\r\nMatcher 类中group(2) 表示正则表达式中符合条件的字符串中的第二个()中的字符串。\r\nMatcher 类中group(3) 表示正则表达式中符合条件的字符串中的第三个()中的字符串。\r\ngroup是针对()来说的，group(0)就是指的整个串，group(1)指的是第一个括号里的东西，group(2)指的第二个括号里的东西。\r\n```java\r\nString line = \"123ra9040 123123aj234 adf12322ad 222jsk22\";\r\nString pattern = \"(\\\\d+)([a-z]+)(\\\\d+)\";\r\n// 创建Pattern对象\r\nPattern r = Pattern.compile(pattern);\r\n// 现在创建matcher对象\r\nMatcher m = r.matcher(line);\r\n// m.find是否找到正则表达式中符合条件的字符串\r\nwhile (m.find()) {\r\n    // 拿到上面匹配到的数据\r\n    System.out.println(\"Found value: \" + m.group(0) );\r\n    System.out.println(\"Found value: \" + m.group(1) );\r\n    System.out.println(\"Found value: \" + m.group(2) );\r\n    System.out.println(\"Found value: \" + m.group(3) );\r\n}\r\n```\r\ngroup(0)对应着((//d+)([a-z]+)(//d+))所匹配的数据123ra9040或者123123aj234或者222jsk22\r\ngroup(2)输出的数据是group(0)中所匹配的数据,第二个括号的表达式,也就是([a-z]+)匹配到是数据ra或者aj或者jsk\r\ngroup(3)输出的数据是group(0)中所匹配的数据,第三个括号的表达式,也就是(//d+)匹配到是数据9040或者234或者22\r\n\r\nJS使用正则表达式\r\n```js\r\n// 可以和java正则表达式共用，如果不使用new RegExp()，则和java正则表达式书写方式有差异\r\nvar patten = new RegExp(\"...\")\r\npatten.text(要匹配的内容)\r\n```\r\n\r\n> [对正则表达式，这么多年你还在害怕吗](https://mp.weixin.qq.com/s/40UCh57rBu9LafTfjEQh1g)\r\n> [正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\r\n> [常用正则表达式最强整理（速查手册）](https://mp.weixin.qq.com/s/ABCqcJPNf1VJ7ByGrVlS_A)\r\n\r\n### 冒泡排序\r\n\r\n```java\r\nint[] arr = {2,5,4,1};\r\nfor(int i=0;i<arr.length-1;i++){\r\n　　for(int j=0;j<arr.length-1-i;j++){\r\n　　　　if(arr[j]>arr[j+1]){\r\n　　　　　　int temp=arr[j];\r\n　　　　　　arr[j]=arr[j+1];\r\n　　　　　　arr[j+1]=temp;\r\n　　　　}\r\n　　}\r\n} \r\n```\r\n\r\n### JDK8 base64转换\r\n\r\n```java\r\nString str = \"str\";\r\nString encoded = Base64.getEncoder().encodeToString(str.getBytes( StandardCharsets.UTF_8));\r\nString decoded = new String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);\r\n```\r\n\r\n### poi excel\r\n\r\n```java\r\npublic void creatExcel(File file,String code,String ts){\r\n\tString[] header={\"有功功率\",\"时间\",\"pss输出信号\",\"时间\"};\r\n\tWorkbook wb = new XSSFWorkbook();\r\n\tSheet sheet = wb.createSheet(\"sheet1\");\r\n\tRow rowFirst = sheet.createRow(0);\r\n\tfor(int i = 0;i<header.length;i++){\r\n\t\tsheet.setColumnWidth(i, 5000);\r\n\t}\r\n\tfor(int i = 0;i<header.length;i++){\r\n\t\tCell cell = rowFirst.createCell(i);\r\n\t\tcell.setCellValue(header[i]);\r\n\t}\r\n\tfor(int i =0;i<maxSize;i++){\r\n\t\tRow row = sheet.createRow(i+1);\r\n\t\trow.createCell(0).setCellValue(\"\");\r\n\t\trow.createCell(1).setCellValue(\"\");\r\n\t\trow.createCell(2).setCellValue(\"\");\r\n\t\trow.createCell(3).setCellValue(\"\");\r\n\t}\r\n    try{// 指定本地文件流\r\n\t    OutputStream os = new FileOutputStream(file);\r\n        // excel写入\r\n        wb.write(os);\r\n        os.close();\r\n\t}catch(Exception e){\r\n\t\te.printStackTrace();\r\n\t}\r\n}\r\n\r\npublic void excel(HttpServletRequest request,HttpServletResponse response){\r\n\tString[] handers = {\"id\",\"书名\",\"作者\",\"价格\"};\r\n\tList<Book> list = masterMapper.querySome(null,1,5);\r\n\ttry{\r\n\t\tString filedisplay = \"test.xlsx\";\r\n\t\tfiledisplay = URLEncoder.encode(filedisplay, \"UTF-8\");\t\t\t\r\n\t\t//由浏览器指定下载路径\r\n\t\t//response.reset();\t\t\t\r\n\t\t//response.setContentType(\"application/x-download\");\r\n\t\t//response.setContentType(\"application/vnd.ms-excel;charset=utf-8\");\r\n\t\tresponse.addHeader(\"Content-Disposition\", \"attachment;filename=\"+ filedisplay);\r\n\t\trequest.setCharacterEncoding(\"UTF-8\");\r\n\t\tresponse.setContentType(\"APPLICATION/OCTET-STREAM\");\r\n\t\tresponse.setHeader(\"Content-Dispostion\",\"attachment;filename=\".concat(filedisplay));\r\n\t\t\t\r\n\t\tHSSFWorkbook wb = new HSSFWorkbook();//创建工作簿\r\n\t\tHSSFSheet sheet = wb.createSheet(\"操作\");//第一个sheet\r\n\t\tHSSFRow rowFirst = sheet.createRow(0);//第一个sheet第一行为标题\r\n\t\trowFirst.setHeight((short) 500);\r\n        HSSFCellStyle cellStyle = wb.createCellStyle();// 创建单元格样式对象\r\n        cellStyle.setAlignment(HorizontalAlignment.CENTER); // 居中\r\n        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);\r\n\t\tfor (int i = 0; i < handers.length; i++) {\r\n\t\t  sheet.setColumnWidth(i, 4000);// 设置列宽\r\n\t\t}\r\n\t\t//写标题了\r\n\t\tfor (int i = 0; i < handers.length; i++) {\r\n\t\t\t//获取第一行的每一个单元格\r\n\t\t\tHSSFCell cell = rowFirst.createCell(i);\r\n\t\t\t//往单元格里面写入值\r\n\t\t\tcell.setCellValue(handers[i]);\r\n\t\t\tcell.setCellStyle(cellStyle);\r\n\t\t}\r\n\t\tfor (int i = 0; i < list.size(); i++) {\r\n\t\t\tBook u = list.get(i);\t\t\t\r\n\t\t\t//创建数据行\r\n\t\t\tHSSFRow row = sheet.createRow(i + 1);\t\t\t\t\r\n\t\t\trow.setHeight((short) 400); // 设置每行的高度\r\n\t\t\t//设置对应单元格的值\r\n\t        row.createCell(0).setCellValue(u.getId());\r\n            row.getCell(0).setCellStyle(cellStyle);\r\n            row.createCell(1).setCellValue(u.getBookname());\r\n            row.getCell(1).setCellStyle(cellStyle);\r\n            row.createCell(2).setCellValue(u.getBookauthor());\r\n            row.getCell(2).setCellStyle(cellStyle);\r\n            row.createCell(3).setCellValue(u.getBookprice());\r\n            row.getCell(3).setCellStyle(cellStyle);\r\n\r\n\t}\r\n        OutputStream os = response.getOutputStream();\r\n        wb.write(os);\r\n        os.close();\r\n        wb.close();\r\n\t}catch(Exception e){\r\n\t\te.printStackTrace();\r\n\t}\r\n}\r\n```\r\n\r\n### ServletRequest常用方法\r\n\r\n```java\r\nObject getAttribute(String name)\t\r\n// 以Object形式返回指定属性的值，如果不存在给定名称的属性，则返回null。\r\nEnumeration\tgetAttributeNames()\t\r\n// 返回包含此请求可用属性的名称的Enumeration。如果该请求没有可用的属性，则此方法返回一个空的Enumeration。\r\nString getCharacterEncoding()\t\r\n// 返回此请求正文中使用的字符编码的名称。如果该请求未指定字符编码，则此方法返回null\r\nvoid setCharacterEncoding(String env)\t\r\n// 重写此请求正文中使用的字符编码的名称。必须在使用getReader() 读取请求参数或读取输入之前调用此方法。否则，此方法没有任何效果。\r\nint getContentLength()\t\r\n// 返回请求正文的长度（以字节为单位），并使输入流可以使用它，如果长度未知，则返回-1。对于HTTP servlet，返回的值与CGI变量 CONTENT_LENGTH的值相同。\r\nString getContentType()\t\r\n// 返回请求正文的MIME类型，如果该类型未知，则返回null。对于HTTP servlet，返回的值与CGI变量CONTENT_TYPE的值相同。\r\nServletInputStream getInputStream()\t\r\n// 使用ServletInputStream以二进制数据形式获取请求正文。可调用此方法或getReader读取正文，而不是两种方法都调用。\r\nString getParameter(String name)\t\r\n// 以String形式返回请求参数的值，如果该参数不存在，则返回null。请求参数是与请求一起发送的额外信息。对于HTTP servlet，参数包含在查询字符串或发送的表单数据中。\r\nEnumeration\tgetParameterNames()\t\r\n// 返回包含此请求中所包含参数的名称的String对象的Enumeration。如果该请求没有参数，则此方法返回一个空的Enumeration。\r\nString[] getParameterValues(String name)\t\r\n// 返回包含给定请求参数拥有的所有值的String对象数组，如果该参数不存在，则返回null。\r\nMap<K, V> getParameterMap()\t\r\n// 返回此请求的参数的 java.util.Map。请求参数是与请求一起发送的额外信息。对于HTTP servlet，参数包含在查询字符串或发送的表单数据中。\r\nString getProtocol()\t\r\n// 以protocol/majorVersion.minorVersion的形式（例如HTTP/1.1）返回请求使用的协议的名称和版本。对于HTTP servlet，返回的值与CGI变量SERVER_PROTOCOL的值相同。\r\nString getScheme()\t\r\n// 返回用于发出此请求的方案的名称，例如http、https或ftp。不同方案具有不同的构造URL的规则，这一点已在RFC 1738中注明。\r\nString getServerName()\t\r\n// 返回请求被发送到的服务器的主机名。它是Host头值“:”（如果有）之前的那部分的值，或者解析的服务器名称或服务器IP地址。\r\nint\tgetServerPort()\t// 返回请求被发送到的端口号。它是Host头值“:”（如果有）之后的那部分的值，或者接受客户端连接的服务器端口。\r\nBufferedReader getReader()\t\r\n// 使用BufferedReader以字符数据形式获取请求正文。读取器根据正文上使用的字符编码转换字符数据。可调用此方法或getInputStream读取正文，而不是两种方法都调用。\r\nString getRemoteAddr()\t\r\n// 返回发送请求的客户端或最后一个代理的Internet Protocol (IP)地址。对于HTTP servlet，返回的值与CGI变量REMOTE_ADDR的值相同。\r\nString getRemoteHost()\t\r\n// 返回发送请求的客户端或最后一个代理的完全限定名称。如果引擎无法或没有选择解析主机名（为了提高性能），则此方法返回以点分隔的字符串形式的IP地址。对于HTTP servlet，返回的值与CGI变量REMOTE_HOST的值相同。\r\nvoid setAttribute(String name, Object o)\t\r\n// 存储此请求中的属性。在请求之间重置属性。此方法常常与RequestDispatcher一起使用。\r\nvoid removeAttribute(String name)\t\r\n// 从此请求中移除属性。此方法不是普遍需要的，因为属性只在处理请求期间保留。\r\nLocale getLocale()\t\r\n// 基于Accept-Language头，返回客户端将用来接受内容的首选Locale。如果客户端请求没有提供Accept-Language头，则此方法返回服务器的默认语言环境。\r\nEnumeration\tgetLocales()\t\r\n// 返回Locale对象的Enumeration，这些对象以首选语言环境开头，按递减顺序排列，指示基于Accept-Language头客户端可接受的语言环境。如果客户端请求没有提供Accept-Language头，则此方法返回包含一个Locale的Enumeration，即服务器的默认语言环境。\r\nboolean\tisSecure()\t\r\n// 返回一个boolean值，指示此请求是否是使用安全通道（比如HTTPS）发出的。\r\nRequestDispatcher getRequestDispatcher(String path)\t\r\n// 返回一个RequestDispatcher对象，它充当位于给定路径上的资源的包装器。可以使用RequestDispatcher对象将请求转发给资源，或者在响应中包含资源。资源可以是动态的，也可以是静态的。\r\nString getRealPath(String path)\t\r\n// 从Java Servlet API的版本2.1起，请改用ServletContext#getRealPath\r\nint getRemotePort()\t\r\n// 返回发送请求的客户端或最后一个代理的Internet Protocol (IP)源端口。\r\nString getLocalName()\t\r\n// 返回接收请求的Internet Protocol (IP)接口的主机名。\r\nString getLocalAddr()\t\r\n// 返回接收请求的接口的Internet Protocol (IP)地址。\r\nint getLocalPort()\t\r\n// 返回接收请求的接口的Internet Protocol (IP)端口号。\r\n```\r\n\r\n### HttpServletRequest\r\n\r\n```java\r\nCookies\tgetCookies()\t\r\n// 返回包含客户端随此请求一起发送的所有Cookie对象的数组。\r\nlong getDateHeader(String name)\t\r\n// 以表示Date对象的long值的形式返回指定请求头的值。\r\nString getHeader(String name)\t\r\n// 以String的形式返回指定请求头的值。\r\nEnumeration\tgetHeaders(String name)\t\r\n// 以String对象的Enumeration的形式返回指定请求头的所有值。\r\nEnumeration\tgetHeaderNames()\t\r\n// 返回此请求包含的所有头名称的枚举。如果该请求没有头，则此方法返回一个空枚举。\r\nint getIntHeader(String name)\t\r\n// 以int的形式返回指定请求头的值。\r\nString getMethod()\t\r\n// 返回用于发出此请求的HTTP方法的名称，例如GET、POST或PUT。返回的值与CGI变量REQUEST_METHOD的值相同。\r\nString getPathInfo()\t\r\n// 返回与客户端发出此请求时发送的URL相关联的额外路径信息。额外路径信息位于servlet路径之后但在查询字符串之前，并且将以“/”字符开头。\r\nString getPathTranslated()\t\r\n// 返回在servlet名称之后但在查询字符串之前的额外路径信息，并将它转换为实际路径。返回的值与CGI变量PATH_TRANSLATED的值相同。\r\nString getContextPath()\t\r\n// 返回请求URI指示请求上下文的那一部分。请求URI中首先出现的总是上下文路径。路径以“/”字符开头但不以“/”字符结束。对于默认（根）上下文中的servlet，此方法返回“”。容器不会解码此字符串。\r\nString getQueryString()\t\r\n// 返回包含在请求URL中路径后面的查询字符串。如果URL没有查询字符串，则此方法返回null。返回的值与CGI变量QUERY_STRING的值相同。\r\nString getRequestedSessionId()\t\r\n// 返回客户端指定的会话ID。此值可能不同于此请求的当前有效会话的ID。如果客户端没有指定会话ID，则此方法返回null。\r\nString getRequestURL()\t\r\n// 重新构造客户端用于发出请求的URL。返回的URL包含一个协议、服务器名称、端口号、服务器路径，但是不包含查询字符串参数。\r\nString getServletPath()\t\r\n// 返回此请求调用servlet的URL部分。此路径以“/”字符开头，包括servlet名称或到servlet的路径，但不包括任何额外路径信息或查询字符串。返回的值与CGI变量SCRIPT_NAME的值相同。\r\nHttpSession\tgetSession(boolean create)\t\r\n// 返回与此请求关联的当前HttpSession，如果没有当前会话并且create为true，则返回一个新会话。\r\nHttpSession\tgetSession()\t\r\n// 返回与此请求关联的当前会话，如果该请求没有会话，则创建一个会话。\r\nboolean\tisRequestedSessionIdValid()\t\r\n// 检查请求的会话ID是否仍然有效。\r\nboolean\tisRequestedSessionIdFromCookie()\t\r\n// 检查请求的会话ID是否是作为cookie进入的。\r\nboolean\tisRequestedSessionIdFromURL()\t\r\n// 检查请求的会话ID是否是作为请求URL的一部分进入的。\r\n```\r\n\r\n### 解决会话重放攻击demo\r\n\r\n```js\r\nvar random = Math.random()*1000000000000000;\r\n```\r\n```java\r\nString random = request.getParameter(\"random\");\r\nList list = (ArrayList)request.getSession().getAttribute(\"randoms\")\r\nif(list.contains(random)) {\r\n\treturn null;\r\n}\r\nlist.add(random);\r\nrequest.getSession().setAttribute(\"randoms\")\r\n```\r\n处理流程:请求带一个随机数，后台从session中取出存放这个随机数的list，判断list里面是否包含这个随机数，如果包含，证明请求被重复发送，不做处理，如果不包含，则证明是第一次请求，将随机数放进list放入session里面，之后处理业务逻辑\r\n\r\n\r\n## 前端相关\r\n\r\n### jsp获取session数据\r\n\r\n```js\r\n<%=session.getAttribute(\"name\")%>\r\nor\r\n${sessionScope.name}\r\n```\r\n\r\n### easyui combobox下拉框设置checkbox全选\r\n\r\n```js\r\nfunction initCombobox(id,data){\r\n\tvar value = \"\";\r\n\t//加载下拉框复选框\r\n\t$('#'+id).combobox({\r\n        data:data, //后台获取下拉框数据的url\r\n        method:'post',\r\n        panelHeight:200,//设置为固定高度，combobox出现竖直滚动条\r\n        valueField:'id',\r\n        textField:'text',\r\n        multiple:true,\r\n        editable:false,\r\n        formatter: function (row) { //formatter方法就是实现了在每个下拉选项前面增加checkbox框的方法\r\n            var opts = $(this).combobox('options');\r\n            var checkbox_id = row.check_id;\r\n            if(checkbox_id){\r\n            \treturn '<input type=\"checkbox\" class=\"combobox-checkbox\" id=\"' + checkbox_id +'\">' + row[opts.textField]\r\n            }\r\n            return '<input type=\"checkbox\" class=\"combobox-checkbox\">' + row[opts.textField]\r\n        },\r\n        onLoadSuccess: function () {//下拉框数据加载成功调用\r\n            var opts = $(this).combobox('options');\r\n            var target = this;\r\n            var values = $(target).combobox('getValues');//获取选中的值的values\r\n            $.map(values, function (value) {\r\n                var el = opts.finder.getEl(target, value);\r\n                el.find('input.combobox-checkbox')._propAttr('checked', true); \r\n            })\r\n        },\r\n        onSelect: function (row) { //选中一个选项时调用\r\n        \tvar opts = $(this).combobox('options');\r\n            //当点击所有时，则勾中所有的选项\r\n            if (row.text === \"全选\") {\r\n            \tvar data = $(\"#\"+id).combobox('getData');;\r\n            \tvar show_type = $(\"#show_type\").combobox('getValue');\r\n                for (var i = 0; i < data.length; i++) {\r\n                \t//获取选中的值的values\r\n                    $(\"#\"+id).val($(this).combobox('getValues'));\r\n                    // 选择全部和按照机组展示全选时才选中发电类型 机组类型 供热状态 否则不选择这三个\r\n                \tif(show_type != '6' && show_type != ''){\r\n                \t\tvar field = data[i][opts.valueField];\r\n                \t\tif(field == 'fdlx' || field == 'grqk' || field == 'unit_status'){\r\n                \t\t\tcontinue;\r\n                \t\t}\r\n                \t}\r\n        \t\t   //设置选中值所对应的复选框为选中状态\r\n                    var el = opts.finder.getEl(this, data[i][opts.valueField]);\r\n                    el.find('input.combobox-checkbox')._propAttr('checked', true);\r\n                }\r\n                var list = [];\r\n                $.map(opts.data, function (opt) {\t\r\n                \t// 选择全部和按照机组展示全选时才选中发电类型 机组类型 供热状态 否则不选择这三个\r\n                \tif(show_type != '6' && show_type != ''){\t\r\n                \t\tif(opt.id != 'fdlx' && opt.id != 'grqk' && opt.id != 'unit_status'){\r\n                \t\t\tlist.push(opt.id);\r\n                \t\t}\r\n                \t}else{\r\n                \t\tlist.push(opt.id);\r\n                \t}\r\n                    \r\n                });\r\n                $(\"#\"+id).combobox('setValues', list); // combobox全选\r\n            \r\n            } else {\r\n                //获取选中的值的values\r\n                $(\"#\"+id).val($(this).combobox('getValues'));\r\n    \t\t   //设置选中值所对应的复选框为选中状态\r\n                var el = opts.finder.getEl(this, row[opts.valueField]);\r\n                el.find('input.combobox-checkbox')._propAttr('checked', true);\r\n            }\r\n\r\n        },\r\n        onUnselect: function (row) {//不选中一个选项时调用\r\n            var opts = $(this).combobox('options');\r\n            if (row.text === \"全选\") {\r\n                var a = $(\"#\"+id).combobox('getData');\r\n                for (var i = 0; i < a.length; i++) {\r\n                \t $(\"#\"+id).val($(this).combobox('getValues'));\r\n                     var el = opts.finder.getEl(this, data[i][opts.valueField]);\r\n                     el.find('input.combobox-checkbox')._propAttr('checked', false);\r\n                }\r\n                $(\"#\"+id).combobox('clear');//清空选中项\r\n            } else {\r\n            \t //获取选中的值的values\r\n                $(\"#\"+id).val($(this).combobox('getValues'));\r\n                var el = opts.finder.getEl(this, row[opts.valueField]);\r\n                el.find('input.combobox-checkbox')._propAttr('checked', false);\r\n\r\n            }\r\n        }\r\n    });\r\n}\r\n```\r\n\r\n## 其他\r\n\r\n### 二叉树遍历\r\n\r\n前序遍历A-B-D-F-G-H-I-E-C\r\n中序遍历F-D-H-G-I-B-E-A-C\r\n后序遍历F-H-I-G-D-E-B-C-A\r\n前序(根左右)，中序(左根右)，后序(左右根)\r\n\r\n![](/images/ecs.jpg)\r\n\r\n### py import\r\n\r\n```python\r\nimport math\r\nprint math.pi\r\n# 等价于\r\nfrom math import pi\r\nprint pi\r\n```\r\n\r\n### excel查看路径和文件名\r\n```\r\n在任一单元格输入=CELL(\"filename\")即可\r\n```\r\n\r\n### windows杀掉进程\r\n\r\n```bash\r\ntaskkill /pid pid\r\n# /f 强制\r\n# /t 终止进程和他启用的子进程\r\ntaskkill /? # 查看相关用法\r\ntasklist # 查看所有进程\r\n```\r\n\r\n### cron表达式\r\n\r\n3/12 第三分钟开始,每12分钟触发\r\n12,15,17 第12分钟、15分钟、17分钟触发\r\n3-19 看使用在哪个域 如果在minute域则表示在第3分钟到第19分钟每分钟触发一次 在second域则表示从第3秒到第19秒每秒触发一次\r\n24 43 2 ? 1-12 3 * 每周三2点43分24秒触发一次\r\n","categories":[],"tags":[{"name":"代码实战","path":"api/tags/代码实战.json"},{"name":"随笔","path":"api/tags/随笔.json"}]}