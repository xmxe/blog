{"title":"我的笔记","slug":"我的笔记","date":"2022-09-29T06:09:43.618Z","updated":"2023-04-28T06:25:51.487Z","comments":true,"path":"api/articles/我的笔记.json","excerpt":null,"covers":"https://pic1.zhimg.com/v2-2a72ccd8ac9a0c889b79d9ad021ef08e_r.jpg","content":"<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p>在类被加载的时候就运行了，而且只运行一次，并且优先于各种代码块以及构造函数。如果一个类中有多个静态代码块，会按照书写顺序依次执行。静态代码块不能存在任何方法体中静态代码块不能访问普通变量</p>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><p>在创建对象时被调用，每次创建对象都会调用一次，但是优先于构造函数执行。需要注意的是，构造代码块不是优先于构造函数执行，而是依托于构造函数，也就是说，如果你不实例化对象，构造代码块是不会执行的</p>\n<h3 id=\"普通代码块\"><a href=\"#普通代码块\" class=\"headerlink\" title=\"普通代码块\"></a>普通代码块</h3><p>和构造代码块的区别是，构造代码块是在类中定义的，而普通代码块是在方法体中定义的。且普通代码块的执行顺序和书写顺序一致</p>\n<p>静态代码块&gt;构造代码块（类中定义）&gt;构造函数&gt;普通代码块(方法中定义)</p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><p>也是最普通的内部类，它是外围类的一个成员，所以他是可以无限制的访问外围类的所有成员属性和方法，尽管是private的，但是外围类要访问内部类的成员属性和方法则需要通过内部类实例来访问。<br>在成员内部类中要注意两点，第一：成员内部类中不能存在任何static的变量和方法；第二：成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">OuterClass</span> outerClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>InnerClass</span> innerClass <span class=\"token operator\">=</span> outerClass<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninnerClass<span class=\"token punctuation\">.</span><span class=\"token function\">getOuterClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><p>有这样一种内部类，它是嵌套在方法和作用域内的，对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>使用static修饰的内部类我们称之为静态内部类，不过我们更喜欢称之为嵌套内部类。静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：</p>\n<ol>\n<li>它的创建是不需要依赖于外围类的。</li>\n<li>它不能使用任何外围类的非static成员变量和方法。</li>\n<li>在静态内部类中可以存在静态成员</li>\n<li>静态内部类只能访问外围类的静态成员变量和方法，不能访问外围类的非静态成员变量和方法</li>\n<li>非静态内部类中不能存在静态成员，非静态内部类中可以调用外围类的任何成员,不管是静态的还是非静态的</li>\n<li>静态内部类可以直接创建实例不需要依赖于外围类</li>\n<li>非静态内部的创建需要依赖于外围类方位</li>\n<li>非静态内部类的成员需要使用非静态内部类的实例new</li>\n</ol>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>new父类构造器（参数列表）|实现接口（）{<br>   &#x2F;&#x2F;匿名内部类的类体部分<br>}<br>在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。</p>\n<ol>\n<li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li>\n<li>匿名内部类中是不能定义构造函数的。</li>\n<li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li>\n<li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li>\n<li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用内部类的优势\"><a href=\"#使用内部类的优势\" class=\"headerlink\" title=\"使用内部类的优势\"></a>使用内部类的优势</h3><p>封装性、实现多继承※、用匿名内部类实现回调功能、解决继承及实现接口出现同名方法的问题</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/chenssy/p/3388487.html\">详解内部类</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Is2Ka2R_PWZP3XZsUroLIg\">深入理解Java：内部类</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/u8rgIwoxnXLe8GPMrFbXpQ\">Java内部类有坑,100%内存泄露！</a></li>\n</ul>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p><strong>@Retention</strong>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）<br>取值（RetentionPoicy）有：</p>\n<ol>\n<li>SOURCE:在源文件中有效（即源文件保留）</li>\n<li>CLASS:在class文件中有效（即class保留）</li>\n<li>RUNTIME:在运行时有效（即运行时保留）</li>\n</ol>\n<p><strong>@Target</strong>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）<br>取值(ElementType)有：</p>\n<ol>\n<li>CONSTRUCTOR:用于描述构造器</li>\n<li>FIELD:用于描述域</li>\n<li>LOCAL_VARIABLE:用于描述局部变量</li>\n<li>METHOD:用于描述方法</li>\n<li>PACKAGE:用于描述包</li>\n<li>PARAMETER:用于描述参数</li>\n<li>TYPE:用于描述类、接口(包括注解类型)或enum声明</li>\n<li>ANNOTATION_TYPE:标明注解可以用于注解声明(应用于另一个注解上)</li>\n<li>TYPE_PARAMETER:表示该注解能写在类型参数的声明语句中也就是泛型上，类型参数声明如下：&lt;T&gt;，&lt; T extends Person&gt;</li>\n<li>TYPE_USE:表示注解可以在任何用到该类的地方使用</li>\n</ol>\n<p><strong>@Inherited</strong>:标记这个注解是继承于哪个注解类(默认注解并没有继承于任何子类)<br><strong>@Documented</strong>:标记这些注解是否包含在用户文档中。<br><strong>@Repeatable</strong>:重复注解,在java8中新增了一个方法getAnnotationsByType，用于获取可重复的注解,返回类型是数组</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/kx_111lekaIzkYYYAwjwxg\">你知道Java中的注解是如何工作的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247493932&amp;idx=1&amp;sn=c8e75d1f75467f240ad749853eae4668&amp;source=41#wechat_redirect\">深入理解Java：注解</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494076&amp;idx=2&amp;sn=ba12e71724444dfd8ce10297778682aa&amp;source=41#wechat_redirect\">JDK中注解的底层原来是这样实现的</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Ggw-uPBmxZ0VDyACreMNOw\">原来注解是这么实现的啊</a></li>\n</ul>\n<h2 id=\"构建工具\"><a href=\"#构建工具\" class=\"headerlink\" title=\"构建工具\"></a>构建工具</h2><h3 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h3><p><strong>常用命令</strong></p>\n<ul>\n<li><p>mvn package、install、deploy区别<br><strong>package</strong>命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库<br><strong>install</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库<br><strong>deploy</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>\n</li>\n<li><p>compile(编译 打包)<br>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath中可用，同时它们也会被打包。</p>\n</li>\n<li><p>provided(已提供 编译不打包)<br>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。</p>\n</li>\n<li><p>runtime(运行时 不编译打包)<br>runtime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已。</p>\n</li>\n<li><p>test (测试)<br>test范围依赖在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p>\n</li>\n<li><p>system (系统)<br>Maven不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个systemPath元素。注意该范围是不推荐使用的（建议尽量去从公共或定制的Maven仓库中引用依赖）</p>\n</li>\n<li><p>import(导入)<br>import仅支持在&lt;dependencyManagement&gt;中的类型依赖项上。它表示要在指定的POM&lt;dependencyManagement&gt;部分中用有效的依赖关系列表替换的依赖关系。该scope类型的依赖项实际上不会参与限制依赖项的可传递性。</p>\n</li>\n<li><p>&lt;optional&gt;标签<br>projectA依赖projectB,projectB依赖projectC时,当projectA在maven引入projectB时,如果projectB写上&lt;optional&gt;true&lt;&#x2F;optional&gt;时,则projectA不依赖projectC,即projectA可以自己选择是否依赖projectC,如果不写或者是false的时候,则projectA引入projectB时,也会引入projectC,默认&lt;optional&gt;的值为false,即子项目必须依赖.但是像引入parent继承情况时,像这样</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>joda-time<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>joda-time<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>optional选项在统一控制版本的情况下会失效</p>\n</li>\n</ul>\n<p><strong>Maven打包跳过测试的5种方法</strong></p>\n<ol>\n<li>命令行方式<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># -DskipTests=true,不执行测试用例,但编译测试用例类生成相应的class文件至target/test-classes下。</span>\nmvn package <span class=\"token parameter variable\">-DskipTests</span><span class=\"token operator\">=</span>true\n<span class=\"token comment\"># -Dmaven.test.skip=true,不执行测试用例,也不编译测试用例类。</span>\nmvn package <span class=\"token parameter variable\">-Dmaven.test.skip</span><span class=\"token operator\">=</span>true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>pom.xml<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- maven打包时跳过测试 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-surefire-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>skip</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>skip</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>IDEA图标Skip Tests。点击选中，再用LifeCycle中的打包就会跳过测试</li>\n<li>打开配置，找到Build,Exxcution,Deployment–&gt;Build Tools–&gt;Maven–&gt;Runner，在VM option中添加-Dmaven.test.skip&#x3D;true或者-DskipTests&#x3D;true，就能在打包时跳过测试。</li>\n<li>打开配置，找到Build,Exxcution,Deployment–&gt;Build Tools–&gt;Maven–&gt;Runner，在Properties中勾选Skip Test选项。</li>\n</ol>\n<p><strong>相关文章</strong></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/JD2wfLGXdujoc9DOJEZFpA\">说一个大家都知道的Spring Boot小细节</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Kt51X_VEeC_EQSw22pqB-A\">Maven(五)：resources、profiles标签的实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/dEmCRy_9CtRPtOP4DViDHw\">Maven最全教程，看了必懂，99%的人都收藏了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/vq6Id8g0IBRVM3xdPRYFbA\">如何利用Maven将代码打包成第三方公共jar包？</a></li>\n</ul>\n<h3 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h3><ul>\n<li><p>implementation，默认的scope,取代compile（已弃用）。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。</p>\n</li>\n<li><p>api,和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。</p>\n</li>\n<li><p>compileOnly和runtimeOnly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeOnly和Maven的provided比较接近。runtimeOnly取代了runtime（不建议使用）</p>\n</li>\n<li><p>testImplementation，这种依赖在测试编译时和运行时可见，类似于Maven的test作用域。</p>\n</li>\n<li><p>testCompileOnly和testRuntimeOnly，这两种类似于compileOnly和runtimeOnly，但是作用于测试编译时和运行时。</p>\n</li>\n<li><p>compileClasspath延伸compile,compileOnly,implementation。编译类路径，在编译源代码时使用。由任务使用compileJava。runtimeClasspath延伸runtimeOnly,runtime,implementation，运行时类路径包含实现的元素以及仅运行时元素。</p>\n</li>\n<li><p>annotationProcessor编译期间使用的注释处理器。</p>\n</li>\n</ul>\n<h2 id=\"String相关\"><a href=\"#String相关\" class=\"headerlink\" title=\"String相关\"></a>String相关</h2><ol>\n<li><p>String.intern()是一个Native方法，底层调用C++的StringTable::intern方法实现。当通过语句str.intern()调用intern()方法后，JVM就会在当前类的常量池中查找是否存在与str等值的String，若存在则直接返回常量池中相应Strnig的引用；若不存在，则会在常量池中创建一个等值的String，然后返回这个String在常量池中的引用,通俗的讲，是将字符串放入常量池中。是一种手动将字符串加入常量池中的方法</p>\n</li>\n<li><p>String.toUpperCase()会在内存中新建一个字符串并不会修改原来的字符串</p>\n</li>\n<li><p>String对象new出来的字符串是放在堆中，直接赋值的字符串是放在常量池中的。<br>对字符串做拼接操作，即做“+”运算，分两种情况1.表达式右边是纯字符串常量，则存放在常量池中2.表达式右边存在字符串引用，则存放在堆中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//变量形式相加底层new String()不放常量池</span>\n<span class=\"token class-name\">String</span> d <span class=\"token operator\">=</span> <span class=\"token string\">\"s\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//非变量形式相加放到常量池</span>\n<span class=\"token class-name\">String</span> e <span class=\"token operator\">=</span> <span class=\"token string\">\"sb\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//放到常量池</span>\n<span class=\"token class-name\">String</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不放常量池</span>\n<span class=\"token class-name\">String</span> g <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//手动放到常量池</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">==</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">==</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n\n<span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//计算机</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true，因为两个都是常量池中的String对</span>\n\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"str\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"ing\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"str\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ing\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//常量池中的对象</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//在堆上创建的新的对象</span>\n<span class=\"token class-name\">String</span> str5 <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//常量池中的对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str4 <span class=\"token operator\">==</span> str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\n<span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">pringln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a == b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>String字符串有长度限制，在编译期，要求字符串常量池中的常量不能超过65535，并且在javac执行过程中控制了最大值为65534。<br>在运行期，长度不能超过Int的范围，否则会抛异常。</p>\n</li>\n<li><p>common-lang3包StringUtils</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">isEmpty<span class=\"token comment\">// 如果是null或者“”则返回true。</span>\nisBlank<span class=\"token comment\">// 如果是null或者“”或者空格或者制表符则返回true。isBlank判空更加准确。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ic5K1X6DQnBN37uv9cr-mg\">java.lang.String的+号操作，这个谜终于要解开了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493885&idx=1&sn=024118e8044ce958c0602db7aba2f916&source=41#wechat_redirect\">基础面试，为什么面试官总喜欢问String？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YvHt9uKKOdYZDdipGJXQYA\">深入Java源码剖析之字符串常量</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491285&idx=1&sn=c9373feb23075bbada302740ec1a1434&source=41#wechat_redirect\">浅谈Java中字符串的初始化及字符串操作类</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/xJnQq8voJvAyyyaBkrvc8A\">5个刁钻的String面试题！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/P-ijDf5IqtAwnFzDErQOyQ\">为什么String是不可变的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fwRcDog9_EU3nCEmDF_jcw\">90%的同学都没搞清楚的Java字符串常量池问题（图文并茂）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494306&idx=1&sn=9184273c5833a9a363b4ebb85163c1a5&source=41#wechat_redirect\">Java中你以为的String其实并不完全正确</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TuGw1tDVj53hIurRfA360g\">再议String-字符串常量池与String.intern()</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AWVJIvOAMERmw7lU1th4iQ\">Java 9为何要将String的底层实现由char改成了byte?</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/iYO16IddRqAqn3D5VhURQQ\">关于Java字符串的全部，都在这份手册里了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wR-HmIn8nO2UICVmJeqgGw\">面试被问到了String相关的几道题，你能答上来吗？</a></li>\n</ul>\n<h2 id=\"try、catch、finally\"><a href=\"#try、catch、finally\" class=\"headerlink\" title=\"try、catch、finally\"></a>try、catch、finally</h2><ol>\n<li>try中的return语句先执行了但并没有立即返回，等到finally执行结束后再return</li>\n<li>finally块中的return语句会覆盖try块中的return返回</li>\n<li>如果finally语句中没有return语句覆盖返回值，那么原来的返回值可能因为finally里的修改而改变也可能不变</li>\n<li>try块里的return语句在异常的情况下不会被执行，这样具体返回哪个看情况</li>\n<li>当发生异常后，catch中的return执行情况与未发生异常时try中return的执行情况完全一样</li>\n<li>finally块的语句在try或catch中的return语句执行之后返回之前执行且finally里的修改语句可能影响也可能不影响try或catch中return已经确定的返回值，若finally里也有return语句则覆盖try或catch中的return语句直接返回。</li>\n</ol>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/0fdehvtTYz8Off52YOT8Qg\">finally是在return之前还是之后执行</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qYvMpbOXcJ77XQbK_MC8MA\">面试官太难伺候？一个try-catch问出这么多花样</a></li>\n</ul>\n<h2 id=\"几个经典问题\"><a href=\"#几个经典问题\" class=\"headerlink\" title=\"几个经典问题\"></a>几个经典问题</h2><h3 id=\"equals和hashcode的关系\"><a href=\"#equals和hashcode的关系\" class=\"headerlink\" title=\"equals和hashcode的关系\"></a>equals和hashcode的关系</h3><ol>\n<li>如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同；</li>\n<li>如果两个对象的hashCode相同，它们并不一定相同(即用equals比较返回false)</li>\n</ol>\n<h3 id=\"重写equals为什么需要重写hashcode\"><a href=\"#重写equals为什么需要重写hashcode\" class=\"headerlink\" title=\"重写equals为什么需要重写hashcode\"></a>重写equals为什么需要重写hashcode</h3><p>比较对象先比较hashcode，hashcode相同在比较equals。如果equals为true而hashcode不同的话就会造成hashmap的key可能会重复，因为jdk判断hashmap的key是否为重复首先判断hashcode是否一致，不一致的话直接判定不是同一个对象，而equals则判定对象为一个对象违背了hashmap的设计原则，重写hashCode方法，是为了在一些算法中避免我们不想要的冲突和碰撞</p>\n<h3 id=\"Java为什么不支持多重继承\"><a href=\"#Java为什么不支持多重继承\" class=\"headerlink\" title=\"Java为什么不支持多重继承\"></a>Java为什么不支持多重继承</h3><p>有两个类B和C继承自A；假设B和C都继承了A的方法并且进行了覆盖，编写了自己的实现；假设D通过多重继承继承了B和C，那么D应该继承B和C的重载方法，那么它应该继承的是B的还是C的？这就陷入了矛盾，所以Java不允许多重继承。</p>\n<h3 id=\"Java8中的接口和抽象类到底还有啥区别？\"><a href=\"#Java8中的接口和抽象类到底还有啥区别？\" class=\"headerlink\" title=\"Java8中的接口和抽象类到底还有啥区别？\"></a>Java8中的接口和抽象类到底还有啥区别？</h3><p>既然接口都能写默认方法了，那么还要抽象类干嘛呢？<br>区别1：首先抽象类是一个“类”，而接口只是一个“接口”，两者的概念和应用场景不一样，这也是抽象类和接口的主要区别。<br>区别2：即使在Java8中接口也能写实现方法了，但却不能写构造方法，而在抽象类是可以写构造方法的，意味着抽象类是参与类的实例化过程的，而接口则不是。抽象类不可以new<br>区别3：抽象类可以有自己的各种成员变量，并且可以通过自己的非抽象方法进行改变，而接口中的变量默认全是public static final修饰的，意味着都是常量，并且不能被自己和外部修改。<br>区别4：接口可以实现多继承，而抽象类只能单继承</p>\n<h3 id=\"Comparable和Comparator区别\"><a href=\"#Comparable和Comparator区别\" class=\"headerlink\" title=\"Comparable和Comparator区别\"></a>Comparable和Comparator区别</h3><p>一个类实现了Comparable接口，意味着该类的对象可以直接进行比较（排序），但比较（排序）的方式只有一种，很单一。<br>一个类如果想要保持原样，又需要进行不同方式的比较（排序），就可以定制比较器（实现Comparator接口）。<br>Comparable接口在java.lang包下，而Comparator接口在java.util包下<br>如果对象的排序需要基于自然顺序，请选择Comparable，如果需要按照对象的不同属性进行排序，请选择Comparator</p>\n<h3 id=\"过滤器和拦截器的区别\"><a href=\"#过滤器和拦截器的区别\" class=\"headerlink\" title=\"过滤器和拦截器的区别\"></a>过滤器和拦截器的区别</h3><ol>\n<li>Filter需要在web.xml中配置，依赖于Servlet；</li>\n<li>Interceptor需要在SpringMVC中配置，依赖于框架；</li>\n<li>Filter的执行顺序在Interceptor之前</li>\n<li>两者的本质区别：拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter能做的事情，都能做，而且可以在请求前，请求后执行，比较灵活。<br>Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），<br>太细的话，还是建议用interceptor。不过还是根据不同情况选择合适的。</li>\n<li>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。</li>\n<li>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。init(),destroy()各一次，dofilter()多次</li>\n<li>拦截的请求范围不同,过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。</li>\n<li>触发时机不同，过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。拦截器Interceptor是在请求进入servlet后，在进入Controller之前进行预处理的，Controller中渲染了对应的视图之后请求结束。</li>\n</ol>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/69060111?utm_source=wechat_timeline&amp;utm_medium=social&amp;utm_oi=1040923520439672832&amp;from=timeline\">过滤器、监听器、拦截器的区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PzQlCjLLM1fjPc0y4poQOw\">一口气说出过滤器和拦截器6个区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kZx10tnBJ8a6xtDgQsN1vQ\">SpringBoot过滤器、拦截器、监听器对比及使用场景</a></li>\n</ul>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>List&lt;? extends Object&gt;相当于List&lt;?&gt;<br>在Java集合框架中，对于参数值是未知类型的容器类，只能读取其中元素，不能向其中添加元素,因为，其类型是未知，所以编译器无法识别添加元素的类型和容器的类型是否兼容，唯一的例外是NULL<br>List&lt;? extends T&gt;可以添加元素添加的元素为T或T的子类<br>List&lt;? super T&gt;可以添加元素添加的元素为T或T的父类</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ilqFpf5kE0XzJnOv9SsX7Q\">为了让你理解Java泛型，费了好大心思</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/5dWCpdyXNP5PeCZM8AQVAg\">泛型中的T、E、K、V，还记得嘛？</a></li>\n</ul>\n<h2 id=\"CSRF和XSS的区别\"><a href=\"#CSRF和XSS的区别\" class=\"headerlink\" title=\"CSRF和XSS的区别\"></a>CSRF和XSS的区别</h2><ol>\n<li>CSRF是跨站请求伪造;XSS是跨域脚本攻击。</li>\n<li>CSRF需要用户先登录网站A,获取cookie;XSS不需要登录。</li>\n<li>CSRF是利用网站A本身的漏洞,去请求网站A的api;XSS是向网站A注入JS代码,然后执行JS里的代码,篡改网站A的内容。（XSS利用的是站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。你可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求。）</li>\n</ol>\n<h2 id=\"web-xml详解\"><a href=\"#web-xml详解\" class=\"headerlink\" title=\"web.xml详解\"></a>web.xml详解</h2><p>**&lt;context-param\\&gt;**元素含有一对参数名和参数值，用作应用的Servlet上下文初始化参数，参数名在整个Web应用中必须是惟一的，在web应用的整个生命周期中上下文初始化参数都存在，任意的Servlet和jsp都可以随时随地访问它。在JSP网页中可以使用下列方法来取得：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">&#123;</span>initParam<span class=\"token punctuation\">.</span>param_name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>若在Servlet可以使用下列方法来获得：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> param_name<span class=\"token operator\">=</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitParamter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Servlet的ServletConfig对象拥有该Servlet的ServletContext的一个引用，所以可这样取得上下文初始化参数：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以在Servlet中直接调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>两者是等价的。</p>\n<p>**&lt;listener\\&gt;**为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：</p>\n<ol>\n<li>ServletContextListener：用于监听Web应用的启动和关闭；</li>\n<li>ServletContextAttributeListener：用于监听ServletContext范围（application）内属性的改变；</li>\n<li>ServletRequestListener：用于监听用户的请求；</li>\n<li>ServletRequestAttributeListener：用于监听ServletRequest范围（request）内属性的改变；</li>\n<li>HttpSessionListener：用于监听用户session的开始和结束；</li>\n<li>HttpSessionAttributeListener：用于监听HttpSession范围（session）内属性的改变</li>\n</ol>\n<p><strong>&lt;load-on-startup\\&gt;1&lt;&#x2F;load-on-startup\\&gt;</strong><br>load-on-startup元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)。它的值必须是一个整数，表示servlet被加载的先后顺序。如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载创建Servlet实例有两个时机较小的优先加载</p>\n<h2 id=\"解决跨域的几种方案\"><a href=\"#解决跨域的几种方案\" class=\"headerlink\" title=\"解决跨域的几种方案\"></a>解决跨域的几种方案</h2><p>服务器没有同源策略，浏览器的同源策略是为了保证浏览器的安全性，实际上跨域请求会将请求发送到服务器，只不过在返回数据的时候浏览器发出跨域警告</p>\n<ol>\n<li>JSONP</li>\n<li>CORS<br>服务器中编写过滤器允许跨域访问<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HttpServletResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//该字段必填。它的值要么是请求时Origin字段的具体值，要么是一个*，表示接受任意域名的请求</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//该字段必填。它的值是逗号分隔的一个具体的字符串(GET,POST...)或者*，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//该字段可选，用来指定本次预检请求的有效期，单位为秒。在有效期间，不用发出另一条预检请求。</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Max-Age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3600\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Origin,X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Credentials\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-cache, must-revalidate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>httpResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>反向代理工具如nginx</li>\n<li>服务器没有同源策略，使用HTTPClient等技术</li>\n<li>控制器添加@CrossOrigin注解</li>\n</ol>\n<h2 id=\"收藏文章\"><a href=\"#收藏文章\" class=\"headerlink\" title=\"收藏文章\"></a>收藏文章</h2><p>Java</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491305&idx=2&sn=c8b3f2d88d16aa3ebb9f5b674dce0a55&source=41#wechat_redirect\">java关键字名单</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qvKunFJfDuBesjJUIsJdXg\">Class.forName和ClassLoader到底有啥区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/GOSoJrArIQrctiP3ArG6lA\">说说Java深拷贝和浅拷贝区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/SQB4ZteKe7-fHFzL__6cSQ\">面试难缠的深拷贝浅拷贝，这次终于通透了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/GSzbiVge-aoDHxYCzCTALw\">零拷贝技术在Java中为何这么牛</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/R7JyIRnRYEEMNKZG-aEoMw\">天天都会写接口，但它的用途和好处有多少人能说得清楚？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NN3Zy1RGpwWUIgaatAJ4HQ\">Java中的接口还可以这样用，你知道吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Fap6REHGxmnaHOPwp94iRA\">10大Java面试难题，打趴无数面试者！</a>※</li>\n<li><a href=\"https://mp.weixin.qq.com/s/efM15hYwgowrprWWNgbYjg\">知名互联网公司Java开发岗面试知识点解析</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kbvWCme1T-_3_MaIvgH66g\">社招后端20问！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/3cqRu-STSX7aL_3kRQffTQ\">Java面试题全梳理</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UZld1hKUgeBrYFrhQ_wjMQ\">oppo面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/aj-WmrJsWnH2Utsbhurnbg\">扪心自问！一百多道难搞的面试题，你能答对了多少</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ZbP8kBTKpnxKsogZyQL1nw\">B站面试经历</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_JsVu1Vcj8kCl1gZc8tNXg\">Java基础夺命连环16问</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/-v3PCoVInPYpkhnO9y3SNQ\">15个常见的Node.js面试问题及答案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OY6oO-1dSxc9Flseal22zw\">30道计网常考面试题含答案总结！血赚！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PlBwyJ4wpDeZ7J-PKw3sgA\">2W字！梳理50道经典计算机网络面试题（收藏版）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6KhtiAdDOljqQ4bzc7pSnw\">蚂蚁金服一面：十道经典面试题解析</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/t92OtlMD_dwk1ldCVNvHBA\">Java中经常被提到的SPI到底是什么</a></li>\n</ul>\n<p>分布式</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/8L713J4zzv_PfDtfdR5CRA\">Java分布式面试题集合</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TnFsKK77uyfXkckt4m1Ctw\">分布式十二问！万字图文详解！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/e1xvvdx8oOs8ykIMgSKiuw\">面试官：谈谈分布式一致性机制，我一脸懵逼。。</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/tLfJdZ4BxlXY_wiV6-Hx8w\">面试绕不开的CAP理论，这篇文章帮你搞定！</a></li>\n</ul>\n<p>其他</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/g6bCfbyJ0NrtSAwN3Xooqw\">如何写出让CPU跑得更快的代码</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Ek3gWfzrmWrRz8ypL76UTA\">程序在计算机中是如何运行起来的</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/3dF8cy9LWh5A0oGWL2p35g\">了解这些软件设计思想，你的思维至少上升一个段位</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/emU6QyhRFXaBlkj9jerOMg\">微信支付、支付宝最全接入指引，看完立刻就可以上手</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AB1GN6UAsHW_nvctH_tuRQ\">如何防止你的jar被反编译</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2FR4lmNdGmLP4qnD2F0Krw\">PageHelper使用中的一些坑</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/bt5Df-sY3QETgvGp3Kp8Yw\">一文参透分布式存储系统Ceph的架构设计、集群搭建</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/RnR3OyNA8PSz9CrCMP48kw\">电商系统架构，常见的9个大坑</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/4Yr0J5MPvUQmDTseoJAILQ\">给定一个接口，要用户自定义动态实现并上传热部署</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/q5p0v2R_FeYq2HwlrqL_xA\">说说布隆过滤器与布谷鸟过滤器及应用场景</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/CsUIu48Yyqr0yiir4Xq4XA\">我们为什么要放弃RESTful，选择拥抱GraphQL</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/m2e8dgW0NLgB9jzYd7nS2A\">轻松实现word、excel、ppt、txt等办公文件在线预览功能</a></li>\n</ul>\n<p>下载</p>\n<ul>\n<li><a href=\"https://dlcdn.apache.org/\">apache旗下安装包</a></li>\n<li><a href=\"http://vault.centos.org/\">centos rpm包（cat &#x2F;etc&#x2F;centos-release）</a></li>\n<li><a href=\"https://www.allroundautomations.com/registered-plsqldev/\">PLSQL历史版本下载</a></li>\n<li><a href=\"https://www.newxitong.com/\">onekey ghpst+win7 ghost</a></li>\n<li><a href=\"https://www.google.cn/chrome/\">Chrome</a></li>\n</ul>\n<p>工具</p>\n<ul>\n<li><a href=\"https://developer.aliyun.com/topic/ebook\">阿里云开发者藏经阁</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ccRwb3SJBQl3Fhq8pDzl_A\">Postman详细用法示例</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YTacVjCl90CKcn8tIhM7bQ\">简单的Postman，还能玩出花</a></li>\n<li><a href=\"https://easypdf.com/cn\">pdf在线转换器(easypdf.com)</a></li>\n<li><a href=\"https://lightpdf.com/zh/\">pdf工具（在线签名、转换等）</a></li>\n<li><a href=\"https://blog.csdn.net/Tomorrow_Yesterday/article/details/84605297\">Linux端口转发</a></li>\n<li><a href=\"https://tool.oschina.net/\">开源中国工具</a></li>\n<li><a href=\"https://tool.browser.qq.com/\">QQ浏览器工具箱</a></li>\n<li><a href=\"https://www.amcharts.com/docs/v3/reference/\">amCharts3官方文档</a></li>\n<li><a href=\"https://www.cnblogs.com/landeanfen/p/4993979.html\">表格组件神器：bootstrap table</a></li>\n<li><a href=\"http://api.map.baidu.com/lbsapi/creatmap/index.html\">创建地图-百度地图生成器</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Dz3Z1S6vIkBksPfVyq7ehQ\">面向程序员的精品开源字体</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/XsBqQwZBUHfwBJBLgd2NTw\">idea使用的30个小技巧</a></li>\n</ul>\n<p>排序算法</p>\n<blockquote>\n<p><a href=\"https://github.com/xmxe/demo/tree/master/study-demo/src/main/java/com/xmxe/study_demo/algorithm/sort\">Java实现的排序算法</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/teOGQlslb6aP4AQrx7TTzA\">漫画：“排序算法”大总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hQkdAMICGU2Akonl0upbag\">因为排序不明白，被面试官锤了一顿</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/8iXAupQIdbRrcsFDuKwgHA\">史上最好的排序和数据结构入门</a></li>\n</ul>\n<p>堆</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/Wy-DgsZZAeZmI19ZskERRg\">一文告诉你Java集合中「堆」的最佳打开方式</a></li>\n</ul>\n<p>链表</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/oyXrWMfOBRBClbCg1j9TyQ\">一口气搞懂「链表」，就靠这20+张图了</a></li>\n</ul>\n<p>栈</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/E3WDAksQV3qjS_O8ittfBA\">面试官问我什么是「栈」，我随手画了10张图来解释</a></li>\n</ul>\n<p>哈希</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/AgkHMhITtOTf9y3jrrxsfQ\">不能错过！简单易懂的哈希表总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3Mzc0NjUzMQ==&mid=2247497071&idx=1&sn=3a67993e5e4634ddf0880e6c02a10d4e&source=41#wechat_redirect\">学生物的女朋友都能看懂的哈希表总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YA5Pj6GTMFw0nrIOseMyRg\">如果世界上只有一种数据结构，我选择哈希！</a></li>\n</ul>\n<p>算法复杂度</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/HgsQUAGWG5GOs288thM8QA\">复杂度O、Θ、Ω、o、ω，别再傻傻分不清了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/z_pSFJPaEdPsWtV9o-4tUQ\">看完这篇，还不清楚时间复杂度的，请来怼我</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/9ZFC_vlMa0bhrXhgvWx9pw\">面试时候说的复杂度都是什么？</a></li>\n</ul>\n<p>二叉树</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/Tbx-VZxca8Z2U8VpXl6GoA\">漫画：什么是平衡二叉树？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/T4ObPeuFzdAbkW3R5q_vLA\">不怕面试被问了！二叉树算法大盘点</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491062&idx=1&sn=3baf32b14a438ea29273add1bbae134e&source=41#wechat_redirect\">看懂这篇文章，玩转二叉查找树</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/38j1f-UR1uakiav5sPoCIw\">一文弄懂二叉树三种遍历</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QEM6Arxny0HaUasGRoSxQw\">一文高效图解二叉树面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491085&idx=2&sn=ad6b30d8feb980354f5131d21f3c34b8&source=41#wechat_redirect\">3分钟看完关于树的故事</a></li>\n</ul>\n<p>红黑树</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/X3zYwQXxq93P_XUzFmKluQ\">漫画：什么是红黑树?</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/uTkORM6bQeUT2XDHHmOc4A\">一口气写出了7k字的红黑树总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MSB-vFGqNWB26kPydBJQmQ\">漫画算法：5分钟搞明白红黑树到底是什么</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UjP3pHXWnlIf68cplj2RRw\">用超强动静图详解红黑树，简单易懂</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491027&idx=1&sn=70566688d09508c7355cfef38b1453a5&source=41#wechat_redirect\">红黑树是怎么实现的，看这篇真的就够了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/9s6c1sPN7avqwxZC7BsVUQ\">什么是红黑树？看完这篇你就明白了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Xim1IUQmGT8hKelYZwUdLA\">图文详解红黑树，还有谁不会</a></li>\n</ul>\n<p>Tomcat</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/b3MP9eTvfEdEKw-fL2jeTw\">面试官:Tomcat的生命周期是什么样子的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/3i8uRr-4EOpFizie2hmogA\">超详细的Tomcat性能监控及调优教程</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494066&idx=2&sn=14302c80a7c6e6480dd7553a5579ce06&source=41#wechat_redirect\">Tomcat配置文件server.xml你有深入了解过没？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/GR7iB5esMEczn687mwwc5Q\">一文拆解Tomcat高并发原理与性能调优</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jmqqLbbOt3D--wksCigAOw\">Tomcat调优和JVM参数优化</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/U49ZIWYRvIYYFkL-06aSXA\">牛逼！硬核图解Tomcat整体架构</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494316&idx=1&sn=fb6eb1b78ed195a977bdfbe92a7cc6f4&source=41#wechat_redirect\">Tomcat深入理解</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Miw5K0OyE4oytn4U65Hn5g\">Tomcat请求处理流程</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UilzaN7jQEza7wiwzw4bsg\">Tomcat有哪些组成部分？讲讲工作原理？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/RpMXgOi8WsMm19S4YOh1aw\">教你用Java写一个自己的Tomcat容器，涨姿势了</a></li>\n</ul>\n","more":"<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p>在类被加载的时候就运行了，而且只运行一次，并且优先于各种代码块以及构造函数。如果一个类中有多个静态代码块，会按照书写顺序依次执行。静态代码块不能存在任何方法体中静态代码块不能访问普通变量</p>\n<h3 id=\"构造代码块\"><a href=\"#构造代码块\" class=\"headerlink\" title=\"构造代码块\"></a>构造代码块</h3><p>在创建对象时被调用，每次创建对象都会调用一次，但是优先于构造函数执行。需要注意的是，构造代码块不是优先于构造函数执行，而是依托于构造函数，也就是说，如果你不实例化对象，构造代码块是不会执行的</p>\n<h3 id=\"普通代码块\"><a href=\"#普通代码块\" class=\"headerlink\" title=\"普通代码块\"></a>普通代码块</h3><p>和构造代码块的区别是，构造代码块是在类中定义的，而普通代码块是在方法体中定义的。且普通代码块的执行顺序和书写顺序一致</p>\n<p>静态代码块&gt;构造代码块（类中定义）&gt;构造函数&gt;普通代码块(方法中定义)</p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><p>也是最普通的内部类，它是外围类的一个成员，所以他是可以无限制的访问外围类的所有成员属性和方法，尽管是private的，但是外围类要访问内部类的成员属性和方法则需要通过内部类实例来访问。<br>在成员内部类中要注意两点，第一：成员内部类中不能存在任何static的变量和方法；第二：成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">OuterClass</span> outerClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>InnerClass</span> innerClass <span class=\"token operator\">=</span> outerClass<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninnerClass<span class=\"token punctuation\">.</span><span class=\"token function\">getOuterClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><p>有这样一种内部类，它是嵌套在方法和作用域内的，对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>使用static修饰的内部类我们称之为静态内部类，不过我们更喜欢称之为嵌套内部类。静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：</p>\n<ol>\n<li>它的创建是不需要依赖于外围类的。</li>\n<li>它不能使用任何外围类的非static成员变量和方法。</li>\n<li>在静态内部类中可以存在静态成员</li>\n<li>静态内部类只能访问外围类的静态成员变量和方法，不能访问外围类的非静态成员变量和方法</li>\n<li>非静态内部类中不能存在静态成员，非静态内部类中可以调用外围类的任何成员,不管是静态的还是非静态的</li>\n<li>静态内部类可以直接创建实例不需要依赖于外围类</li>\n<li>非静态内部的创建需要依赖于外围类方位</li>\n<li>非静态内部类的成员需要使用非静态内部类的实例new</li>\n</ol>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>new父类构造器（参数列表）|实现接口（）{<br>   &#x2F;&#x2F;匿名内部类的类体部分<br>}<br>在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。</p>\n<ol>\n<li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li>\n<li>匿名内部类中是不能定义构造函数的。</li>\n<li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li>\n<li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li>\n<li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用内部类的优势\"><a href=\"#使用内部类的优势\" class=\"headerlink\" title=\"使用内部类的优势\"></a>使用内部类的优势</h3><p>封装性、实现多继承※、用匿名内部类实现回调功能、解决继承及实现接口出现同名方法的问题</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/chenssy/p/3388487.html\">详解内部类</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Is2Ka2R_PWZP3XZsUroLIg\">深入理解Java：内部类</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/u8rgIwoxnXLe8GPMrFbXpQ\">Java内部类有坑,100%内存泄露！</a></li>\n</ul>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p><strong>@Retention</strong>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）<br>取值（RetentionPoicy）有：</p>\n<ol>\n<li>SOURCE:在源文件中有效（即源文件保留）</li>\n<li>CLASS:在class文件中有效（即class保留）</li>\n<li>RUNTIME:在运行时有效（即运行时保留）</li>\n</ol>\n<p><strong>@Target</strong>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）<br>取值(ElementType)有：</p>\n<ol>\n<li>CONSTRUCTOR:用于描述构造器</li>\n<li>FIELD:用于描述域</li>\n<li>LOCAL_VARIABLE:用于描述局部变量</li>\n<li>METHOD:用于描述方法</li>\n<li>PACKAGE:用于描述包</li>\n<li>PARAMETER:用于描述参数</li>\n<li>TYPE:用于描述类、接口(包括注解类型)或enum声明</li>\n<li>ANNOTATION_TYPE:标明注解可以用于注解声明(应用于另一个注解上)</li>\n<li>TYPE_PARAMETER:表示该注解能写在类型参数的声明语句中也就是泛型上，类型参数声明如下：&lt;T&gt;，&lt; T extends Person&gt;</li>\n<li>TYPE_USE:表示注解可以在任何用到该类的地方使用</li>\n</ol>\n<p><strong>@Inherited</strong>:标记这个注解是继承于哪个注解类(默认注解并没有继承于任何子类)<br><strong>@Documented</strong>:标记这些注解是否包含在用户文档中。<br><strong>@Repeatable</strong>:重复注解,在java8中新增了一个方法getAnnotationsByType，用于获取可重复的注解,返回类型是数组</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/kx_111lekaIzkYYYAwjwxg\">你知道Java中的注解是如何工作的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247493932&amp;idx=1&amp;sn=c8e75d1f75467f240ad749853eae4668&amp;source=41#wechat_redirect\">深入理解Java：注解</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494076&amp;idx=2&amp;sn=ba12e71724444dfd8ce10297778682aa&amp;source=41#wechat_redirect\">JDK中注解的底层原来是这样实现的</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Ggw-uPBmxZ0VDyACreMNOw\">原来注解是这么实现的啊</a></li>\n</ul>\n<h2 id=\"构建工具\"><a href=\"#构建工具\" class=\"headerlink\" title=\"构建工具\"></a>构建工具</h2><h3 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h3><p><strong>常用命令</strong></p>\n<ul>\n<li><p>mvn package、install、deploy区别<br><strong>package</strong>命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库<br><strong>install</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库<br><strong>deploy</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>\n</li>\n<li><p>compile(编译 打包)<br>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath中可用，同时它们也会被打包。</p>\n</li>\n<li><p>provided(已提供 编译不打包)<br>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。</p>\n</li>\n<li><p>runtime(运行时 不编译打包)<br>runtime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已。</p>\n</li>\n<li><p>test (测试)<br>test范围依赖在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p>\n</li>\n<li><p>system (系统)<br>Maven不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个systemPath元素。注意该范围是不推荐使用的（建议尽量去从公共或定制的Maven仓库中引用依赖）</p>\n</li>\n<li><p>import(导入)<br>import仅支持在&lt;dependencyManagement&gt;中的类型依赖项上。它表示要在指定的POM&lt;dependencyManagement&gt;部分中用有效的依赖关系列表替换的依赖关系。该scope类型的依赖项实际上不会参与限制依赖项的可传递性。</p>\n</li>\n<li><p>&lt;optional&gt;标签<br>projectA依赖projectB,projectB依赖projectC时,当projectA在maven引入projectB时,如果projectB写上&lt;optional&gt;true&lt;&#x2F;optional&gt;时,则projectA不依赖projectC,即projectA可以自己选择是否依赖projectC,如果不写或者是false的时候,则projectA引入projectB时,也会引入projectC,默认&lt;optional&gt;的值为false,即子项目必须依赖.但是像引入parent继承情况时,像这样</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>joda-time<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>joda-time<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>optional选项在统一控制版本的情况下会失效</p>\n</li>\n</ul>\n<p><strong>Maven打包跳过测试的5种方法</strong></p>\n<ol>\n<li>命令行方式<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># -DskipTests=true,不执行测试用例,但编译测试用例类生成相应的class文件至target/test-classes下。</span>\nmvn package <span class=\"token parameter variable\">-DskipTests</span><span class=\"token operator\">=</span>true\n<span class=\"token comment\"># -Dmaven.test.skip=true,不执行测试用例,也不编译测试用例类。</span>\nmvn package <span class=\"token parameter variable\">-Dmaven.test.skip</span><span class=\"token operator\">=</span>true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>pom.xml<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- maven打包时跳过测试 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-surefire-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>skip</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>skip</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>IDEA图标Skip Tests。点击选中，再用LifeCycle中的打包就会跳过测试</li>\n<li>打开配置，找到Build,Exxcution,Deployment–&gt;Build Tools–&gt;Maven–&gt;Runner，在VM option中添加-Dmaven.test.skip&#x3D;true或者-DskipTests&#x3D;true，就能在打包时跳过测试。</li>\n<li>打开配置，找到Build,Exxcution,Deployment–&gt;Build Tools–&gt;Maven–&gt;Runner，在Properties中勾选Skip Test选项。</li>\n</ol>\n<p><strong>相关文章</strong></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/JD2wfLGXdujoc9DOJEZFpA\">说一个大家都知道的Spring Boot小细节</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Kt51X_VEeC_EQSw22pqB-A\">Maven(五)：resources、profiles标签的实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/dEmCRy_9CtRPtOP4DViDHw\">Maven最全教程，看了必懂，99%的人都收藏了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/vq6Id8g0IBRVM3xdPRYFbA\">如何利用Maven将代码打包成第三方公共jar包？</a></li>\n</ul>\n<h3 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h3><ul>\n<li><p>implementation，默认的scope,取代compile（已弃用）。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。</p>\n</li>\n<li><p>api,和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。</p>\n</li>\n<li><p>compileOnly和runtimeOnly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeOnly和Maven的provided比较接近。runtimeOnly取代了runtime（不建议使用）</p>\n</li>\n<li><p>testImplementation，这种依赖在测试编译时和运行时可见，类似于Maven的test作用域。</p>\n</li>\n<li><p>testCompileOnly和testRuntimeOnly，这两种类似于compileOnly和runtimeOnly，但是作用于测试编译时和运行时。</p>\n</li>\n<li><p>compileClasspath延伸compile,compileOnly,implementation。编译类路径，在编译源代码时使用。由任务使用compileJava。runtimeClasspath延伸runtimeOnly,runtime,implementation，运行时类路径包含实现的元素以及仅运行时元素。</p>\n</li>\n<li><p>annotationProcessor编译期间使用的注释处理器。</p>\n</li>\n</ul>\n<h2 id=\"String相关\"><a href=\"#String相关\" class=\"headerlink\" title=\"String相关\"></a>String相关</h2><ol>\n<li><p>String.intern()是一个Native方法，底层调用C++的StringTable::intern方法实现。当通过语句str.intern()调用intern()方法后，JVM就会在当前类的常量池中查找是否存在与str等值的String，若存在则直接返回常量池中相应Strnig的引用；若不存在，则会在常量池中创建一个等值的String，然后返回这个String在常量池中的引用,通俗的讲，是将字符串放入常量池中。是一种手动将字符串加入常量池中的方法</p>\n</li>\n<li><p>String.toUpperCase()会在内存中新建一个字符串并不会修改原来的字符串</p>\n</li>\n<li><p>String对象new出来的字符串是放在堆中，直接赋值的字符串是放在常量池中的。<br>对字符串做拼接操作，即做“+”运算，分两种情况1.表达式右边是纯字符串常量，则存放在常量池中2.表达式右边存在字符串引用，则存放在堆中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> c <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//变量形式相加底层new String()不放常量池</span>\n<span class=\"token class-name\">String</span> d <span class=\"token operator\">=</span> <span class=\"token string\">\"s\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//非变量形式相加放到常量池</span>\n<span class=\"token class-name\">String</span> e <span class=\"token operator\">=</span> <span class=\"token string\">\"sb\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//放到常量池</span>\n<span class=\"token class-name\">String</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不放常量池</span>\n<span class=\"token class-name\">String</span> g <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//手动放到常量池</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">==</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">==</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n\n<span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token string\">\"计算机\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//计算机</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true，因为两个都是常量池中的String对</span>\n\n<span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"str\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"ing\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"str\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ing\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//常量池中的对象</span>\n<span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//在堆上创建的新的对象</span>\n<span class=\"token class-name\">String</span> str5 <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//常量池中的对象</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str4 <span class=\"token operator\">==</span> str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\n<span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">pringln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a == b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>String字符串有长度限制，在编译期，要求字符串常量池中的常量不能超过65535，并且在javac执行过程中控制了最大值为65534。<br>在运行期，长度不能超过Int的范围，否则会抛异常。</p>\n</li>\n<li><p>common-lang3包StringUtils</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">isEmpty<span class=\"token comment\">// 如果是null或者“”则返回true。</span>\nisBlank<span class=\"token comment\">// 如果是null或者“”或者空格或者制表符则返回true。isBlank判空更加准确。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ic5K1X6DQnBN37uv9cr-mg\">java.lang.String的+号操作，这个谜终于要解开了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493885&idx=1&sn=024118e8044ce958c0602db7aba2f916&source=41#wechat_redirect\">基础面试，为什么面试官总喜欢问String？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YvHt9uKKOdYZDdipGJXQYA\">深入Java源码剖析之字符串常量</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491285&idx=1&sn=c9373feb23075bbada302740ec1a1434&source=41#wechat_redirect\">浅谈Java中字符串的初始化及字符串操作类</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/xJnQq8voJvAyyyaBkrvc8A\">5个刁钻的String面试题！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/P-ijDf5IqtAwnFzDErQOyQ\">为什么String是不可变的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fwRcDog9_EU3nCEmDF_jcw\">90%的同学都没搞清楚的Java字符串常量池问题（图文并茂）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494306&idx=1&sn=9184273c5833a9a363b4ebb85163c1a5&source=41#wechat_redirect\">Java中你以为的String其实并不完全正确</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TuGw1tDVj53hIurRfA360g\">再议String-字符串常量池与String.intern()</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AWVJIvOAMERmw7lU1th4iQ\">Java 9为何要将String的底层实现由char改成了byte?</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/iYO16IddRqAqn3D5VhURQQ\">关于Java字符串的全部，都在这份手册里了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wR-HmIn8nO2UICVmJeqgGw\">面试被问到了String相关的几道题，你能答上来吗？</a></li>\n</ul>\n<h2 id=\"try、catch、finally\"><a href=\"#try、catch、finally\" class=\"headerlink\" title=\"try、catch、finally\"></a>try、catch、finally</h2><ol>\n<li>try中的return语句先执行了但并没有立即返回，等到finally执行结束后再return</li>\n<li>finally块中的return语句会覆盖try块中的return返回</li>\n<li>如果finally语句中没有return语句覆盖返回值，那么原来的返回值可能因为finally里的修改而改变也可能不变</li>\n<li>try块里的return语句在异常的情况下不会被执行，这样具体返回哪个看情况</li>\n<li>当发生异常后，catch中的return执行情况与未发生异常时try中return的执行情况完全一样</li>\n<li>finally块的语句在try或catch中的return语句执行之后返回之前执行且finally里的修改语句可能影响也可能不影响try或catch中return已经确定的返回值，若finally里也有return语句则覆盖try或catch中的return语句直接返回。</li>\n</ol>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/0fdehvtTYz8Off52YOT8Qg\">finally是在return之前还是之后执行</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qYvMpbOXcJ77XQbK_MC8MA\">面试官太难伺候？一个try-catch问出这么多花样</a></li>\n</ul>\n<h2 id=\"几个经典问题\"><a href=\"#几个经典问题\" class=\"headerlink\" title=\"几个经典问题\"></a>几个经典问题</h2><h3 id=\"equals和hashcode的关系\"><a href=\"#equals和hashcode的关系\" class=\"headerlink\" title=\"equals和hashcode的关系\"></a>equals和hashcode的关系</h3><ol>\n<li>如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同；</li>\n<li>如果两个对象的hashCode相同，它们并不一定相同(即用equals比较返回false)</li>\n</ol>\n<h3 id=\"重写equals为什么需要重写hashcode\"><a href=\"#重写equals为什么需要重写hashcode\" class=\"headerlink\" title=\"重写equals为什么需要重写hashcode\"></a>重写equals为什么需要重写hashcode</h3><p>比较对象先比较hashcode，hashcode相同在比较equals。如果equals为true而hashcode不同的话就会造成hashmap的key可能会重复，因为jdk判断hashmap的key是否为重复首先判断hashcode是否一致，不一致的话直接判定不是同一个对象，而equals则判定对象为一个对象违背了hashmap的设计原则，重写hashCode方法，是为了在一些算法中避免我们不想要的冲突和碰撞</p>\n<h3 id=\"Java为什么不支持多重继承\"><a href=\"#Java为什么不支持多重继承\" class=\"headerlink\" title=\"Java为什么不支持多重继承\"></a>Java为什么不支持多重继承</h3><p>有两个类B和C继承自A；假设B和C都继承了A的方法并且进行了覆盖，编写了自己的实现；假设D通过多重继承继承了B和C，那么D应该继承B和C的重载方法，那么它应该继承的是B的还是C的？这就陷入了矛盾，所以Java不允许多重继承。</p>\n<h3 id=\"Java8中的接口和抽象类到底还有啥区别？\"><a href=\"#Java8中的接口和抽象类到底还有啥区别？\" class=\"headerlink\" title=\"Java8中的接口和抽象类到底还有啥区别？\"></a>Java8中的接口和抽象类到底还有啥区别？</h3><p>既然接口都能写默认方法了，那么还要抽象类干嘛呢？<br>区别1：首先抽象类是一个“类”，而接口只是一个“接口”，两者的概念和应用场景不一样，这也是抽象类和接口的主要区别。<br>区别2：即使在Java8中接口也能写实现方法了，但却不能写构造方法，而在抽象类是可以写构造方法的，意味着抽象类是参与类的实例化过程的，而接口则不是。抽象类不可以new<br>区别3：抽象类可以有自己的各种成员变量，并且可以通过自己的非抽象方法进行改变，而接口中的变量默认全是public static final修饰的，意味着都是常量，并且不能被自己和外部修改。<br>区别4：接口可以实现多继承，而抽象类只能单继承</p>\n<h3 id=\"Comparable和Comparator区别\"><a href=\"#Comparable和Comparator区别\" class=\"headerlink\" title=\"Comparable和Comparator区别\"></a>Comparable和Comparator区别</h3><p>一个类实现了Comparable接口，意味着该类的对象可以直接进行比较（排序），但比较（排序）的方式只有一种，很单一。<br>一个类如果想要保持原样，又需要进行不同方式的比较（排序），就可以定制比较器（实现Comparator接口）。<br>Comparable接口在java.lang包下，而Comparator接口在java.util包下<br>如果对象的排序需要基于自然顺序，请选择Comparable，如果需要按照对象的不同属性进行排序，请选择Comparator</p>\n<h3 id=\"过滤器和拦截器的区别\"><a href=\"#过滤器和拦截器的区别\" class=\"headerlink\" title=\"过滤器和拦截器的区别\"></a>过滤器和拦截器的区别</h3><ol>\n<li>Filter需要在web.xml中配置，依赖于Servlet；</li>\n<li>Interceptor需要在SpringMVC中配置，依赖于框架；</li>\n<li>Filter的执行顺序在Interceptor之前</li>\n<li>两者的本质区别：拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter能做的事情，都能做，而且可以在请求前，请求后执行，比较灵活。<br>Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），<br>太细的话，还是建议用interceptor。不过还是根据不同情况选择合适的。</li>\n<li>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。</li>\n<li>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。init(),destroy()各一次，dofilter()多次</li>\n<li>拦截的请求范围不同,过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。</li>\n<li>触发时机不同，过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。拦截器Interceptor是在请求进入servlet后，在进入Controller之前进行预处理的，Controller中渲染了对应的视图之后请求结束。</li>\n</ol>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/69060111?utm_source=wechat_timeline&amp;utm_medium=social&amp;utm_oi=1040923520439672832&amp;from=timeline\">过滤器、监听器、拦截器的区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PzQlCjLLM1fjPc0y4poQOw\">一口气说出过滤器和拦截器6个区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kZx10tnBJ8a6xtDgQsN1vQ\">SpringBoot过滤器、拦截器、监听器对比及使用场景</a></li>\n</ul>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>List&lt;? extends Object&gt;相当于List&lt;?&gt;<br>在Java集合框架中，对于参数值是未知类型的容器类，只能读取其中元素，不能向其中添加元素,因为，其类型是未知，所以编译器无法识别添加元素的类型和容器的类型是否兼容，唯一的例外是NULL<br>List&lt;? extends T&gt;可以添加元素添加的元素为T或T的子类<br>List&lt;? super T&gt;可以添加元素添加的元素为T或T的父类</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ilqFpf5kE0XzJnOv9SsX7Q\">为了让你理解Java泛型，费了好大心思</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/5dWCpdyXNP5PeCZM8AQVAg\">泛型中的T、E、K、V，还记得嘛？</a></li>\n</ul>\n<h2 id=\"CSRF和XSS的区别\"><a href=\"#CSRF和XSS的区别\" class=\"headerlink\" title=\"CSRF和XSS的区别\"></a>CSRF和XSS的区别</h2><ol>\n<li>CSRF是跨站请求伪造;XSS是跨域脚本攻击。</li>\n<li>CSRF需要用户先登录网站A,获取cookie;XSS不需要登录。</li>\n<li>CSRF是利用网站A本身的漏洞,去请求网站A的api;XSS是向网站A注入JS代码,然后执行JS里的代码,篡改网站A的内容。（XSS利用的是站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。你可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求。）</li>\n</ol>\n<h2 id=\"web-xml详解\"><a href=\"#web-xml详解\" class=\"headerlink\" title=\"web.xml详解\"></a>web.xml详解</h2><p>**&lt;context-param\\&gt;**元素含有一对参数名和参数值，用作应用的Servlet上下文初始化参数，参数名在整个Web应用中必须是惟一的，在web应用的整个生命周期中上下文初始化参数都存在，任意的Servlet和jsp都可以随时随地访问它。在JSP网页中可以使用下列方法来取得：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">&#123;</span>initParam<span class=\"token punctuation\">.</span>param_name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>若在Servlet可以使用下列方法来获得：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> param_name<span class=\"token operator\">=</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitParamter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Servlet的ServletConfig对象拥有该Servlet的ServletContext的一个引用，所以可这样取得上下文初始化参数：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以在Servlet中直接调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>两者是等价的。</p>\n<p>**&lt;listener\\&gt;**为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：</p>\n<ol>\n<li>ServletContextListener：用于监听Web应用的启动和关闭；</li>\n<li>ServletContextAttributeListener：用于监听ServletContext范围（application）内属性的改变；</li>\n<li>ServletRequestListener：用于监听用户的请求；</li>\n<li>ServletRequestAttributeListener：用于监听ServletRequest范围（request）内属性的改变；</li>\n<li>HttpSessionListener：用于监听用户session的开始和结束；</li>\n<li>HttpSessionAttributeListener：用于监听HttpSession范围（session）内属性的改变</li>\n</ol>\n<p><strong>&lt;load-on-startup\\&gt;1&lt;&#x2F;load-on-startup\\&gt;</strong><br>load-on-startup元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)。它的值必须是一个整数，表示servlet被加载的先后顺序。如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载创建Servlet实例有两个时机较小的优先加载</p>\n<h2 id=\"解决跨域的几种方案\"><a href=\"#解决跨域的几种方案\" class=\"headerlink\" title=\"解决跨域的几种方案\"></a>解决跨域的几种方案</h2><p>服务器没有同源策略，浏览器的同源策略是为了保证浏览器的安全性，实际上跨域请求会将请求发送到服务器，只不过在返回数据的时候浏览器发出跨域警告</p>\n<ol>\n<li>JSONP</li>\n<li>CORS<br>服务器中编写过滤器允许跨域访问<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HttpServletResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//该字段必填。它的值要么是请求时Origin字段的具体值，要么是一个*，表示接受任意域名的请求</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//该字段必填。它的值是逗号分隔的一个具体的字符串(GET,POST...)或者*，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//该字段可选，用来指定本次预检请求的有效期，单位为秒。在有效期间，不用发出另一条预检请求。</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Max-Age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3600\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Origin,X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Credentials\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-cache, must-revalidate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>httpResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>反向代理工具如nginx</li>\n<li>服务器没有同源策略，使用HTTPClient等技术</li>\n<li>控制器添加@CrossOrigin注解</li>\n</ol>\n<h2 id=\"收藏文章\"><a href=\"#收藏文章\" class=\"headerlink\" title=\"收藏文章\"></a>收藏文章</h2><p>Java</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491305&idx=2&sn=c8b3f2d88d16aa3ebb9f5b674dce0a55&source=41#wechat_redirect\">java关键字名单</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qvKunFJfDuBesjJUIsJdXg\">Class.forName和ClassLoader到底有啥区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/GOSoJrArIQrctiP3ArG6lA\">说说Java深拷贝和浅拷贝区别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/SQB4ZteKe7-fHFzL__6cSQ\">面试难缠的深拷贝浅拷贝，这次终于通透了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/GSzbiVge-aoDHxYCzCTALw\">零拷贝技术在Java中为何这么牛</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/R7JyIRnRYEEMNKZG-aEoMw\">天天都会写接口，但它的用途和好处有多少人能说得清楚？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NN3Zy1RGpwWUIgaatAJ4HQ\">Java中的接口还可以这样用，你知道吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Fap6REHGxmnaHOPwp94iRA\">10大Java面试难题，打趴无数面试者！</a>※</li>\n<li><a href=\"https://mp.weixin.qq.com/s/efM15hYwgowrprWWNgbYjg\">知名互联网公司Java开发岗面试知识点解析</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kbvWCme1T-_3_MaIvgH66g\">社招后端20问！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/3cqRu-STSX7aL_3kRQffTQ\">Java面试题全梳理</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UZld1hKUgeBrYFrhQ_wjMQ\">oppo面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/aj-WmrJsWnH2Utsbhurnbg\">扪心自问！一百多道难搞的面试题，你能答对了多少</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ZbP8kBTKpnxKsogZyQL1nw\">B站面试经历</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_JsVu1Vcj8kCl1gZc8tNXg\">Java基础夺命连环16问</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/-v3PCoVInPYpkhnO9y3SNQ\">15个常见的Node.js面试问题及答案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OY6oO-1dSxc9Flseal22zw\">30道计网常考面试题含答案总结！血赚！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PlBwyJ4wpDeZ7J-PKw3sgA\">2W字！梳理50道经典计算机网络面试题（收藏版）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6KhtiAdDOljqQ4bzc7pSnw\">蚂蚁金服一面：十道经典面试题解析</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/t92OtlMD_dwk1ldCVNvHBA\">Java中经常被提到的SPI到底是什么</a></li>\n</ul>\n<p>分布式</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/8L713J4zzv_PfDtfdR5CRA\">Java分布式面试题集合</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TnFsKK77uyfXkckt4m1Ctw\">分布式十二问！万字图文详解！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/e1xvvdx8oOs8ykIMgSKiuw\">面试官：谈谈分布式一致性机制，我一脸懵逼。。</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/tLfJdZ4BxlXY_wiV6-Hx8w\">面试绕不开的CAP理论，这篇文章帮你搞定！</a></li>\n</ul>\n<p>其他</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/g6bCfbyJ0NrtSAwN3Xooqw\">如何写出让CPU跑得更快的代码</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Ek3gWfzrmWrRz8ypL76UTA\">程序在计算机中是如何运行起来的</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/3dF8cy9LWh5A0oGWL2p35g\">了解这些软件设计思想，你的思维至少上升一个段位</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/emU6QyhRFXaBlkj9jerOMg\">微信支付、支付宝最全接入指引，看完立刻就可以上手</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AB1GN6UAsHW_nvctH_tuRQ\">如何防止你的jar被反编译</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2FR4lmNdGmLP4qnD2F0Krw\">PageHelper使用中的一些坑</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/bt5Df-sY3QETgvGp3Kp8Yw\">一文参透分布式存储系统Ceph的架构设计、集群搭建</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/RnR3OyNA8PSz9CrCMP48kw\">电商系统架构，常见的9个大坑</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/4Yr0J5MPvUQmDTseoJAILQ\">给定一个接口，要用户自定义动态实现并上传热部署</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/q5p0v2R_FeYq2HwlrqL_xA\">说说布隆过滤器与布谷鸟过滤器及应用场景</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/CsUIu48Yyqr0yiir4Xq4XA\">我们为什么要放弃RESTful，选择拥抱GraphQL</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/m2e8dgW0NLgB9jzYd7nS2A\">轻松实现word、excel、ppt、txt等办公文件在线预览功能</a></li>\n</ul>\n<p>下载</p>\n<ul>\n<li><a href=\"https://dlcdn.apache.org/\">apache旗下安装包</a></li>\n<li><a href=\"http://vault.centos.org/\">centos rpm包（cat &#x2F;etc&#x2F;centos-release）</a></li>\n<li><a href=\"https://www.allroundautomations.com/registered-plsqldev/\">PLSQL历史版本下载</a></li>\n<li><a href=\"https://www.newxitong.com/\">onekey ghpst+win7 ghost</a></li>\n<li><a href=\"https://www.google.cn/chrome/\">Chrome</a></li>\n</ul>\n<p>工具</p>\n<ul>\n<li><a href=\"https://developer.aliyun.com/topic/ebook\">阿里云开发者藏经阁</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ccRwb3SJBQl3Fhq8pDzl_A\">Postman详细用法示例</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YTacVjCl90CKcn8tIhM7bQ\">简单的Postman，还能玩出花</a></li>\n<li><a href=\"https://easypdf.com/cn\">pdf在线转换器(easypdf.com)</a></li>\n<li><a href=\"https://lightpdf.com/zh/\">pdf工具（在线签名、转换等）</a></li>\n<li><a href=\"https://blog.csdn.net/Tomorrow_Yesterday/article/details/84605297\">Linux端口转发</a></li>\n<li><a href=\"https://tool.oschina.net/\">开源中国工具</a></li>\n<li><a href=\"https://tool.browser.qq.com/\">QQ浏览器工具箱</a></li>\n<li><a href=\"https://www.amcharts.com/docs/v3/reference/\">amCharts3官方文档</a></li>\n<li><a href=\"https://www.cnblogs.com/landeanfen/p/4993979.html\">表格组件神器：bootstrap table</a></li>\n<li><a href=\"http://api.map.baidu.com/lbsapi/creatmap/index.html\">创建地图-百度地图生成器</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Dz3Z1S6vIkBksPfVyq7ehQ\">面向程序员的精品开源字体</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/XsBqQwZBUHfwBJBLgd2NTw\">idea使用的30个小技巧</a></li>\n</ul>\n<p>排序算法</p>\n<blockquote>\n<p><a href=\"https://github.com/xmxe/demo/tree/master/study-demo/src/main/java/com/xmxe/study_demo/algorithm/sort\">Java实现的排序算法</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/teOGQlslb6aP4AQrx7TTzA\">漫画：“排序算法”大总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hQkdAMICGU2Akonl0upbag\">因为排序不明白，被面试官锤了一顿</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/8iXAupQIdbRrcsFDuKwgHA\">史上最好的排序和数据结构入门</a></li>\n</ul>\n<p>堆</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/Wy-DgsZZAeZmI19ZskERRg\">一文告诉你Java集合中「堆」的最佳打开方式</a></li>\n</ul>\n<p>链表</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/oyXrWMfOBRBClbCg1j9TyQ\">一口气搞懂「链表」，就靠这20+张图了</a></li>\n</ul>\n<p>栈</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/E3WDAksQV3qjS_O8ittfBA\">面试官问我什么是「栈」，我随手画了10张图来解释</a></li>\n</ul>\n<p>哈希</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/AgkHMhITtOTf9y3jrrxsfQ\">不能错过！简单易懂的哈希表总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3Mzc0NjUzMQ==&mid=2247497071&idx=1&sn=3a67993e5e4634ddf0880e6c02a10d4e&source=41#wechat_redirect\">学生物的女朋友都能看懂的哈希表总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YA5Pj6GTMFw0nrIOseMyRg\">如果世界上只有一种数据结构，我选择哈希！</a></li>\n</ul>\n<p>算法复杂度</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/HgsQUAGWG5GOs288thM8QA\">复杂度O、Θ、Ω、o、ω，别再傻傻分不清了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/z_pSFJPaEdPsWtV9o-4tUQ\">看完这篇，还不清楚时间复杂度的，请来怼我</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/9ZFC_vlMa0bhrXhgvWx9pw\">面试时候说的复杂度都是什么？</a></li>\n</ul>\n<p>二叉树</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/Tbx-VZxca8Z2U8VpXl6GoA\">漫画：什么是平衡二叉树？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/T4ObPeuFzdAbkW3R5q_vLA\">不怕面试被问了！二叉树算法大盘点</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491062&idx=1&sn=3baf32b14a438ea29273add1bbae134e&source=41#wechat_redirect\">看懂这篇文章，玩转二叉查找树</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/38j1f-UR1uakiav5sPoCIw\">一文弄懂二叉树三种遍历</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QEM6Arxny0HaUasGRoSxQw\">一文高效图解二叉树面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491085&idx=2&sn=ad6b30d8feb980354f5131d21f3c34b8&source=41#wechat_redirect\">3分钟看完关于树的故事</a></li>\n</ul>\n<p>红黑树</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/X3zYwQXxq93P_XUzFmKluQ\">漫画：什么是红黑树?</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/uTkORM6bQeUT2XDHHmOc4A\">一口气写出了7k字的红黑树总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MSB-vFGqNWB26kPydBJQmQ\">漫画算法：5分钟搞明白红黑树到底是什么</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UjP3pHXWnlIf68cplj2RRw\">用超强动静图详解红黑树，简单易懂</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491027&idx=1&sn=70566688d09508c7355cfef38b1453a5&source=41#wechat_redirect\">红黑树是怎么实现的，看这篇真的就够了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/9s6c1sPN7avqwxZC7BsVUQ\">什么是红黑树？看完这篇你就明白了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Xim1IUQmGT8hKelYZwUdLA\">图文详解红黑树，还有谁不会</a></li>\n</ul>\n<p>Tomcat</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/b3MP9eTvfEdEKw-fL2jeTw\">面试官:Tomcat的生命周期是什么样子的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/3i8uRr-4EOpFizie2hmogA\">超详细的Tomcat性能监控及调优教程</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494066&idx=2&sn=14302c80a7c6e6480dd7553a5579ce06&source=41#wechat_redirect\">Tomcat配置文件server.xml你有深入了解过没？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/GR7iB5esMEczn687mwwc5Q\">一文拆解Tomcat高并发原理与性能调优</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jmqqLbbOt3D--wksCigAOw\">Tomcat调优和JVM参数优化</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/U49ZIWYRvIYYFkL-06aSXA\">牛逼！硬核图解Tomcat整体架构</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494316&idx=1&sn=fb6eb1b78ed195a977bdfbe92a7cc6f4&source=41#wechat_redirect\">Tomcat深入理解</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Miw5K0OyE4oytn4U65Hn5g\">Tomcat请求处理流程</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UilzaN7jQEza7wiwzw4bsg\">Tomcat有哪些组成部分？讲讲工作原理？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/RpMXgOi8WsMm19S4YOh1aw\">教你用Java写一个自己的Tomcat容器，涨姿势了</a></li>\n</ul>\n","categories":[],"tags":[{"name":"随笔","path":"api/tags/随笔.json"}]}