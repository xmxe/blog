{"title":"Oauth2","slug":"Oauth2","date":"2022-11-15T07:17:07.452Z","updated":"2023-03-23T01:41:55.198Z","comments":true,"path":"api/articles/Oauth2.json","excerpt":null,"covers":"https://picd.zhimg.com/v2-06d026cb3aaade2aa5380ee31d099a85_1440w.jpg","content":"<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><blockquote>\n<p>fork from <a href=\"https://github.com/lenve/oauth2-samples\">oauth2-samples</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Demo</th>\n<th align=\"left\">文章</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">authorization_code</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/GXMQI59U6uzmS-C0WQ5iUw\">这个案例写出来，还怕跟面试官扯不明白OAuth2登录流程？</a></td>\n</tr>\n<tr>\n<td align=\"left\">client_credentials</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/33Oxu6YMjwco3WRE07_IiQ\">死磕OAuth2，教练我要学全套的！</a></td>\n</tr>\n<tr>\n<td align=\"left\">implicit</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/33Oxu6YMjwco3WRE07_IiQ\">死磕OAuth2，教练我要学全套的！</a></td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/33Oxu6YMjwco3WRE07_IiQ\">死磕OAuth2，教练我要学全套的！</a></td>\n</tr>\n<tr>\n<td align=\"left\">authorization_code_redis</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/cGopy8hDPtkn8Q7HUYabbA\">OAuth2令牌存入Redis</a></td>\n</tr>\n<tr>\n<td align=\"left\">jwt</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/xEIWTduDqQuGL7lfiP735w\">让OAuth2和JWT在一起愉快玩耍</a></td>\n</tr>\n<tr>\n<td align=\"left\">oauth2-sso</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/EyAMTbKPqNNnEtZACIsMVw\">Spring Boot+OAuth2，一个注解搞定单点登录！</a></td>\n</tr>\n<tr>\n<td align=\"left\">github_login</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/tq4Q306J3hJFEtGL1EpOBA\">分分钟让自己的网站接入GitHub第三方登录功能</a></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"OAuth2-0的四种模式\"><a href=\"#OAuth2-0的四种模式\" class=\"headerlink\" title=\"OAuth2.0的四种模式\"></a>OAuth2.0的四种模式</h3><h4 id=\"授权码模式\"><a href=\"#授权码模式\" class=\"headerlink\" title=\"授权码模式\"></a>授权码模式</h4><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的Web应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。令牌获取的流程如下：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhibgOZffmU9RnmNUusomvBtoUKaxEXIU1df2icbUZOwSUeG4G0DxWgjtQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"授权码模式\"><br>上图中涉及到两个角色，分别是客户端、认证中心，客户端负责拿令牌，认证中心负责发放令牌。但是不是所有客户端都有权限请求令牌的，需要事先在认证中心申请，比如微信并不是所有网站都能直接接入，而是要去微信后台开通这个权限。至少要提前向认证中心申请的几个参数如下：<br>client_id：客户端唯一id，认证中心颁发的唯一标识<br>client_secret：客户端的秘钥，相当于密码<br>scope：客户端的权限<br>redirect_uri：授权码模式使用的跳转uri，需要事先告知认证中心。</p>\n<ol>\n<li>请求授权码</li>\n</ol>\n<p>客户端需要向认证中心拿到授权码，比如第三方登录使用微信，扫一扫登录那一步就是向微信的认证中心获取授权码。<br>请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;authorize?client_id&#x3D;&amp;response_type&#x3D;code&amp;scope&#x3D;&amp;redirect_uri&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述这个url中携带的几个参数如下：<br>client_id：客户端的id，这个由认证中心分配，并不是所有的客户端都能随意接入认证中心<br>response_type：固定值为code，表示要求返回授权码。<br>scope：表示要求的授权范围，客户端的权限<br>redirect_uri：跳转的uri，认证中心同意或者拒绝授权跳转的地址，如果同意会在uri后面携带一个code&#x3D;xxx，这就是授权码</p>\n<ol start=\"2\">\n<li><p>返回授权码<br>第1步请求之后，认证中心会要求登录、是否同意授权，用户同意授权之后直接跳转到redirect_uri（这个需要事先在认证中心申请配置），授权码会携带在这个地址后面，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;xxxx?code&#x3D;NMoj5y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述链接中的NMoj5y就是授权码了。</p>\n</li>\n<li><p>请求令牌<br>客户端拿到授权码之后，直接携带授权码发送请求给认证中心获取令牌，请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;token?\n client_id&#x3D;&amp;\n client_secret&#x3D;&amp;\n grant_type&#x3D;authorization_code&amp;\n code&#x3D;NMoj5y&amp;\n redirect_uri&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相同的参数同上，不同参数解析如下：</p>\n</li>\n</ol>\n<ul>\n<li>grant_type：授权类型，授权码固定的值为authorization_code</li>\n<li>code：这个就是上一步获取的授权码</li>\n</ul>\n<ol start=\"4\">\n<li>返回令牌<br>认证中心收到令牌请求之后，通过之后，会返回一段JSON数据，其中包含了令牌access_token，如下：<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>    \n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">2592000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"REFRESH_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"uid\"</span><span class=\"token operator\">:</span><span class=\"token number\">100101</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\naccess_token则是颁发的令牌，refresh_token是刷新令牌，一旦令牌失效则携带这个令牌进行刷新。</li>\n</ol>\n<h4 id=\"简化模式\"><a href=\"#简化模式\" class=\"headerlink\" title=\"简化模式\"></a>简化模式</h4><p>这种模式不常用，主要针对那些无后台的系统，直接通过web跳转授权，流程如下图：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhxGsEsTxPIovmxbYqEqregcCE7o0h7fvcjkGSrdtXqUxFfs4EwqbegQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"简化模式\"></p>\n<p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p>\n<ol>\n<li><p>请求令牌<br>客户端直接请求令牌，请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;authorize?\n  response_type&#x3D;token&amp;\n  client_id&#x3D;CLIENT_ID&amp;\n  redirect_uri&#x3D;CALLBACK_URL&amp;\n  scope&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个url正是授权码模式中获取授权码的url，各个参数解析如下：<br>client_id：客户端的唯一Id<br>response_type：简化模式的固定值为token<br>scope：客户端的权限<br>redirect_uri：跳转的uri，这里后面携带的直接是令牌，不是授权码了。</p>\n</li>\n<li><p>返回令牌<br>认证中心认证通过后，会跳转到redirect_uri，并且后面携带着令牌，链接如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;xxxx#token&#x3D;NPmdj5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>token&#x3D;NPmdj5这一段后面携带的就是认证中心携带的，令牌为NPmdj5。</p>\n</li>\n</ol>\n<h4 id=\"密码模式\"><a href=\"#密码模式\" class=\"headerlink\" title=\"密码模式\"></a>密码模式</h4><p>密码模式也很简单，直接通过用户名、密码获取令牌，流程如下：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhxGsEsTxPIovmxbYqEqregcCE7o0h7fvcjkGSrdtXqUxFfs4EwqbegQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"密码模式\"></p>\n<ol>\n<li><p>请求令牌<br>认证中心要求客户端输入用户名、密码，认证成功则颁发令牌，请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;token?\n  grant_type&#x3D;password&amp;\n  username&#x3D;&amp;\n  password&#x3D;&amp;\n  client_id&#x3D;&amp;\n  client_secret&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参数解析如下：<br>grant_type：授权类型，密码模式固定值为password<br>username：用户名<br>password：密码<br>client_id：客户端id<br>client_secret：客户端的秘钥</p>\n</li>\n<li><p>返回令牌<br>上述认证通过，直接返回JSON数据，不需要跳转，如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>    \n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">2592000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"REFRESH_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"uid\"</span><span class=\"token operator\">:</span><span class=\"token number\">100101</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>access_token则是颁发的令牌，refresh_token是刷新令牌，一旦令牌失效则携带这个令牌进行刷新。</p>\n</li>\n</ol>\n<h4 id=\"客户端模式\"><a href=\"#客户端模式\" class=\"headerlink\" title=\"客户端模式\"></a>客户端模式</h4><p>适用于没有前端的命令行应用，即在命令行下请求令牌。<br>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。流程如下：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhxGsEsTxPIovmxbYqEqregcCE7o0h7fvcjkGSrdtXqUxFfs4EwqbegQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"客户端模式\"></p>\n<ol>\n<li><p>请求令牌<br>请求的url为如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;token?\ngrant_type&#x3D;client_credentials&amp;\nclient_id&#x3D;&amp;\nclient_secret&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参数解析如下：<br>grant_type：授权类型，客户端模式固定值为client_credentials<br>client_id：客户端id<br>client_secret：客户端秘钥</p>\n</li>\n<li><p>返回令牌<br>认证成功后直接返回令牌，格式为JSON数据，如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/i8hvrKPSCwlzpmt_p52ZbA\">妹子始终没搞懂OAuth 2.0，今天整合Spring Cloud Security一次说明白！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/l1vll9aSL1IzjsI-DhbtUw\">快速接入GitHub、QQ第三方登录真有那么难吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/S7NNeiPJAEtNQtypxrWcmw\">Spring Security OAuth2整合企业微信扫码登录</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/r0H5zsm2H0AZui5nfeElRw\">实战：画了几张图，终于把OAuth2搞清楚了</a></li>\n</ul>\n","more":"<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><blockquote>\n<p>fork from <a href=\"https://github.com/lenve/oauth2-samples\">oauth2-samples</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Demo</th>\n<th align=\"left\">文章</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">authorization_code</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/GXMQI59U6uzmS-C0WQ5iUw\">这个案例写出来，还怕跟面试官扯不明白OAuth2登录流程？</a></td>\n</tr>\n<tr>\n<td align=\"left\">client_credentials</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/33Oxu6YMjwco3WRE07_IiQ\">死磕OAuth2，教练我要学全套的！</a></td>\n</tr>\n<tr>\n<td align=\"left\">implicit</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/33Oxu6YMjwco3WRE07_IiQ\">死磕OAuth2，教练我要学全套的！</a></td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/33Oxu6YMjwco3WRE07_IiQ\">死磕OAuth2，教练我要学全套的！</a></td>\n</tr>\n<tr>\n<td align=\"left\">authorization_code_redis</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/cGopy8hDPtkn8Q7HUYabbA\">OAuth2令牌存入Redis</a></td>\n</tr>\n<tr>\n<td align=\"left\">jwt</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/xEIWTduDqQuGL7lfiP735w\">让OAuth2和JWT在一起愉快玩耍</a></td>\n</tr>\n<tr>\n<td align=\"left\">oauth2-sso</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/EyAMTbKPqNNnEtZACIsMVw\">Spring Boot+OAuth2，一个注解搞定单点登录！</a></td>\n</tr>\n<tr>\n<td align=\"left\">github_login</td>\n<td align=\"left\"><a href=\"https://mp.weixin.qq.com/s/tq4Q306J3hJFEtGL1EpOBA\">分分钟让自己的网站接入GitHub第三方登录功能</a></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"OAuth2-0的四种模式\"><a href=\"#OAuth2-0的四种模式\" class=\"headerlink\" title=\"OAuth2.0的四种模式\"></a>OAuth2.0的四种模式</h3><h4 id=\"授权码模式\"><a href=\"#授权码模式\" class=\"headerlink\" title=\"授权码模式\"></a>授权码模式</h4><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的Web应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。令牌获取的流程如下：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhibgOZffmU9RnmNUusomvBtoUKaxEXIU1df2icbUZOwSUeG4G0DxWgjtQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"授权码模式\"><br>上图中涉及到两个角色，分别是客户端、认证中心，客户端负责拿令牌，认证中心负责发放令牌。但是不是所有客户端都有权限请求令牌的，需要事先在认证中心申请，比如微信并不是所有网站都能直接接入，而是要去微信后台开通这个权限。至少要提前向认证中心申请的几个参数如下：<br>client_id：客户端唯一id，认证中心颁发的唯一标识<br>client_secret：客户端的秘钥，相当于密码<br>scope：客户端的权限<br>redirect_uri：授权码模式使用的跳转uri，需要事先告知认证中心。</p>\n<ol>\n<li>请求授权码</li>\n</ol>\n<p>客户端需要向认证中心拿到授权码，比如第三方登录使用微信，扫一扫登录那一步就是向微信的认证中心获取授权码。<br>请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;authorize?client_id&#x3D;&amp;response_type&#x3D;code&amp;scope&#x3D;&amp;redirect_uri&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述这个url中携带的几个参数如下：<br>client_id：客户端的id，这个由认证中心分配，并不是所有的客户端都能随意接入认证中心<br>response_type：固定值为code，表示要求返回授权码。<br>scope：表示要求的授权范围，客户端的权限<br>redirect_uri：跳转的uri，认证中心同意或者拒绝授权跳转的地址，如果同意会在uri后面携带一个code&#x3D;xxx，这就是授权码</p>\n<ol start=\"2\">\n<li><p>返回授权码<br>第1步请求之后，认证中心会要求登录、是否同意授权，用户同意授权之后直接跳转到redirect_uri（这个需要事先在认证中心申请配置），授权码会携带在这个地址后面，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;xxxx?code&#x3D;NMoj5y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述链接中的NMoj5y就是授权码了。</p>\n</li>\n<li><p>请求令牌<br>客户端拿到授权码之后，直接携带授权码发送请求给认证中心获取令牌，请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;token?\n client_id&#x3D;&amp;\n client_secret&#x3D;&amp;\n grant_type&#x3D;authorization_code&amp;\n code&#x3D;NMoj5y&amp;\n redirect_uri&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>相同的参数同上，不同参数解析如下：</p>\n</li>\n</ol>\n<ul>\n<li>grant_type：授权类型，授权码固定的值为authorization_code</li>\n<li>code：这个就是上一步获取的授权码</li>\n</ul>\n<ol start=\"4\">\n<li>返回令牌<br>认证中心收到令牌请求之后，通过之后，会返回一段JSON数据，其中包含了令牌access_token，如下：<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>    \n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">2592000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"REFRESH_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"uid\"</span><span class=\"token operator\">:</span><span class=\"token number\">100101</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\naccess_token则是颁发的令牌，refresh_token是刷新令牌，一旦令牌失效则携带这个令牌进行刷新。</li>\n</ol>\n<h4 id=\"简化模式\"><a href=\"#简化模式\" class=\"headerlink\" title=\"简化模式\"></a>简化模式</h4><p>这种模式不常用，主要针对那些无后台的系统，直接通过web跳转授权，流程如下图：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhxGsEsTxPIovmxbYqEqregcCE7o0h7fvcjkGSrdtXqUxFfs4EwqbegQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"简化模式\"></p>\n<p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p>\n<ol>\n<li><p>请求令牌<br>客户端直接请求令牌，请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;authorize?\n  response_type&#x3D;token&amp;\n  client_id&#x3D;CLIENT_ID&amp;\n  redirect_uri&#x3D;CALLBACK_URL&amp;\n  scope&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个url正是授权码模式中获取授权码的url，各个参数解析如下：<br>client_id：客户端的唯一Id<br>response_type：简化模式的固定值为token<br>scope：客户端的权限<br>redirect_uri：跳转的uri，这里后面携带的直接是令牌，不是授权码了。</p>\n</li>\n<li><p>返回令牌<br>认证中心认证通过后，会跳转到redirect_uri，并且后面携带着令牌，链接如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;xxxx#token&#x3D;NPmdj5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>token&#x3D;NPmdj5这一段后面携带的就是认证中心携带的，令牌为NPmdj5。</p>\n</li>\n</ol>\n<h4 id=\"密码模式\"><a href=\"#密码模式\" class=\"headerlink\" title=\"密码模式\"></a>密码模式</h4><p>密码模式也很简单，直接通过用户名、密码获取令牌，流程如下：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhxGsEsTxPIovmxbYqEqregcCE7o0h7fvcjkGSrdtXqUxFfs4EwqbegQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"密码模式\"></p>\n<ol>\n<li><p>请求令牌<br>认证中心要求客户端输入用户名、密码，认证成功则颁发令牌，请求的url如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;token?\n  grant_type&#x3D;password&amp;\n  username&#x3D;&amp;\n  password&#x3D;&amp;\n  client_id&#x3D;&amp;\n  client_secret&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参数解析如下：<br>grant_type：授权类型，密码模式固定值为password<br>username：用户名<br>password：密码<br>client_id：客户端id<br>client_secret：客户端的秘钥</p>\n</li>\n<li><p>返回令牌<br>上述认证通过，直接返回JSON数据，不需要跳转，如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>    \n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">2592000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"REFRESH_TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"uid\"</span><span class=\"token operator\">:</span><span class=\"token number\">100101</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>access_token则是颁发的令牌，refresh_token是刷新令牌，一旦令牌失效则携带这个令牌进行刷新。</p>\n</li>\n</ol>\n<h4 id=\"客户端模式\"><a href=\"#客户端模式\" class=\"headerlink\" title=\"客户端模式\"></a>客户端模式</h4><p>适用于没有前端的命令行应用，即在命令行下请求令牌。<br>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。流程如下：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/19cc2hfD2rCpPJB83SvgzosiboTJxftAhxGsEsTxPIovmxbYqEqregcCE7o0h7fvcjkGSrdtXqUxFfs4EwqbegQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"客户端模式\"></p>\n<ol>\n<li><p>请求令牌<br>请求的url为如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;oauth&#x2F;token?\ngrant_type&#x3D;client_credentials&amp;\nclient_id&#x3D;&amp;\nclient_secret&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参数解析如下：<br>grant_type：授权类型，客户端模式固定值为client_credentials<br>client_id：客户端id<br>client_secret：客户端秘钥</p>\n</li>\n<li><p>返回令牌<br>认证成功后直接返回令牌，格式为JSON数据，如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/i8hvrKPSCwlzpmt_p52ZbA\">妹子始终没搞懂OAuth 2.0，今天整合Spring Cloud Security一次说明白！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/l1vll9aSL1IzjsI-DhbtUw\">快速接入GitHub、QQ第三方登录真有那么难吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/S7NNeiPJAEtNQtypxrWcmw\">Spring Security OAuth2整合企业微信扫码登录</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/r0H5zsm2H0AZui5nfeElRw\">实战：画了几张图，终于把OAuth2搞清楚了</a></li>\n</ul>\n","categories":[{"name":"技术栈","path":"api/categories/技术栈.json"}],"tags":[]}