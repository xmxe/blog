{"title":"Git","slug":"Git","date":"2022-09-27T08:40:56.309Z","updated":"2023-05-05T06:05:58.997Z","comments":true,"path":"api/articles/Git.json","excerpt":null,"covers":"https://pica.zhimg.com/v2-6baae9baaef9c2a3188f9fc301833fba_1440w.jpg","content":"<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><h4 id=\"上传git仓库\"><a href=\"#上传git仓库\" class=\"headerlink\" title=\"上传git仓库\"></a>上传git仓库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建.git目录</span>\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"init\"</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/xmxe/project.git\n<span class=\"token comment\"># 断开连接</span>\n<span class=\"token function\">git</span> remote remove origin\n<span class=\"token comment\"># 增加一个新的远程仓库</span>\n<span class=\"token comment\">#git remote add name url</span>\n<span class=\"token comment\"># 删除指定远程仓库</span>\n<span class=\"token comment\">#git remote remove name</span>\n<span class=\"token comment\"># 获取指定远程仓库的详细信息</span>\n<span class=\"token comment\">#git remote show origin</span>\n\n<span class=\"token function\">git</span> pull <span class=\"token parameter variable\">--rebase</span> origin master \n<span class=\"token function\">git</span> push origin master\n<span class=\"token comment\"># git push --set-upstream origin master</span>\n\n<span class=\"token comment\"># 本地生成ssh密钥</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"你的邮箱\"</span>生成sshkey\n<span class=\"token function\">git</span> remote set-url origin git@github.com:xmxe/springcloud.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 可以查看当前没有add的内容修改（不在缓冲区的文件变化）</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span>\n<span class=\"token comment\"># 查看已经add但没有commit的改动（在缓冲区的文件变化）</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--cached</span>\n<span class=\"token comment\"># 是上面两条命令的合并</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> HEAD\n<span class=\"token comment\"># 查看文件和另一个分支的区别</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> branch-name file-name\n<span class=\"token comment\"># 查看两次提交的区别</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> commit-id commit-id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将未commit的文件移出Staging区</span>\n<span class=\"token function\">git</span> reset HEAD\n<span class=\"token comment\"># 重置Staging区与上次commit的一样</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span>  \n<span class=\"token comment\"># 重置Commit代码和远程分支代码一样</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> origin/master\n<span class=\"token comment\"># 回退到上个commit 删除工作空间改动代码，撤销commit，撤销git add</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^\n<span class=\"token comment\"># 回退到前3次提交之前，以此类推，回退到n次提交之前</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD~3\n<span class=\"token comment\"># 撤销git add操作（已经将文件添加到暂存区）不加filename就是上一次add里面的全部撤销了</span>\n<span class=\"token function\">git</span> reset HEAD filename\n<span class=\"token comment\"># 回退到指定版本 --hard强制将暂存区和工作目录都同步到你指定的提交</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> commitid\n<span class=\"token comment\"># 不删除工作空间改动代码，撤销commit，不撤销git add</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> HEAD^\n<span class=\"token comment\"># 不删除工作空间改动代码，撤销commit，并且撤销git add操作。这个为默认参数,git reset --mixed HEAD^和git reset HEAD^效果是一样的。</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--mixed</span> HEAD^<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h4><blockquote>\n<p>应用场景：有一天测试突然跟你说，你开发上线的功能有问题，需要马上撤回，否则会影响到系统使用。这时可能会想到用reset回退，可是你看了看分支上最新的提交还有其他同事的代码，用reset会把这部分代码也撤回了。由于情况紧急，又想不到好方法，还是任性的使用reset，然后再让同事把他的代码合一遍（同事听到想打人），于是你的技术形象在同事眼里一落千丈</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 回退到指定版本。与git reset --hard commitid相比区别是在我们确认了在需要回退的版本之后的提交都可以不需要的时候，我们可以直接使用git reset命令，但是当我们只是需要撤销某个版本的时候，后面的提交还需要保留，我们就可以使用git revert.revert会生成一条新的提交记录，这时会让你编辑提交信息，编辑完后:wq保存退出就好了。-n/--no edit：这个选项不会打开文本编辑器。它将直接恢复上次的提交。</span>\n<span class=\"token function\">git</span> revert <span class=\"token parameter variable\">-n</span> commitid\n<span class=\"token comment\"># 撤销前一次commit ,此次操作之前和之后的commit都会被保留，并且会把这次撤销作为一次最新的提交</span>\n<span class=\"token function\">git</span> revert HEAD\n<span class=\"token comment\"># 撤销前前一次commit</span>\n<span class=\"token function\">git</span> revert HEAD^<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># (git add -u + git commit -m \"\"组合)</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-am</span> <span class=\"token string\">''</span>\n<span class=\"token comment\"># 修改commit信息</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span>\n<span class=\"token comment\"># 使用新的一次commit，来覆盖上一次commit</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"message\"</span>\n<span class=\"token comment\"># 提交Staging中在指定文件到本地仓库区</span>\n<span class=\"token function\">git</span> commit file1 file2 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"message\n# 修改上次提交的用户名和邮箱\ngit commit --amend --author=\"</span>name <span class=\"token operator\">&lt;</span>email<span class=\"token operator\">></span>\" --no-edit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span> <span class=\"token comment\"># 保存所有的修改</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 保存新的添加和修改，但是不包括删除</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-u</span> <span class=\"token comment\"># 保存修改和删除，但是不包括新建文件。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看本地分支(不包括远程分支)</span>\n<span class=\"token function\">git</span> branch\n<span class=\"token comment\"># 查看远程分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span>\n<span class=\"token comment\"># 列出本地所有分支 并显示最后一次提交的哈希值</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-v</span>\n<span class=\"token comment\"># 在-v的基础上 并且显示上游分支的名字</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-vv</span>\n<span class=\"token comment\"># 列出上游所有分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span>\n<span class=\"token comment\"># 创建分支(未切换)</span>\n<span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 删除分支，不能删除当前所在分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 设置分支上游</span>\n<span class=\"token function\">git</span> branch --set-upstream-to origin/master\n<span class=\"token comment\"># 建立本地分支和远程分支的关联</span>\n<span class=\"token function\">git</span> branch --set-upstream branch-name origin/branch-name\n\n<span class=\"token comment\"># 远程分支重命名</span>\n<span class=\"token comment\"># 远程分支是指：假设你当前已经将该分支推送到远程了，这种情况修改起来要稍微多几步</span>\n<span class=\"token comment\"># 1.先重命名本地分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> 旧分支名称 新分支名称\n<span class=\"token comment\"># 2.删除远程分支</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--delete</span> origin 旧分支名称\n<span class=\"token comment\"># 3.上传新修改名称的本地分支</span>\n<span class=\"token function\">git</span> push origin 新分支名称\n<span class=\"token comment\">#4.修改后的本地分支关联远程分支</span>\n<span class=\"token function\">git</span> branch --set-upstream-to origin/新分支名称\n\n<span class=\"token comment\"># 远程仓库修改分支后与本地仓库同步</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> master <span class=\"token number\">2021</span>.x\n<span class=\"token function\">git</span> fetch origin\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-u</span> origin/2021.x <span class=\"token number\">2021</span>.x\n<span class=\"token function\">git</span> remote set-head origin <span class=\"token parameter variable\">-a</span>\n\n<span class=\"token comment\"># 下载所有分支</span>\n<span class=\"token comment\"># git clone下载的是默认分支,分支较少的话可以使用git branch -a查看所有远程分支然后使用git checkout 分支名来下载其他分支</span>\n<span class=\"token comment\"># 如果分支较多的话使用--bare,裸仓库(bare repository)指的是除了git仓库不包含其他工作文件的仓库，可以通过git clone --bare来生成。</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--bare</span> https://github.com/xx/project.git .git\n<span class=\"token comment\"># 或者git config --unset core.bare</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--bool</span> core.bare <span class=\"token boolean\">false</span>\n<span class=\"token comment\"># 上面的命令执行完,再执行该命令,就可以看到仓库里面的内容了</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 切换分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 创建+切换分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 创建本地分支并关联远程分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> local-branch origin/remote-branch\n<span class=\"token comment\"># 丢弃某个文件工作区的修改（还原修改过的文件）</span>\n<span class=\"token function\">git</span> checkout -- <span class=\"token function\">file</span>\n<span class=\"token comment\"># 放弃本地所有修改，没有提交的可以回到未修改前版本，不包括新增删除的文件</span>\n<span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># 放弃本地所有修改，包括新增删除的文件</span>\n<span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> clean <span class=\"token parameter variable\">-df</span>\n<span class=\"token comment\">#（先切换到develop分支然后把feature分支合并到develop分支）</span>\n<span class=\"token function\">git</span> checkout develop <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> merge feature\n<span class=\"token comment\"># 将某个文件回滚到某个版本</span>\n<span class=\"token function\">git</span> checkout commitid <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 删除历史提交记录</span>\n<span class=\"token comment\"># 创建孤立分支,没有以前的提交记录</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 切换到一个脱离主分支的另外一条全新主分支，不用太在意叫什么，因为后面还会修改分支名称</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> latest_branch\n<span class=\"token comment\"># 暂存所有改动过的文件，内容为当前旧分支的最新版本所有文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token comment\">#提交更改</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-am</span> <span class=\"token string\">\"commit message\"</span>\n<span class=\"token comment\">#删除原始主分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> main\n<span class=\"token comment\">#将当前分支重命名为 main</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> main\n<span class=\"token comment\">#最后，强制更新您的存储库</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-merge-amp-git-rebase\"><a href=\"#git-merge-amp-git-rebase\" class=\"headerlink\" title=\"git merge&amp;git rebase\"></a>git merge&amp;git rebase</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 合并指定分支到当前分支</span>\n<span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 将指定分支合并到当前分支</span>\n<span class=\"token function\">git</span> rebase branch-name\n<span class=\"token comment\"># 执行commit id将rebase停留在指定commit处</span>\n<span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> commit-id\n<span class=\"token comment\"># 执行commit id将rebase停留在 项目首次commit处</span>\n<span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">--root</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"git-rebase和git-merge区别\"><a href=\"#git-rebase和git-merge区别\" class=\"headerlink\" title=\"git rebase和git merge区别\"></a>git rebase和git merge区别</h5><p>采用merge和rebase后，git log的区别，merge命令不会保留merge的分支的commit，rebase会保留所有的commit：rebase会把你当前分支的commit放到公共分支的最后面,所以叫变基。就好像你从公共分支又重新拉出来这个分支一样。举例:如果你从master拉了个feature分支出来,然后你提交了几个commit,这个时候刚好有人把他开发的东西合并到master了,这个时候master就比你拉分支的时候多了几个commit,如果这个时候你rebase master的话，就会把你当前的几个commit，放到那个人commit的后面。merge会把公共分支和你当前的commit合并在一起，形成一个新的commit提交</p>\n<p>处理冲突的方式：（一股脑）使用merge命令合并分支，解决完冲突，执行git add .和git commit -m ‘fix conflict’。这个时候会产生一个commit。（交互式）使用rebase命令合并分支，解决完冲突，执行git add .和git rebase –continue，不会产生额外的commit。这样的好处是干净，分支上不会有无意义的解决分支的commit；坏处，如果合并的分支中存在多个commit，需要重复处理多次冲突。</p>\n<p>git pull和git pull –rebase区别：git pull做了两个操作分别是‘获取’和合并。所以加了rebase就是以rebase的方式进行合并分支得到一条干净的分支流。</p>\n<p>git merge和git merge –no-ff的区别<br>自己尝试merge命令后，发现merge时并没有产生一个commit。不是说merge时会产生一个merge commit吗？注意：只有在冲突的时候，解决完冲突才会自动产生一个commit。如果想在没有冲突的情况下也自动生成一个commit，记录此次合并就可以用：git merge –no-ff命令,如果不加–no-ff则被合并的分支之前的commit都会被抹去，只会保留一个解决冲突后的merge commit。</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/T_8bkWI-JSP5ixdVIvVAGQ\">合并代码还在用git merge？我们都用git rebase！</a></li>\n</ul>\n<h4 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看所有标签，可以知道历史版本的tag</span>\n<span class=\"token function\">git</span> tag\n<span class=\"token comment\"># 打标签，默认为HEAD。比如git tag v1.0</span>\n<span class=\"token function\">git</span> tag <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span>\n<span class=\"token comment\"># 根据版本号打上标签</span>\n<span class=\"token function\">git</span> tag <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span> commit_id\n<span class=\"token comment\"># 创建带说明的标签。-a指定标签名，-m指定说明文字</span>\n<span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"&lt;说明>\"</span>\n<span class=\"token comment\"># 查看标签信息</span>\n<span class=\"token function\">git</span> show <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span>\n<span class=\"token comment\"># 删除标签</span>\n<span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span>\n<span class=\"token comment\"># 推送某个标签到远程</span>\n<span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span>\n<span class=\"token comment\"># 一次性推送全部尚未推送到远程的本地标签</span>\n<span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--tags</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h4><blockquote>\n<p>应用场景：某一天你正在feature分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到master分支，然后你就会看到以下报错：Your local changes to the following…因为当前有文件更改了，需要提交commit保持工作区干净才能切分支。由于情况紧急，你只有急忙commit上去，commit信息也随便写了个“暂存代码”，于是该分支提交记录就留了一条黑历史，如果你学会stash，就不用那么狼狈了。你只需要：git stash就这么简单，代码就被存起来了。当你修复完线上问题，切回feature分支，想恢复代码也只需要：git stash apply,但是恢复后，stash内容并不删除，需要用git stash drop来删除</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 保存当前未commit的代码</span>\n<span class=\"token function\">git</span> stash\n<span class=\"token comment\"># 保存当前未commit的代码并添加备注</span>\n<span class=\"token function\">git</span> stash save <span class=\"token string\">\"备注的内容\"</span>\n<span class=\"token comment\"># 列出stash的所有记录</span>\n<span class=\"token function\">git</span> stash list\n<span class=\"token comment\"># 删除stash的所有记录</span>\n<span class=\"token function\">git</span> stash <span class=\"token function\">clear</span>\n<span class=\"token comment\"># 应用最近一次的stash</span>\n<span class=\"token function\">git</span> stash apply\n<span class=\"token comment\"># 应用最近一次的stash，随后删除该记录</span>\n<span class=\"token function\">git</span> stash pop\n<span class=\"token comment\"># 删除最近的一次stash</span>\n<span class=\"token function\">git</span> stash drop\n\n<span class=\"token comment\"># 当有多条 stash，可以指定操作stash，首先使用stash list列出所有记录：</span>\n<span class=\"token function\">git</span> stash list \n<span class=\"token comment\"># stash@&#123;0&#125;: WIP on ...</span>\n<span class=\"token comment\"># stash@&#123;1&#125;: WIP on ...</span>\n<span class=\"token comment\"># stash@&#123;2&#125;: On ...</span>\n\n<span class=\"token comment\"># 应用第二条记录：</span>\n<span class=\"token function\">git</span> stash apply stash@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 删除stash@&#123;1&#125;存储的内容</span>\n<span class=\"token function\">git</span> stash drop stash@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># pop，drop 同理。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--gloabl</span> http.postBuffer <span class=\"token number\">524288000</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--gloabl</span> http.sslVerify <span class=\"token string\">\"false\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"your name\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"your email\"</span>\n<span class=\"token comment\"># 保存密码</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> credential.helper store\n<span class=\"token comment\"># 配置git图形界面编码为utf-8</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token assign-left variable\">gui.encoding</span><span class=\"token operator\">=</span>utf-8\n<span class=\"token comment\"># 设置当前项目提交代码的用户名 </span>\n<span class=\"token function\">git</span> config user.name name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 把a分支的一个提交复制到b分支</span>\n<span class=\"token comment\"># 首先复制a分支的commitid 然后切换到b分支执行</span>\n<span class=\"token function\">git</span> cherry-pick commitid\n<span class=\"token comment\"># 一次转移多个提交：将commit1和commit2两个提交应用到当前分支。</span>\n<span class=\"token function\">git</span> cherry-pick commit1 commit2\n<span class=\"token comment\"># 多个连续的commit，也可区间复制：将commit1到commit2这个区间的commit都应用到当前分支（包含commit1、commit2），commit1是最早的提交。</span>\n<span class=\"token function\">git</span> cherry-pick commit1^<span class=\"token punctuation\">..</span>commit2\n<span class=\"token comment\"># 在cherry-pick多个commit时，可能会遇到代码冲突，这时cherry-pick会停下来，让用户决定如何继续操作</span>\n<span class=\"token comment\"># 这时需要解决代码冲突，重新提交到暂存区,然后使用cherry-pick --continue让cherry-pick继续进行下去。</span>\n<span class=\"token function\">git</span> cherry-pick <span class=\"token parameter variable\">--continue</span>\n<span class=\"token comment\"># 但有时候可能需要在代码冲突后，放弃或者退出流程：放弃cherry-pick：</span>\n<span class=\"token function\">git</span> cherry-pick <span class=\"token parameter variable\">--abort</span>\n<span class=\"token comment\"># 回到操作前的样子，就像什么都没发生过。</span>\n<span class=\"token function\">git</span> cherry-pick <span class=\"token parameter variable\">--quit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 删除远程分支</span>\n<span class=\"token function\">git</span> push origin :master\n<span class=\"token comment\">#  删除远程标签</span>\n<span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> tag tag-name\n<span class=\"token comment\"># 上传本地仓库到远程分支</span>\n<span class=\"token function\">git</span> push remote branch-name\n<span class=\"token comment\"># 强行推送当前分支到远程分支</span>\n<span class=\"token function\">git</span> push remote branch-name <span class=\"token parameter variable\">--force</span>\n<span class=\"token comment\"># 推送所有分支到远程仓库</span>\n<span class=\"token function\">git</span> push remote <span class=\"token parameter variable\">--all</span>\n<span class=\"token comment\"># 推送所有标签</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--tags</span>\n<span class=\"token comment\"># 推送指定标签</span>\n<span class=\"token function\">git</span> push origin tag-name\n<span class=\"token comment\">#  删除远程标签（需要先删除本地标签）</span>\n<span class=\"token function\">git</span> push origin :refs/tags/tag-name\n<span class=\"token comment\"># 将本地dev分支push到远程master分支</span>\n<span class=\"token function\">git</span> push origin dev:master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-restore\"><a href=\"#git-restore\" class=\"headerlink\" title=\"git restore\"></a>git restore</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 恢复第一次add的文件，同git rm --cached</span>\n<span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> <span class=\"token function\">file</span>\n<span class=\"token comment\"># 移除staging区的文件，同git checkout</span>\n<span class=\"token function\">git</span> restore <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git删除github文件夹但不删除本地的-以-idea为例\"><a href=\"#git删除github文件夹但不删除本地的-以-idea为例\" class=\"headerlink\" title=\"git删除github文件夹但不删除本地的 以.idea为例\"></a>git删除github文件夹但不删除本地的 以.idea为例</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> <span class=\"token parameter variable\">--cached</span> .idea <span class=\"token comment\"># --cached不会把本地的.idea删除</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'delete .idea dir'</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git删除大文件\"><a href=\"#git删除大文件\" class=\"headerlink\" title=\"git删除大文件\"></a>git删除大文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 显示10个最大的文件id列表</span>\n<span class=\"token function\">git</span> verify-pack <span class=\"token parameter variable\">-v</span> .git/objects/pack/pack-*.idx <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-k</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">-n</span> <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token comment\"># 根据文件id查询文件路径</span>\n<span class=\"token function\">git</span> rev-list <span class=\"token parameter variable\">--objects</span> <span class=\"token parameter variable\">--all</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 08a7475\n<span class=\"token comment\"># 删除文件的历史记录</span>\n<span class=\"token function\">git</span> filter-branch <span class=\"token parameter variable\">--force</span> --index-filter <span class=\"token string\">'git rm --cached --ignore-unmatch 文件名'</span> --prune-empty --tag-name-filter <span class=\"token function\">cat</span> -- <span class=\"token parameter variable\">--all</span>\n\n<span class=\"token function\">git</span> filter-branch --index-filter <span class=\"token comment\"># 让每个提交的文件都复制到索引(.git/index)中 然后运行过滤器命令：git rm --cached --ignore-unmatch文件名，让每个提交都删除掉“文件名”文件,然后--prune-empty 把空的提交“修剪”掉,然后--tag-name-filter cat把每个tag保持原名字，指向修改后的对应提交,最后-- --all将所有ref（包括branch、tag）都执行上面的重写</span>\n\n<span class=\"token comment\"># 删除缓存下来的ref和git操作记录</span>\n<span class=\"token function\">git</span> for-each-ref <span class=\"token parameter variable\">--format</span><span class=\"token operator\">=</span><span class=\"token string\">'delete %(refname)'</span> refs/original <span class=\"token operator\">|</span> <span class=\"token function\">git</span> update-ref <span class=\"token parameter variable\">--stdin</span>\n<span class=\"token function\">git</span> reflog expire <span class=\"token parameter variable\">--expire</span><span class=\"token operator\">=</span>now <span class=\"token parameter variable\">--all</span>\n\n<span class=\"token comment\"># 垃圾回收</span>\n<span class=\"token comment\"># 上面2步把大文件的索引都切断了，这个时候进行垃圾回收，就可以很明显看到效果了</span>\n<span class=\"token function\">git</span> gc <span class=\"token parameter variable\">--prune</span><span class=\"token operator\">=</span>now\n<span class=\"token comment\"># 把.git里面的修改推上去,这个时候普通的push是不行的，需要强推</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--force</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"设置Git短命令\"><a href=\"#设置Git短命令\" class=\"headerlink\" title=\"设置Git短命令\"></a>设置Git短命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 方式一</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.ps push\n<span class=\"token comment\"># 方式二 打开全局配置文件</span>\n<span class=\"token function\">vim</span> ~/.gitconfig\n<span class=\"token comment\"># 写入内容</span>\n<span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span> \n        co <span class=\"token operator\">=</span> checkout\n        <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> push\n        pl <span class=\"token operator\">=</span> pull\n        mer <span class=\"token operator\">=</span> merge --no-ff\n        <span class=\"token function\">cp</span> <span class=\"token operator\">=</span> cherry-pick\n<span class=\"token comment\"># 使用</span>\n<span class=\"token comment\"># 等同于 git cherry-pick &lt;commitHash></span>\n<span class=\"token function\">git</span> <span class=\"token function\">cp</span> <span class=\"token operator\">&lt;</span>commitHash<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ct6GWiE_hzoXUNeriLAnng\">Git不要只会pull和push，试试这5条提高效率的命令</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MM7sQiFPh2vIuGvg1-813Q\">Git各指令的本质，真是通俗易懂啊！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/csEgAjJwH75_IvAnFBIuvw\">Git科普文，Git基本原理&amp;各种骚操作</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/xoyQ4TzVKLQb2VjZJLUqFQ\">一文快速掌握Git用法</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wtPizZ3RlwY3Ex1Lc3Pf4A\">精心整理：Git从入门到精通、包教包会、收藏一下、随时学习</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OchvVMGoBzSFWhou4WhrWw\">大牛总结的Git使用技巧，写得太好了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/q6tI0qctvciJhNz_5KLx-w\">通过.git目录深入理解Git！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/KwTsWyFh07iYdfINqo9UTg\">Git命令全方位学习</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TW_qUWRVEnberle5q0ws9Q\">图解Git，一目了然！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/dYiWQQ5PsSS7F7z7cDLEuw\">Git代码防丢指南，再也不怕丢失代码了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/XB_G7TZqBX8r3CJlvqA0Cg\">20个最常用的Git命令，你都会用吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Fa8mmQpNZ1S80Kg9Oyocbw\">45个GIT经典操作场景，专治不会合代码</a></li>\n<li><a href=\"https://github.com/521xueweihan/git-tips\">Git的奇技淫巧</a></li>\n</ul>\n","more":"<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><h4 id=\"上传git仓库\"><a href=\"#上传git仓库\" class=\"headerlink\" title=\"上传git仓库\"></a>上传git仓库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建.git目录</span>\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"init\"</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/xmxe/project.git\n<span class=\"token comment\"># 断开连接</span>\n<span class=\"token function\">git</span> remote remove origin\n<span class=\"token comment\"># 增加一个新的远程仓库</span>\n<span class=\"token comment\">#git remote add name url</span>\n<span class=\"token comment\"># 删除指定远程仓库</span>\n<span class=\"token comment\">#git remote remove name</span>\n<span class=\"token comment\"># 获取指定远程仓库的详细信息</span>\n<span class=\"token comment\">#git remote show origin</span>\n\n<span class=\"token function\">git</span> pull <span class=\"token parameter variable\">--rebase</span> origin master \n<span class=\"token function\">git</span> push origin master\n<span class=\"token comment\"># git push --set-upstream origin master</span>\n\n<span class=\"token comment\"># 本地生成ssh密钥</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"你的邮箱\"</span>生成sshkey\n<span class=\"token function\">git</span> remote set-url origin git@github.com:xmxe/springcloud.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 可以查看当前没有add的内容修改（不在缓冲区的文件变化）</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span>\n<span class=\"token comment\"># 查看已经add但没有commit的改动（在缓冲区的文件变化）</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--cached</span>\n<span class=\"token comment\"># 是上面两条命令的合并</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> HEAD\n<span class=\"token comment\"># 查看文件和另一个分支的区别</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> branch-name file-name\n<span class=\"token comment\"># 查看两次提交的区别</span>\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> commit-id commit-id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将未commit的文件移出Staging区</span>\n<span class=\"token function\">git</span> reset HEAD\n<span class=\"token comment\"># 重置Staging区与上次commit的一样</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span>  \n<span class=\"token comment\"># 重置Commit代码和远程分支代码一样</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> origin/master\n<span class=\"token comment\"># 回退到上个commit 删除工作空间改动代码，撤销commit，撤销git add</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^\n<span class=\"token comment\"># 回退到前3次提交之前，以此类推，回退到n次提交之前</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD~3\n<span class=\"token comment\"># 撤销git add操作（已经将文件添加到暂存区）不加filename就是上一次add里面的全部撤销了</span>\n<span class=\"token function\">git</span> reset HEAD filename\n<span class=\"token comment\"># 回退到指定版本 --hard强制将暂存区和工作目录都同步到你指定的提交</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> commitid\n<span class=\"token comment\"># 不删除工作空间改动代码，撤销commit，不撤销git add</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> HEAD^\n<span class=\"token comment\"># 不删除工作空间改动代码，撤销commit，并且撤销git add操作。这个为默认参数,git reset --mixed HEAD^和git reset HEAD^效果是一样的。</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--mixed</span> HEAD^<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h4><blockquote>\n<p>应用场景：有一天测试突然跟你说，你开发上线的功能有问题，需要马上撤回，否则会影响到系统使用。这时可能会想到用reset回退，可是你看了看分支上最新的提交还有其他同事的代码，用reset会把这部分代码也撤回了。由于情况紧急，又想不到好方法，还是任性的使用reset，然后再让同事把他的代码合一遍（同事听到想打人），于是你的技术形象在同事眼里一落千丈</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 回退到指定版本。与git reset --hard commitid相比区别是在我们确认了在需要回退的版本之后的提交都可以不需要的时候，我们可以直接使用git reset命令，但是当我们只是需要撤销某个版本的时候，后面的提交还需要保留，我们就可以使用git revert.revert会生成一条新的提交记录，这时会让你编辑提交信息，编辑完后:wq保存退出就好了。-n/--no edit：这个选项不会打开文本编辑器。它将直接恢复上次的提交。</span>\n<span class=\"token function\">git</span> revert <span class=\"token parameter variable\">-n</span> commitid\n<span class=\"token comment\"># 撤销前一次commit ,此次操作之前和之后的commit都会被保留，并且会把这次撤销作为一次最新的提交</span>\n<span class=\"token function\">git</span> revert HEAD\n<span class=\"token comment\"># 撤销前前一次commit</span>\n<span class=\"token function\">git</span> revert HEAD^<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># (git add -u + git commit -m \"\"组合)</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-am</span> <span class=\"token string\">''</span>\n<span class=\"token comment\"># 修改commit信息</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span>\n<span class=\"token comment\"># 使用新的一次commit，来覆盖上一次commit</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"message\"</span>\n<span class=\"token comment\"># 提交Staging中在指定文件到本地仓库区</span>\n<span class=\"token function\">git</span> commit file1 file2 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"message\n# 修改上次提交的用户名和邮箱\ngit commit --amend --author=\"</span>name <span class=\"token operator\">&lt;</span>email<span class=\"token operator\">></span>\" --no-edit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span> <span class=\"token comment\"># 保存所有的修改</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 保存新的添加和修改，但是不包括删除</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-u</span> <span class=\"token comment\"># 保存修改和删除，但是不包括新建文件。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看本地分支(不包括远程分支)</span>\n<span class=\"token function\">git</span> branch\n<span class=\"token comment\"># 查看远程分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span>\n<span class=\"token comment\"># 列出本地所有分支 并显示最后一次提交的哈希值</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-v</span>\n<span class=\"token comment\"># 在-v的基础上 并且显示上游分支的名字</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-vv</span>\n<span class=\"token comment\"># 列出上游所有分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span>\n<span class=\"token comment\"># 创建分支(未切换)</span>\n<span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 删除分支，不能删除当前所在分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 设置分支上游</span>\n<span class=\"token function\">git</span> branch --set-upstream-to origin/master\n<span class=\"token comment\"># 建立本地分支和远程分支的关联</span>\n<span class=\"token function\">git</span> branch --set-upstream branch-name origin/branch-name\n\n<span class=\"token comment\"># 远程分支重命名</span>\n<span class=\"token comment\"># 远程分支是指：假设你当前已经将该分支推送到远程了，这种情况修改起来要稍微多几步</span>\n<span class=\"token comment\"># 1.先重命名本地分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> 旧分支名称 新分支名称\n<span class=\"token comment\"># 2.删除远程分支</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--delete</span> origin 旧分支名称\n<span class=\"token comment\"># 3.上传新修改名称的本地分支</span>\n<span class=\"token function\">git</span> push origin 新分支名称\n<span class=\"token comment\">#4.修改后的本地分支关联远程分支</span>\n<span class=\"token function\">git</span> branch --set-upstream-to origin/新分支名称\n\n<span class=\"token comment\"># 远程仓库修改分支后与本地仓库同步</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> master <span class=\"token number\">2021</span>.x\n<span class=\"token function\">git</span> fetch origin\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-u</span> origin/2021.x <span class=\"token number\">2021</span>.x\n<span class=\"token function\">git</span> remote set-head origin <span class=\"token parameter variable\">-a</span>\n\n<span class=\"token comment\"># 下载所有分支</span>\n<span class=\"token comment\"># git clone下载的是默认分支,分支较少的话可以使用git branch -a查看所有远程分支然后使用git checkout 分支名来下载其他分支</span>\n<span class=\"token comment\"># 如果分支较多的话使用--bare,裸仓库(bare repository)指的是除了git仓库不包含其他工作文件的仓库，可以通过git clone --bare来生成。</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--bare</span> https://github.com/xx/project.git .git\n<span class=\"token comment\"># 或者git config --unset core.bare</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--bool</span> core.bare <span class=\"token boolean\">false</span>\n<span class=\"token comment\"># 上面的命令执行完,再执行该命令,就可以看到仓库里面的内容了</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 切换分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 创建+切换分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 创建本地分支并关联远程分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> local-branch origin/remote-branch\n<span class=\"token comment\"># 丢弃某个文件工作区的修改（还原修改过的文件）</span>\n<span class=\"token function\">git</span> checkout -- <span class=\"token function\">file</span>\n<span class=\"token comment\"># 放弃本地所有修改，没有提交的可以回到未修改前版本，不包括新增删除的文件</span>\n<span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># 放弃本地所有修改，包括新增删除的文件</span>\n<span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> clean <span class=\"token parameter variable\">-df</span>\n<span class=\"token comment\">#（先切换到develop分支然后把feature分支合并到develop分支）</span>\n<span class=\"token function\">git</span> checkout develop <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> merge feature\n<span class=\"token comment\"># 将某个文件回滚到某个版本</span>\n<span class=\"token function\">git</span> checkout commitid <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 删除历史提交记录</span>\n<span class=\"token comment\"># 创建孤立分支,没有以前的提交记录</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 切换到一个脱离主分支的另外一条全新主分支，不用太在意叫什么，因为后面还会修改分支名称</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> latest_branch\n<span class=\"token comment\"># 暂存所有改动过的文件，内容为当前旧分支的最新版本所有文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token comment\">#提交更改</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-am</span> <span class=\"token string\">\"commit message\"</span>\n<span class=\"token comment\">#删除原始主分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> main\n<span class=\"token comment\">#将当前分支重命名为 main</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> main\n<span class=\"token comment\">#最后，强制更新您的存储库</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-merge-amp-git-rebase\"><a href=\"#git-merge-amp-git-rebase\" class=\"headerlink\" title=\"git merge&amp;git rebase\"></a>git merge&amp;git rebase</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 合并指定分支到当前分支</span>\n<span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n<span class=\"token comment\"># 将指定分支合并到当前分支</span>\n<span class=\"token function\">git</span> rebase branch-name\n<span class=\"token comment\"># 执行commit id将rebase停留在指定commit处</span>\n<span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> commit-id\n<span class=\"token comment\"># 执行commit id将rebase停留在 项目首次commit处</span>\n<span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">--root</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"git-rebase和git-merge区别\"><a href=\"#git-rebase和git-merge区别\" class=\"headerlink\" title=\"git rebase和git merge区别\"></a>git rebase和git merge区别</h5><p>采用merge和rebase后，git log的区别，merge命令不会保留merge的分支的commit，rebase会保留所有的commit：rebase会把你当前分支的commit放到公共分支的最后面,所以叫变基。就好像你从公共分支又重新拉出来这个分支一样。举例:如果你从master拉了个feature分支出来,然后你提交了几个commit,这个时候刚好有人把他开发的东西合并到master了,这个时候master就比你拉分支的时候多了几个commit,如果这个时候你rebase master的话，就会把你当前的几个commit，放到那个人commit的后面。merge会把公共分支和你当前的commit合并在一起，形成一个新的commit提交</p>\n<p>处理冲突的方式：（一股脑）使用merge命令合并分支，解决完冲突，执行git add .和git commit -m ‘fix conflict’。这个时候会产生一个commit。（交互式）使用rebase命令合并分支，解决完冲突，执行git add .和git rebase –continue，不会产生额外的commit。这样的好处是干净，分支上不会有无意义的解决分支的commit；坏处，如果合并的分支中存在多个commit，需要重复处理多次冲突。</p>\n<p>git pull和git pull –rebase区别：git pull做了两个操作分别是‘获取’和合并。所以加了rebase就是以rebase的方式进行合并分支得到一条干净的分支流。</p>\n<p>git merge和git merge –no-ff的区别<br>自己尝试merge命令后，发现merge时并没有产生一个commit。不是说merge时会产生一个merge commit吗？注意：只有在冲突的时候，解决完冲突才会自动产生一个commit。如果想在没有冲突的情况下也自动生成一个commit，记录此次合并就可以用：git merge –no-ff命令,如果不加–no-ff则被合并的分支之前的commit都会被抹去，只会保留一个解决冲突后的merge commit。</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/T_8bkWI-JSP5ixdVIvVAGQ\">合并代码还在用git merge？我们都用git rebase！</a></li>\n</ul>\n<h4 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看所有标签，可以知道历史版本的tag</span>\n<span class=\"token function\">git</span> tag\n<span class=\"token comment\"># 打标签，默认为HEAD。比如git tag v1.0</span>\n<span class=\"token function\">git</span> tag <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span>\n<span class=\"token comment\"># 根据版本号打上标签</span>\n<span class=\"token function\">git</span> tag <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span> commit_id\n<span class=\"token comment\"># 创建带说明的标签。-a指定标签名，-m指定说明文字</span>\n<span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"&lt;说明>\"</span>\n<span class=\"token comment\"># 查看标签信息</span>\n<span class=\"token function\">git</span> show <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span>\n<span class=\"token comment\"># 删除标签</span>\n<span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>tagName<span class=\"token operator\">></span>\n<span class=\"token comment\"># 推送某个标签到远程</span>\n<span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>tagname<span class=\"token operator\">></span>\n<span class=\"token comment\"># 一次性推送全部尚未推送到远程的本地标签</span>\n<span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--tags</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h4><blockquote>\n<p>应用场景：某一天你正在feature分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到master分支，然后你就会看到以下报错：Your local changes to the following…因为当前有文件更改了，需要提交commit保持工作区干净才能切分支。由于情况紧急，你只有急忙commit上去，commit信息也随便写了个“暂存代码”，于是该分支提交记录就留了一条黑历史，如果你学会stash，就不用那么狼狈了。你只需要：git stash就这么简单，代码就被存起来了。当你修复完线上问题，切回feature分支，想恢复代码也只需要：git stash apply,但是恢复后，stash内容并不删除，需要用git stash drop来删除</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 保存当前未commit的代码</span>\n<span class=\"token function\">git</span> stash\n<span class=\"token comment\"># 保存当前未commit的代码并添加备注</span>\n<span class=\"token function\">git</span> stash save <span class=\"token string\">\"备注的内容\"</span>\n<span class=\"token comment\"># 列出stash的所有记录</span>\n<span class=\"token function\">git</span> stash list\n<span class=\"token comment\"># 删除stash的所有记录</span>\n<span class=\"token function\">git</span> stash <span class=\"token function\">clear</span>\n<span class=\"token comment\"># 应用最近一次的stash</span>\n<span class=\"token function\">git</span> stash apply\n<span class=\"token comment\"># 应用最近一次的stash，随后删除该记录</span>\n<span class=\"token function\">git</span> stash pop\n<span class=\"token comment\"># 删除最近的一次stash</span>\n<span class=\"token function\">git</span> stash drop\n\n<span class=\"token comment\"># 当有多条 stash，可以指定操作stash，首先使用stash list列出所有记录：</span>\n<span class=\"token function\">git</span> stash list \n<span class=\"token comment\"># stash@&#123;0&#125;: WIP on ...</span>\n<span class=\"token comment\"># stash@&#123;1&#125;: WIP on ...</span>\n<span class=\"token comment\"># stash@&#123;2&#125;: On ...</span>\n\n<span class=\"token comment\"># 应用第二条记录：</span>\n<span class=\"token function\">git</span> stash apply stash@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 删除stash@&#123;1&#125;存储的内容</span>\n<span class=\"token function\">git</span> stash drop stash@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># pop，drop 同理。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--gloabl</span> http.postBuffer <span class=\"token number\">524288000</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--gloabl</span> http.sslVerify <span class=\"token string\">\"false\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"your name\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"your email\"</span>\n<span class=\"token comment\"># 保存密码</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> credential.helper store\n<span class=\"token comment\"># 配置git图形界面编码为utf-8</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token assign-left variable\">gui.encoding</span><span class=\"token operator\">=</span>utf-8\n<span class=\"token comment\"># 设置当前项目提交代码的用户名 </span>\n<span class=\"token function\">git</span> config user.name name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 把a分支的一个提交复制到b分支</span>\n<span class=\"token comment\"># 首先复制a分支的commitid 然后切换到b分支执行</span>\n<span class=\"token function\">git</span> cherry-pick commitid\n<span class=\"token comment\"># 一次转移多个提交：将commit1和commit2两个提交应用到当前分支。</span>\n<span class=\"token function\">git</span> cherry-pick commit1 commit2\n<span class=\"token comment\"># 多个连续的commit，也可区间复制：将commit1到commit2这个区间的commit都应用到当前分支（包含commit1、commit2），commit1是最早的提交。</span>\n<span class=\"token function\">git</span> cherry-pick commit1^<span class=\"token punctuation\">..</span>commit2\n<span class=\"token comment\"># 在cherry-pick多个commit时，可能会遇到代码冲突，这时cherry-pick会停下来，让用户决定如何继续操作</span>\n<span class=\"token comment\"># 这时需要解决代码冲突，重新提交到暂存区,然后使用cherry-pick --continue让cherry-pick继续进行下去。</span>\n<span class=\"token function\">git</span> cherry-pick <span class=\"token parameter variable\">--continue</span>\n<span class=\"token comment\"># 但有时候可能需要在代码冲突后，放弃或者退出流程：放弃cherry-pick：</span>\n<span class=\"token function\">git</span> cherry-pick <span class=\"token parameter variable\">--abort</span>\n<span class=\"token comment\"># 回到操作前的样子，就像什么都没发生过。</span>\n<span class=\"token function\">git</span> cherry-pick <span class=\"token parameter variable\">--quit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 删除远程分支</span>\n<span class=\"token function\">git</span> push origin :master\n<span class=\"token comment\">#  删除远程标签</span>\n<span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> tag tag-name\n<span class=\"token comment\"># 上传本地仓库到远程分支</span>\n<span class=\"token function\">git</span> push remote branch-name\n<span class=\"token comment\"># 强行推送当前分支到远程分支</span>\n<span class=\"token function\">git</span> push remote branch-name <span class=\"token parameter variable\">--force</span>\n<span class=\"token comment\"># 推送所有分支到远程仓库</span>\n<span class=\"token function\">git</span> push remote <span class=\"token parameter variable\">--all</span>\n<span class=\"token comment\"># 推送所有标签</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--tags</span>\n<span class=\"token comment\"># 推送指定标签</span>\n<span class=\"token function\">git</span> push origin tag-name\n<span class=\"token comment\">#  删除远程标签（需要先删除本地标签）</span>\n<span class=\"token function\">git</span> push origin :refs/tags/tag-name\n<span class=\"token comment\"># 将本地dev分支push到远程master分支</span>\n<span class=\"token function\">git</span> push origin dev:master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-restore\"><a href=\"#git-restore\" class=\"headerlink\" title=\"git restore\"></a>git restore</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 恢复第一次add的文件，同git rm --cached</span>\n<span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> <span class=\"token function\">file</span>\n<span class=\"token comment\"># 移除staging区的文件，同git checkout</span>\n<span class=\"token function\">git</span> restore <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git删除github文件夹但不删除本地的-以-idea为例\"><a href=\"#git删除github文件夹但不删除本地的-以-idea为例\" class=\"headerlink\" title=\"git删除github文件夹但不删除本地的 以.idea为例\"></a>git删除github文件夹但不删除本地的 以.idea为例</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> <span class=\"token parameter variable\">--cached</span> .idea <span class=\"token comment\"># --cached不会把本地的.idea删除</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'delete .idea dir'</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"git删除大文件\"><a href=\"#git删除大文件\" class=\"headerlink\" title=\"git删除大文件\"></a>git删除大文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 显示10个最大的文件id列表</span>\n<span class=\"token function\">git</span> verify-pack <span class=\"token parameter variable\">-v</span> .git/objects/pack/pack-*.idx <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-k</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">-n</span> <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token comment\"># 根据文件id查询文件路径</span>\n<span class=\"token function\">git</span> rev-list <span class=\"token parameter variable\">--objects</span> <span class=\"token parameter variable\">--all</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 08a7475\n<span class=\"token comment\"># 删除文件的历史记录</span>\n<span class=\"token function\">git</span> filter-branch <span class=\"token parameter variable\">--force</span> --index-filter <span class=\"token string\">'git rm --cached --ignore-unmatch 文件名'</span> --prune-empty --tag-name-filter <span class=\"token function\">cat</span> -- <span class=\"token parameter variable\">--all</span>\n\n<span class=\"token function\">git</span> filter-branch --index-filter <span class=\"token comment\"># 让每个提交的文件都复制到索引(.git/index)中 然后运行过滤器命令：git rm --cached --ignore-unmatch文件名，让每个提交都删除掉“文件名”文件,然后--prune-empty 把空的提交“修剪”掉,然后--tag-name-filter cat把每个tag保持原名字，指向修改后的对应提交,最后-- --all将所有ref（包括branch、tag）都执行上面的重写</span>\n\n<span class=\"token comment\"># 删除缓存下来的ref和git操作记录</span>\n<span class=\"token function\">git</span> for-each-ref <span class=\"token parameter variable\">--format</span><span class=\"token operator\">=</span><span class=\"token string\">'delete %(refname)'</span> refs/original <span class=\"token operator\">|</span> <span class=\"token function\">git</span> update-ref <span class=\"token parameter variable\">--stdin</span>\n<span class=\"token function\">git</span> reflog expire <span class=\"token parameter variable\">--expire</span><span class=\"token operator\">=</span>now <span class=\"token parameter variable\">--all</span>\n\n<span class=\"token comment\"># 垃圾回收</span>\n<span class=\"token comment\"># 上面2步把大文件的索引都切断了，这个时候进行垃圾回收，就可以很明显看到效果了</span>\n<span class=\"token function\">git</span> gc <span class=\"token parameter variable\">--prune</span><span class=\"token operator\">=</span>now\n<span class=\"token comment\"># 把.git里面的修改推上去,这个时候普通的push是不行的，需要强推</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--force</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"设置Git短命令\"><a href=\"#设置Git短命令\" class=\"headerlink\" title=\"设置Git短命令\"></a>设置Git短命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 方式一</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.ps push\n<span class=\"token comment\"># 方式二 打开全局配置文件</span>\n<span class=\"token function\">vim</span> ~/.gitconfig\n<span class=\"token comment\"># 写入内容</span>\n<span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span> \n        co <span class=\"token operator\">=</span> checkout\n        <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> push\n        pl <span class=\"token operator\">=</span> pull\n        mer <span class=\"token operator\">=</span> merge --no-ff\n        <span class=\"token function\">cp</span> <span class=\"token operator\">=</span> cherry-pick\n<span class=\"token comment\"># 使用</span>\n<span class=\"token comment\"># 等同于 git cherry-pick &lt;commitHash></span>\n<span class=\"token function\">git</span> <span class=\"token function\">cp</span> <span class=\"token operator\">&lt;</span>commitHash<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ct6GWiE_hzoXUNeriLAnng\">Git不要只会pull和push，试试这5条提高效率的命令</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MM7sQiFPh2vIuGvg1-813Q\">Git各指令的本质，真是通俗易懂啊！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/csEgAjJwH75_IvAnFBIuvw\">Git科普文，Git基本原理&amp;各种骚操作</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/xoyQ4TzVKLQb2VjZJLUqFQ\">一文快速掌握Git用法</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wtPizZ3RlwY3Ex1Lc3Pf4A\">精心整理：Git从入门到精通、包教包会、收藏一下、随时学习</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OchvVMGoBzSFWhou4WhrWw\">大牛总结的Git使用技巧，写得太好了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/q6tI0qctvciJhNz_5KLx-w\">通过.git目录深入理解Git！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/KwTsWyFh07iYdfINqo9UTg\">Git命令全方位学习</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TW_qUWRVEnberle5q0ws9Q\">图解Git，一目了然！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/dYiWQQ5PsSS7F7z7cDLEuw\">Git代码防丢指南，再也不怕丢失代码了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/XB_G7TZqBX8r3CJlvqA0Cg\">20个最常用的Git命令，你都会用吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Fa8mmQpNZ1S80Kg9Oyocbw\">45个GIT经典操作场景，专治不会合代码</a></li>\n<li><a href=\"https://github.com/521xueweihan/git-tips\">Git的奇技淫巧</a></li>\n</ul>\n","categories":[],"tags":[{"name":"随笔","path":"api/tags/随笔.json"}]}