{"title":"事务","slug":"事务","date":"2022-09-28T08:42:28.042Z","updated":"2023-04-18T05:53:07.695Z","comments":true,"path":"api/articles/事务.json","excerpt":null,"covers":"https://pic2.zhimg.com/v2-e350688eea0fb2c0859b7b8a3abec2c8_1440w.jpg","content":"<h2 id=\"什么是事务？\"><a href=\"#什么是事务？\" class=\"headerlink\" title=\"什么是事务？\"></a>什么是事务？</h2><p><strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。</strong>相信大家应该都能背上面这句话了，下面我结合我们日常的真实开发来谈一谈。</p>\n<p>我们系统的每个业务方法可能包括了多个原子性的数据库操作，比如下面的savePerson()方法中就有两个原子性的数据库操作。这些原子性的数据库操作是有依赖的，它们要么都执行，要不就都不执行。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">savePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    personDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    personDetailDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>personDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，需要格外注意的是：<strong>事务能否生效数据库引擎是否支持事务是关键。比如常用的MySQL数据库默认使用支持事务的innodb引擎。但是，如果把数据库引擎变为myisam，那么程序也就不再支持事务了！</strong></p>\n<p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：</p>\n<blockquote>\n<ol>\n<li>将小明的余额减少1000元。</li>\n<li>将小红的余额增加1000元。</li>\n</ol>\n</blockquote>\n<p>万一在这两个操作之间突然出现错误比如银行系统崩溃或者网络故障，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrdersService</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setOrdersDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountDao <span class=\"token operator\">=</span> accountDao<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">,</span>\n                isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">,</span> readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accountMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">//小红账户多1000</span>\n\t\taccountDao<span class=\"token punctuation\">.</span><span class=\"token function\">addMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>xiaohong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//模拟突然出现的异常，比如银行中可能为突然停电等等</span>\n    \t<span class=\"token comment\">//如果没有配置事务管理的话会造成，小红账户多了1000而小明账户没有少钱</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//小王账户少1000</span>\n\t\taccountDao<span class=\"token punctuation\">.</span><span class=\"token function\">reduceMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>xiaoming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，数据库事务的ACID四大特性是事务的基础，下面简单来了解一下。</p>\n<h2 id=\"事务的特性-ACID-了解么\"><a href=\"#事务的特性-ACID-了解么\" class=\"headerlink\" title=\"事务的特性(ACID)了解么?\"></a>事务的特性(ACID)了解么?</h2><ul>\n<li><strong>原子性（Atomicity）：</strong>一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</li>\n<li><strong>一致性（Consistency）：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。</li>\n<li><strong>隔离性（Isolation）：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括未提交读（Read uncommitted）、提交读（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>\n<li>**持久性（Durability）:**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\n</ul>\n<p>参考：<a href=\"https://zh.wikipedia.org/wiki/ACID\">https://zh.wikipedia.org/wiki/ACID</a>。</p>\n<h2 id=\"详谈Spring对事务的支持\"><a href=\"#详谈Spring对事务的支持\" class=\"headerlink\" title=\"详谈Spring对事务的支持\"></a>详谈Spring对事务的支持</h2><blockquote>\n<p>⚠️再提醒一次：你的程序是否支持事务首先取决于数据库，比如使用MySQL的话，如果你选择的是innodb引擎，那么恭喜你，是可以支持事务的。但是，如果你的MySQL数据库使用的是myisam引擎的话，那不好意思，从根上就是不支持事务的。</p>\n</blockquote>\n<p>这里再提一下一个非常重要的知识点：<strong>MySQL怎么保证原子性的？</strong></p>\n<p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行<strong>回滚</strong>，在MySQL中，恢复机制是通过<strong>回滚日志（undo log）</strong>实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用<strong>回滚日志</strong>中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚之前未完成的事务。</p>\n<h3 id=\"Spring支持两种方式的事务管理\"><a href=\"#Spring支持两种方式的事务管理\" class=\"headerlink\" title=\"Spring支持两种方式的事务管理\"></a>Spring支持两种方式的事务管理</h3><h4 id=\"编程式事务管理\"><a href=\"#编程式事务管理\" class=\"headerlink\" title=\"编程式事务管理\"></a>编程式事务管理</h4><p>通过TransactionTemplate或者TransactionManager手动管理事务，实际应用中很少使用，但是对于你理解Spring事务管理原理有帮助。</p>\n<p>使用TransactionTemplate进行编程式事务管理的示例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">TransactionTemplate</span> transactionTemplate<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    transactionTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionCallbackWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doInTransactionWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> transactionStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// ....业务代码</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//回滚</span>\n                transactionStatus<span class=\"token punctuation\">.</span><span class=\"token function\">setRollbackOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用TransactionManager进行编程式事务管理的示例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactionManager</span> transactionManager<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// ....业务代码</span>\n              transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"声明式事务管理\"><a href=\"#声明式事务管理\" class=\"headerlink\" title=\"声明式事务管理\"></a>声明式事务管理</h4><p>推荐使用（代码侵入性最小），实际是通过AOP实现（基于@Transactional的全注解方式使用最多）。</p>\n<p>使用@Transactional注解进行事务管理的示例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//do something</span>\n  <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">C</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">cMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Spring事务管理接口介绍\"><a href=\"#Spring事务管理接口介绍\" class=\"headerlink\" title=\"Spring事务管理接口介绍\"></a>Spring事务管理接口介绍</h3><p>Spring框架中，事务管理相关最重要的3个接口如下：</p>\n<ul>\n<li><strong>PlatformTransactionManager</strong>：（平台）事务管理器，Spring事务策略的核心。</li>\n<li><strong>TransactionDefinition</strong>：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。</li>\n<li><strong>TransactionStatus</strong>：事务运行状态。</li>\n</ul>\n<p>我们可以把<strong>PlatformTransactionManager</strong>接口可以被看作是事务上层的管理者，而<strong>TransactionDefinition</strong>和<strong>TransactionStatus</strong>这两个接口可以看作是事务的描述。</p>\n<p><strong>PlatformTransactionManager</strong>会根据<strong>TransactionDefinition</strong>的定义比如事务超时时间、隔离级别、传播行为等来进行事务管理，而<strong>TransactionStatus</strong>接口则提供了一些方法来获取事务相应的状态比如是否新事务、是否可以回滚等等。</p>\n<h4 id=\"PlatformTransactionManager-事务管理接口\"><a href=\"#PlatformTransactionManager-事务管理接口\" class=\"headerlink\" title=\"PlatformTransactionManager:事务管理接口\"></a>PlatformTransactionManager:事务管理接口</h4><p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong>。Spring事务管理器的接口是：<strong>PlatformTransactionManager</strong>。</p>\n<p>通过这个接口，Spring为各个平台如：JDBC(DataSourceTransactionManager)、Hibernate(HibernateTransactionManager)、JPA(JpaTransactionManager)等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>\n<p><strong>PlatformTransactionManager接口的具体实现如下:</strong></p>\n<p><img src=\"https://javaguide.cn/assets/PlatformTransactionManager.bfc04603.png\" alt=\"img\"></p>\n<p>PlatformTransactionManager接口中定义了三个方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Nullable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//获得事务</span>\n    <span class=\"token class-name\">TransactionStatus</span> <span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">TransactionDefinition</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//提交事务</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//回滚事务</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>为什么要定义或者说抽象出来PlatformTransactionManager这个接口呢？</strong></p>\n<p>主要是因为要将事务管理行为抽象出来，然后不同的平台去实现它，这样我们可以保证提供给外部的行为不变，方便我们扩展。</p>\n<h4 id=\"TransactionDefinition-事务属性\"><a href=\"#TransactionDefinition-事务属性\" class=\"headerlink\" title=\"TransactionDefinition:事务属性\"></a>TransactionDefinition:事务属性</h4><p>事务管理器接口<strong>PlatformTransactionManager</strong>通过<strong>getTransaction(TransactionDefinition definition)<strong>方法来得到一个事务，这个方法里面的参数是</strong>TransactionDefinition</strong>类，这个类就定义了一些基本的事务属性。</p>\n<p><strong>什么是事务属性呢？</strong>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。</p>\n<p>事务属性包含了5个方面：</p>\n<ul>\n<li>隔离级别</li>\n<li>传播行为</li>\n<li>回滚规则</li>\n<li>是否只读</li>\n<li>事务超时</li>\n</ul>\n<p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Nullable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_SUPPORTS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_MANDATORY</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NOT_SUPPORTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NEVER</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NESTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_DEFAULT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_UNCOMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_COMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_REPEATABLE_READ</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_SERIALIZABLE</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">TIMEOUT_DEFAULT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回事务的传播行为，默认值为REQUIRED。</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回事务的隔离级别，默认值是DEFAULT</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回是否为只读事务，默认值为false</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Nullable</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"TransactionStatus-事务状态\"><a href=\"#TransactionStatus-事务状态\" class=\"headerlink\" title=\"TransactionStatus:事务状态\"></a>TransactionStatus:事务状态</h4><p>TransactionStatus接口用来记录事务的状态该接口定义了一组方法,用来获取或判断事务的相应状态信息。</p>\n<p>PlatformTransactionManager.getTransaction(…)方法返回一个TransactionStatus对象。</p>\n<p><strong>TransactionStatus接口内容如下：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionStatus</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNewTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否是新的事务</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasSavepoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否有恢复点</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRollbackOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为只回滚</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRollbackOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否为只回滚</span>\n    <span class=\"token keyword\">boolean</span> isCompleted<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否已完成</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"事务属性详解\"><a href=\"#事务属性详解\" class=\"headerlink\" title=\"事务属性详解\"></a>事务属性详解</h3><p>实际业务开发中，大家一般都是使用@Transactional注解来开启事务，但很多人并不清楚这个注解里面的参数是什么意思，有什么用。为了更好的在项目中使用事务管理，强烈推荐好好阅读一下下面的内容。</p>\n<h4 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h4><p><strong>事务传播行为是为了解决业务层方法之间互相调用的事务问题</strong>。</p>\n<p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>\n<p>举个例子：我们在A类的aMethod()方法中调用了B类的bMethod()方法。这个时候就涉及到业务层方法之间互相调用的事务问题。如果我们的bMethod()如果发生异常需要回滚，如何配置事务传播行为才能让aMethod()也跟着回滚呢？这个时候就需要事务传播行为的知识了，如果你不知道的话一定要好好看一下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_SUPPORTS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_MANDATORY</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NOT_SUPPORTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NEVER</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NESTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过，为了方便使用，Spring相应地定义了一个枚举类：Propagation</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TransactionDefinition</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Propagation</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token function\">REQUIRED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">SUPPORTS</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_SUPPORTS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">MANDATORY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_MANDATORY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">REQUIRES_NEW</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">NOT_SUPPORTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NOT_SUPPORTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">NEVER</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NEVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">NESTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NESTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>正确的事务传播行为可能的值如下</strong>：</p>\n<h5 id=\"TransactionDefinition-PROPAGATION-REQUIRED\"><a href=\"#TransactionDefinition-PROPAGATION-REQUIRED\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_REQUIRED\"></a>TransactionDefinition.PROPAGATION_REQUIRED</h5><p>使用的最多的一个事务传播行为，我们平时经常使用的@Transactional注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。也就是说：</p>\n<ul>\n<li>如果外部方法没有开启事务的话，Propagation.REQUIRED修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</li>\n<li>如果外部方法开启事务并且被Propagation.REQUIRED的话，所有Propagation.REQUIRED修饰的内部方法和外部方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</li>\n</ul>\n<p>举个例子：如果我们上面的aMethod()和bMethod()使用的都是PROPAGATION_REQUIRED传播行为的话，两者使用的就是同一个事务，只要其中一个方法回滚，整个事务均回滚。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"TransactionDefinition-PROPAGATION-REQUIRES-NEW\"><a href=\"#TransactionDefinition-PROPAGATION-REQUIRES-NEW\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_REQUIRES_NEW\"></a>TransactionDefinition.PROPAGATION_REQUIRES_NEW</h5><p>创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</p>\n<p>举个例子：如果我们上面的bMethod()使用PROPAGATION_REQUIRES_NEW事务传播行为修饰，aMethod还是用PROPAGATION_REQUIRED修饰的话。如果aMethod()发生异常回滚，bMethod()不会跟着回滚，因为bMethod()开启了独立的事务。但是，如果bMethod()抛出了未被捕获的异常并且这个异常满足事务回滚规则的话,aMethod()同样也会回滚，因为这个异常被aMethod()的事务管理机制检测到了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"TransactionDefinition-PROPAGATION-NESTED\"><a href=\"#TransactionDefinition-PROPAGATION-NESTED\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_NESTED\"></a>TransactionDefinition.PROPAGATION_NESTED</h5><p>如果当前存在事务，就在嵌套事务内执行；如果当前没有事务，就执行与TransactionDefinition.PROPAGATION_REQUIRED类似的操作。也就是说：</p>\n<ul>\n<li>在外部方法开启事务的情况下,在内部开启一个新的事务，作为嵌套事务存在。</li>\n<li>如果外部方法无事务，则单独开启一个事务，与PROPAGATION_REQUIRED类似。</li>\n</ul>\n<p>这里还是简单举个例子：如果bMethod()回滚的话，aMethod()也会回滚。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NESTED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"TransactionDefinition-PROPAGATION-MANDATORY\"><a href=\"#TransactionDefinition-PROPAGATION-MANDATORY\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_MANDATORY\"></a>TransactionDefinition.PROPAGATION_MANDATORY</h5><p>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</p>\n<p>这个使用的很少，就不举例子来说了。</p>\n<p><strong>若是错误的配置以下3种事务传播行为，事务将不会发生回滚，这里不对照案例讲解了，使用的很少。</strong></p>\n<h5 id=\"TransactionDefinition-PROPAGATION-SUPPORTS\"><a href=\"#TransactionDefinition-PROPAGATION-SUPPORTS\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_SUPPORTS\"></a>TransactionDefinition.PROPAGATION_SUPPORTS</h5><p>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p>\n<h5 id=\"TransactionDefinition-PROPAGATION-NOT-SUPPORTED\"><a href=\"#TransactionDefinition-PROPAGATION-NOT-SUPPORTED\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED\"></a>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</h5><p>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p>\n<h5 id=\"TransactionDefinition-PROPAGATION-NEVER\"><a href=\"#TransactionDefinition-PROPAGATION-NEVER\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_NEVER\"></a>TransactionDefinition.PROPAGATION_NEVER</h5><p>以非事务方式运行，如果当前存在事务，则抛出异常。</p>\n<p>更多关于事务传播行为的内容请看这篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486668&idx=2&sn=0381e8c836442f46bdc5367170234abb&chksm=cea24307f9d5ca11c96943b3ccfa1fc70dc97dd87d9c540388581f8fe6d805ff548dff5f6b5b&token=1776990505&lang=zh_CN#rd\">《太难了~面试官让我结合案例讲讲自己对Spring事务传播行为的理解。》</a></p>\n<h5 id=\"总结下Spring中的事务传播机制\"><a href=\"#总结下Spring中的事务传播机制\" class=\"headerlink\" title=\"总结下Spring中的事务传播机制\"></a>总结下Spring中的事务传播机制</h5><p>Spring事务传播机制共7中,可以分为3组+1个特殊来分析或者记忆</p>\n<ul>\n<li>REQUIRE组</li>\n</ul>\n<ol>\n<li>REQUIRED:当前存在事务则使用当前的事务,当前不存在事务则创建一个新的事务</li>\n<li>REQUIRES_NEW:创建新事务,如果已经存在事务,则把已存在的事务挂起</li>\n</ol>\n<ul>\n<li>SUPPORT组</li>\n</ul>\n<ol>\n<li>SUPPORTS:支持事务.如果当前存在事务则加入该事务,如果不存在事务则以无事务状态执行</li>\n<li>NOT_SUPPORTED:不支持事务.在无事务状态下执行,如果已经存在事务则挂起已存在的事务</li>\n</ol>\n<ul>\n<li>Exception组</li>\n</ul>\n<ol>\n<li>MANDATORY:必须在事务中执行,如果当前不存在事务,则抛出异常</li>\n<li>NEVER:不可在事务中执行,如果当前存在事务,则抛出异常</li>\n</ol>\n<ul>\n<li>NESTED:嵌套事务.如果当前存在事务,则嵌套执行,如果当前不存在事务,则开启新事务</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s/S8RXcISJA0TdJuBsOXWPcQ\">Spring事务传播行为详解</a></p>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><p>TransactionDefinition接口中定义了五个表示隔离级别的常量：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_DEFAULT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_UNCOMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_COMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_REPEATABLE_READ</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_SERIALIZABLE</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>和事务传播行为那块一样，为了方便使用，Spring也相应地定义了一个枚举类：Isolation</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Isolation</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token function\">DEFAULT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">READ_UNCOMMITTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_READ_UNCOMMITTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">READ_COMMITTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_READ_COMMITTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">REPEATABLE_READ</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_REPEATABLE_READ</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">SERIALIZABLE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_SERIALIZABLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面我依次对每一种事务隔离级别进行介绍：</p>\n<ul>\n<li><strong>TransactionDefinition.ISOLATION_DEFAULT</strong>:使用后端数据库默认的隔离级别，MySQL默认采用的REPEATABLE_READ隔离级别,Oracle默认采用的READ_COMMITTED隔离级别.</li>\n<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</strong>:最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED</strong>:允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ</strong>:对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE</strong>:最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>\n</ul>\n<p>相关阅读：<a href=\"https://javaguide.cn/database/mysql/transaction-isolation-level.html\">MySQL事务隔离级别详解</a>。</p>\n<h5 id=\"总结5种隔离级别\"><a href=\"#总结5种隔离级别\" class=\"headerlink\" title=\"总结5种隔离级别\"></a>总结5种隔离级别</h5><ol>\n<li><p>DEFAULT\t<br>使用数据库本身使用的隔离级别(oracle默认读已提交,mysql默认可重复读)</p>\n</li>\n<li><p>READ_UNCOMITTED\t<br>读未提交：事务即使未提交，却可以被别的事务读取到的，这级别的事务隔离有脏读、重复读、幻读的问题。</p>\n</li>\n<li><p>READ_COMMITED<br>读已提交：当前事务只能读取到其他事务提交的数据，这种事务的隔离级别解决了脏读问题，但还是会存在不可重复读、幻读问题。</p>\n</li>\n<li><p>REPEATABLE_READ<br>可重复读：限制了读取数据的时候，不可以进行修改，所以解决了不可重复读的问题，但是读取范围数据的时候，是可以插入数据，所以还会存在幻读问题。</p>\n</li>\n<li><p>SERLALIZABLE\t<br>串行化：事务最高的隔离级别，在该级别下，所有事务都是进行串行化顺序执行的。可以避免脏读、不可重复读与幻读所有并发问题。但是这种事务隔离级别下，事务执行很耗性能。</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://blog.csdn.net/l1394049664/article/details/81814090\">MySQL事务隔离级别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/eTbWDz8NiM8L8BbIrNiLHQ\">四个案例看懂MySQL事务隔离级别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6tRPXwXnWUW4mVfCdBlkog\">长文捋明白Spring事务！隔离性？传播性？一网打尽！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/H1VuZxC1JRUh2gAM-KZn6w\">一文详解幻读、脏读和不可重复读</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UcQdZYUP3Eb_V3XNk2dk6A\">关于幻读，该捋清楚了！</a></li>\n</ul>\n<h4 id=\"事务超时属性\"><a href=\"#事务超时属性\" class=\"headerlink\" title=\"事务超时属性\"></a>事务超时属性</h4><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在TransactionDefinition中以int的值来表示超时时间，其单位是秒，默认值为-1，这表示事务的超时时间取决于底层事务系统或者没有超时时间。</p>\n<h4 id=\"事务只读属性\"><a href=\"#事务只读属性\" class=\"headerlink\" title=\"事务只读属性\"></a>事务只读属性</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Nullable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 返回是否为只读事务，默认值为false</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于只有读取数据查询的事务，可以指定事务类型为readonly，即只读事务。只读事务不涉及数据的修改，数据库会提供一些优化手段，适合用在有多条数据库查询操作的方法中。</p>\n<p>很多人就会疑问了，为什么我一个数据查询操作还要启用事务支持呢？</p>\n<p>拿MySQL的innodb举例子，根据<a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-autocommit-commit-rollback.html\">官网</a>描述：</p>\n<blockquote>\n<p>MySQL默认对每一个新建立的连接都启用了autocommit模式。在该模式下，每一个发送到MySQL服务器的sql语句都会在一个单独的事务中进行处理，执行结束后会自动提交事务，并开启一个新的事务。</p>\n</blockquote>\n<p>但是，如果你给方法加上了Transactional注解的话，这个方法执行的所有sql会被放在一个事务中。如果声明了只读事务的话，数据库就会去优化它的执行，并不会带来其他的什么收益。</p>\n<p>如果不加Transactional，每条sql会开启一个单独的事务，中间被其它事务改了数据，都会实时读取到最新值。</p>\n<p>分享一下关于事务只读属性，其他人的解答：</p>\n<ul>\n<li>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；</li>\n<li>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持</li>\n</ul>\n<h4 id=\"事务回滚规则\"><a href=\"#事务回滚规则\" class=\"headerlink\" title=\"事务回滚规则\"></a>事务回滚规则</h4><p>这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常（RuntimeException的子类）时才会回滚，Error也会导致事务回滚，但是，在遇到检查型（Checked）异常时不会回滚。</p>\n<p><img src=\"https://javaguide.cn/assets/roollbackFor.14ef1320.png\" alt=\"img\"></p>\n<p>如果你想要回滚你定义的特定的异常类型的话，可以这样：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor<span class=\"token operator\">=</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Transactional注解使用详解\"><a href=\"#Transactional注解使用详解\" class=\"headerlink\" title=\"@Transactional注解使用详解\"></a>@Transactional注解使用详解</h3><h4 id=\"Transactional的作用范围\"><a href=\"#Transactional的作用范围\" class=\"headerlink\" title=\"@Transactional的作用范围\"></a>@Transactional的作用范围</h4><ol>\n<li><strong>方法</strong>：推荐将注解使用于方法上，不过需要注意的是：<strong>该注解只能应用到public方法上，否则不生效。</strong></li>\n<li><strong>类</strong>：如果这个注解使用在类上的话，表明该注解对该类中所有的public方法都生效。</li>\n<li><strong>接口</strong>：不推荐在接口上使用。</li>\n</ol>\n<h4 id=\"Transactional的常用配置参数\"><a href=\"#Transactional的常用配置参数\" class=\"headerlink\" title=\"@Transactional的常用配置参数\"></a>@Transactional的常用配置参数</h4><p>@Transactional注解源码如下，里面包含了基本事务属性的配置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Transactional</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transactionManager\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Propagation</span> <span class=\"token function\">propagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Isolation</span> <span class=\"token function\">isolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIMEOUT_DEFAULT</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">readOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">rollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">rollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">noRollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">noRollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@Transactional的常用配置参数总结（只列出了5个我平时比较常用的）：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性名</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">propagation</td>\n<td align=\"left\">事务的传播行为，默认值为REQUIRED，可选的值在上面介绍过</td>\n</tr>\n<tr>\n<td align=\"left\">isolation</td>\n<td align=\"left\">事务的隔离级别，默认值采用DEFAULT，可选的值在上面介绍过</td>\n</tr>\n<tr>\n<td align=\"left\">timeout</td>\n<td align=\"left\">事务的超时时间，默认值为-1（不会超时）。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td>\n</tr>\n<tr>\n<td align=\"left\">readOnly</td>\n<td align=\"left\">指定事务是否为只读事务，默认值为false。</td>\n</tr>\n<tr>\n<td align=\"left\">rollbackFor</td>\n<td align=\"left\">用于指定能够触发事务回滚的异常类型，并且可以指定多个异常类型。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Transactional事务注解原理\"><a href=\"#Transactional事务注解原理\" class=\"headerlink\" title=\"@Transactional事务注解原理\"></a>@Transactional事务注解原理</h4><p>面试中在问AOP的时候可能会被问到的一个问题。简单说下吧！</p>\n<p>我们知道，**@Transactional的工作机制是基于AOP实现的，AOP又是使用动态代理实现的。如果目标对象实现了接口，默认情况下会采用JDK的动态代理，如果目标对象没有实现了接口,会使用CGLIB动态代理。**</p>\n<p>createAopProxy()方法决定了是使用JDK还是Cglib来做动态代理，源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultAopProxyFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AopProxyFactory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">AopProxy</span> <span class=\"token function\">createAopProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AdvisedSupport</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AopConfigException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">isOptimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">isProxyTargetClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">hasNoUserSuppliedProxyInterfaces</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetClass <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetClass <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AopConfigException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TargetSource cannot determine target class: \"</span> <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"Either an interface or a target is required for proxy creation.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">isProxyClass</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdkDynamicAopProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjenesisCglibAopProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdkDynamicAopProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果一个类或者一个类中的public方法上被标注@Transactional注解的话，Spring容器就会在启动的时候为其创建一个代理类，在调用被@Transactional注解的public方法的时候，实际调用的是，TransactionInterceptor类中的invoke()方法。这个方法的作用就是在目标方法之前开启事务，方法执行过程中如果遇到异常的时候回滚事务，方法调用完成之后提交事务。</p>\n<blockquote>\n<p>TransactionInterceptor类中的invoke()方法内部实际调用的是TransactionAspectSupport类的invokeWithinTransaction()方法。由于新版本的Spring对这部分重写很大，而且用到了很多响应式编程的知识，这里就不列源码了。</p>\n</blockquote>\n<h4 id=\"SpringAOP自调用问题\"><a href=\"#SpringAOP自调用问题\" class=\"headerlink\" title=\"SpringAOP自调用问题\"></a>SpringAOP自调用问题</h4><p>若同一类中的其他没有@Transactional注解的方法内部调用有@Transactional注解的方法，有@Transactional注解的方法的事务会失效。</p>\n<p>这是由于SpringAOP代理的原因造成的，因为只有当@Transactional注解的方法在类以外被调用的时候，Spring事务管理才生效。</p>\n<p>MyService类中的method1()调用method2()就会导致method2()的事务失效。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">//......</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决办法就是避免同一类中自调用或者使用AspectJ取代Spring AOP代理。</p>\n<h4 id=\"Transactional的使用注意事项总结\"><a href=\"#Transactional的使用注意事项总结\" class=\"headerlink\" title=\"@Transactional的使用注意事项总结\"></a>@Transactional的使用注意事项总结</h4><ul>\n<li>@Transactional注解只有作用到public方法上事务才生效，不推荐在接口上使用；</li>\n<li>避免同一个类中调用@Transactional注解的方法，这样会导致事务失效；</li>\n<li>正确的设置@Transactional的rollbackFor和propagation属性，否则事务可能会回滚失败;</li>\n<li>被@Transactional注解的方法所在的类必须被Spring管理，否则不生效；</li>\n<li>底层使用的数据库必须支持事务机制，否则不生效；</li>\n</ul>\n<h4 id=\"总结事务失效的集中原因\"><a href=\"#总结事务失效的集中原因\" class=\"headerlink\" title=\"总结事务失效的集中原因\"></a>总结事务失效的集中原因</h4><ul>\n<li>数据库引擎不支持事务</li>\n<li>事务方法未被Spring管理</li>\n<li>方法使用final类型修饰</li>\n<li>非public修饰的方法</li>\n<li>同一个类中的方法相互调用</li>\n<li>未配置开启事务,数据源没有配置事务管理器</li>\n<li>方法的事务传播类型不支持事务(Propagation.NOT_SUPPORTED表示不以事务运行)</li>\n<li>异常被内部catch</li>\n<li>异常类型错误<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// update order</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/**\n * 这样事务也是不生效的，因为默认回滚的是：RuntimeException，如果你想触发其他异常的回滚，需要在注解上配置一下，如：\n * @Transactional(rollbackFor = Exception.class)\n * 这个配置仅限于Throwable异常类及其子类。\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>多线程调用,会导致两个方法不在同一个线程中，从而是两个不同的事务</li>\n</ul>\n<blockquote>\n<p><a href=\"https://javaguide.cn/system-design/framework/spring/spring-transaction.html\">原文链接</a></p>\n</blockquote>\n<h3 id=\"事务相关文章\"><a href=\"#事务相关文章\" class=\"headerlink\" title=\"事务相关文章\"></a>事务相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ZCwiz5FwUuslf6ireP8o_g\">三问Spring事务：解决什么问题？如何解决？存在什么问题?</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/J7A0rwnwpCc92IbaQ6Q6Yw\">Spring事务失效了，怎么办？(介绍的很好，包括代理相关内容,跨方法调用导致事务失效的原因)</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zMAFhZi9wYGwofasv-0aMA\">Spring事务(介绍的很详细)</a></li>\n</ul>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p>CAP理论告诉我们，一个分布式系统不可能同时满足一致(C:Consistency)，可用性(A:Availability)和分区容错性(P:Partition tolerance)这三个基本需求，最多只能同时满足其中的2个。</p>\n<p>BASE：全称：Basically Available(基本可用)，Soft state（软状态）,和Eventually consistent（最终一致性）。<br>Base理论是对CAP中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于CAP定理逐步演化而来的。其核心思想是：既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性(Eventual consistency)</p>\n<h3 id=\"2PC\"><a href=\"#2PC\" class=\"headerlink\" title=\"2PC\"></a>2PC</h3><p><strong>阶段一(准备阶段)</strong>:协调者向所有的参与者询问，是否准备好了执行事务，并开始等待各参与者的响应。执行事务各参与者节点执行事务操作，并将Undo和Redo信息记入事务日志中，各参与者向协调者反馈事务询问的响应，如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，表示事务可以执行；如果参与者没有成功执行事务，就返回No给协调者，表示事务不可以执行。</p>\n<p><strong>阶段二：在阶段二中，会根据阶段一的投票结果执行2种操作：执行事务提交，中断事务。</strong><br>执行事务提交步骤如下：<br><strong>发送提交请求</strong>：协调者向所有参与者发出commit请求。参与者收到commit请求后，会正式执行事务提交操作，并在完成提交之后释放整个事务执行期间占用的事务资源。参与者在完成事务提交之后，向协调者发送Ack信息。协调者接收到所有参与者反馈的Ack信息后，完成事务。</p>\n<p>中断事务步骤如下：<br><strong>发送回滚请求</strong>：协调者向所有参与者发出Rollback请求。参与者接收到Rollback请求后，会利用其在阶段一种记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。参与者在完成事务回滚之后，想协调者发送Ack信息。协调者接收到所有参与者反馈的Ack信息后，完成事务中断。</p>\n<p><strong>二阶段提交缺点：</strong></p>\n<ol>\n<li>同步阻塞问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。</li>\n<li>单点故障。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）</li>\n<li>数据不一致。在二阶段提交的阶段二中，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。</li>\n<li>二阶段无法解决的问题：协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。<br>由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</li>\n</ol>\n<h3 id=\"3PC\"><a href=\"#3PC\" class=\"headerlink\" title=\"3PC\"></a>3PC</h3><p>与两阶段提交不同的是，三阶段提交有两个改动点。<br><strong>引入超时机制</strong>。同时在协调者和参与者中都引入超时机制。<br>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的.如果段时间内没有收到协调者的commit请求，那么就会自动进行commit，解决了2PC单点故障的问题。</p>\n<h3 id=\"TCC\"><a href=\"#TCC\" class=\"headerlink\" title=\"TCC\"></a>TCC</h3><p>2PC要求参与者实现了XA协议，通常用来解决多个数据库之间的事务问题，比较局限。在多个系统服务利用api接口相互调用的时候，就不遵守XA协议了，这时候2PC就不适用了。现代企业多采用分布式的微服务，因此更多的是要解决多个微服务之间的分布式事务问题。<br>TCC就是一种解决多个微服务之间的分布式事务问题的方案。TCC是Try、Confirm、Cancel三个词的缩写，其本质是一个应用层面上的2PC，同样分为两个阶段：<br><strong>准备阶段</strong>：协调者调用所有的每个微服务提供的try接口，将整个全局事务涉及到的资源锁定住，若锁定成功try接口向协调者返回yes。<br><strong>提交阶段</strong>：若所有的服务的try接口在阶段一都返回yes，则进入提交阶段，协调者调用所有服务的confirm接口，各个服务进行事务提交。如果有任何一个服务的try接口在阶段一返回no或者超时，则协调者调用所有服务的cancel接口<br>这里有个关键问题，既然TCC是一种服务层面上的2PC。它是如何解决2PC无法应对宕机问题的缺陷的呢？答案是不断重试。</p>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"http://seata.io/zh-cn/\">seata官网</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YxlAtPmCZ8h_oyPStXJP_A\">一致性协议算法-2PC、3PC、Paxos、Raft、ZAB、NWR详解</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/JZnLbBrRx_fDtnsYsRs4Aw\">阿里终面：分布式事务原理</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/eczKVv7Jgt4f0Mhwaq1JXw\">分布式事务，阿里为什么钟爱TCC</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/VIuJ5ywyjfGjAWd3Fb-XWg\">七种分布式事务的解决方案，一次讲给你听！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/J3BMnwRD-Ag8BAlJQiYuhg\">对比7种分布式事务方案，还是偏爱阿里开源的Seata，真香</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hBSY7VwHu9kM_3OrJ8WDwA\">实战！阿里神器Seata实现TCC模式解决分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Aj_BECgTZWkxX-dy5sayOw\">分布式事务的6种解决方案，写得非常好！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MbPRpBudXtdfl8o4hlqNlQ\">我还不懂什么是分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494401&amp;idx=1&amp;sn=915f97e20b4cb58bea2f638389ff60e5&amp;source=41#wechat_redirect\">一文看懂分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QpOwudYMY1HMRpU6SIXjzA\">面试官：聊聊分布式事务，再说说解决方案！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/83-I7hPDuWRTTfrldHJ0VA\">看了那么多博客，还是不懂TCC，不妨看看这个案例！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/EQuVJGFi6SEj3Qj2FS-uSg\">听说TCC不支持OpenFeign</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/47efAPrm10l1Bxn1zECwvA\">五分钟带你体验一把分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/BJHmVkNrvNL87hBT8DM8vg\">XA事务水很深，小伙子我怕你把握不住</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/cZabAt7JF4QrQHERHHAWjA\">你这Saga事务保“隔离性”吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jcavJfjseBvaETAuTPnRqw\">哪种分布式事务处理方案效率最高</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6DOtO5OQyCL8bR03Z-3q9A\">一文搞明白分布式事务解决方案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA\">手把手带领小伙伴们写一个分布式事务案例</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NbnCiRwRFUZGym5vDxOoPQ\">Spring Boot多数据源如何处理事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/lwCNNCyG9wwtRHsni5pD8g\">亿级流量架构分布式事务如何实现？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ic57T3Yj2C_5tpdnM39IrQ\">SpringBoot分布式事务的解决方案（JTA+Atomic+多数据源）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/29PmqK_bzDgh8bl9SBY3Uw\">分布式事务，原理简单，写起来全是坑！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kiRD3Hmdx2b__cBWeQOTWQ\">分布式事务处理方案大PK！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wTF3LlUKtH3lzsVgCLdCpQ\">如何用RabbitMQ解决分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/XRGIO7S9q9XqAfwqWr0OsQ\">MySQL为什么需要两阶段提交？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nM81BRyQRTWab78a6KTD-g\">阿里Seata新版本终于解决了TCC模式的幂等、悬挂和空回滚问题</a></li>\n</ul>\n<h2 id=\"MySQL事务\"><a href=\"#MySQL事务\" class=\"headerlink\" title=\"MySQL事务\"></a>MySQL事务</h2><h3 id=\"并发事务带来了哪些问题\"><a href=\"#并发事务带来了哪些问题\" class=\"headerlink\" title=\"并发事务带来了哪些问题?\"></a>并发事务带来了哪些问题?</h3><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p>\n<h4 id=\"脏读（Dirtyread）\"><a href=\"#脏读（Dirtyread）\" class=\"headerlink\" title=\"脏读（Dirtyread）\"></a>脏读（Dirtyread）</h4><p>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</p>\n<p>例如：事务1读取某表中的数据A&#x3D;20，事务1修改A&#x3D;A-1，事务2读取到A&#x3D;19,事务1回滚导致对A的修改并为提交到数据库，A的值还是20。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-dirty-reading.ee15b0b9.png\" alt=\"脏读\"></p>\n<h4 id=\"丢失修改（Losttomodify）\"><a href=\"#丢失修改（Losttomodify）\" class=\"headerlink\" title=\"丢失修改（Losttomodify）\"></a>丢失修改（Losttomodify）</h4><p>在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>\n<p>例如：事务1读取某表中的数据A&#x3D;20，事务2也读取A&#x3D;20，事务1先修改A&#x3D;A-1，事务2后来也修改A&#x3D;A-1，最终结果A&#x3D;19，事务1的修改被丢失。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-missing-modifications.5b2e2bd8.png\" alt=\"丢失修改\"></p>\n<h4 id=\"不可重复读（Unrepeatableread）\"><a href=\"#不可重复读（Unrepeatableread）\" class=\"headerlink\" title=\"不可重复读（Unrepeatableread）\"></a>不可重复读（Unrepeatableread）</h4><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n<p>例如：事务1读取某表中的数据A&#x3D;20，事务2也读取A&#x3D;20，事务1修改A&#x3D;A-1，事务2再次读取A&#x3D;19，此时读取的结果和第一次读取的结果不同。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-unrepeatable-read.ff9186e1.png\" alt=\"不可重复读\"></p>\n<h4 id=\"幻读（Phantomread）\"><a href=\"#幻读（Phantomread）\" class=\"headerlink\" title=\"幻读（Phantomread）\"></a>幻读（Phantomread）</h4><p>幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n<p>例如：事务2读取某个范围的数据，事务1在这个范围插入了新的数据，事务2再次读取这个范围的数据发现相比于第一次读取的结果多了新的数据。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-phantom-read.7cba7a85.png\" alt=\"幻读\"></p>\n<h3 id=\"不可重复读和幻读有什么区别？\"><a href=\"#不可重复读和幻读有什么区别？\" class=\"headerlink\" title=\"不可重复读和幻读有什么区别？\"></a>不可重复读和幻读有什么区别？</h3><ul>\n<li>不可重复读的重点是内容修改或者记录减少比如多次读取一条记录发现其中某些记录的值被修改；</li>\n<li>幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</li>\n</ul>\n<p>幻读其实可以看作是不可重复读的一种特殊情况，单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。</p>\n<p>举个例子：执行<code>delete</code>和<code>update</code>操作的时候，可以直接对记录加锁，保证事务安全。而执行<code>insert</code>操作的时候，由于记录锁（RecordLock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（GapLock）。也就是说执行<code>insert</code>操作的时候需要依赖Next-KeyLock（RecordLock+GapLock）进行加锁来保证不出现幻读。</p>\n<h3 id=\"并发事务的控制方式有哪些？\"><a href=\"#并发事务的控制方式有哪些？\" class=\"headerlink\" title=\"并发事务的控制方式有哪些？\"></a>并发事务的控制方式有哪些？</h3><p>MySQL中并发事务的控制方式无非就两种：<strong>锁</strong>和<strong>MVCC</strong>。锁可以看作是悲观控制的模式，多版本并发控制（MVCC，Multiversionconcurrencycontrol）可以看作是乐观控制的模式。</p>\n<p><strong>锁</strong>控制方式下会通过锁来显示控制共享资源而不是通过调度手段，MySQL中主要是通过<strong>读写锁</strong>来实现并发控制。</p>\n<ul>\n<li><strong>共享锁（S锁）</strong>：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</li>\n<li><strong>排他锁（X锁）</strong>：又称写锁&#x2F;独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。</li>\n</ul>\n<p>读写锁可以做到读读并行，但是无法做到写读、写写并行。另外，根据根据锁粒度的不同，又被分为**表级锁(table-levellocking)<strong>和</strong>行级锁(row-levellocking)**。InnoDB不光支持表级锁，还支持行级锁，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说，InnoDB的性能更高。不论是表级锁还是行级锁，都存在共享锁（ShareLock，S锁）和排他锁（ExclusiveLock，X锁）这两类。</p>\n<p><strong>MVCC</strong>是多版本并发控制方法，即对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。</p>\n<p>MVCC在MySQL中实现所依赖的手段主要是:<strong>隐藏字段、readview、undolog</strong>。</p>\n<ul>\n<li>undolog:undolog用于记录某行数据的多个版本的数据。</li>\n<li>readview和隐藏字段:用来判断当前版本数据的可见性。</li>\n</ul>\n<blockquote>\n<p>关于InnoDB对MVCC的具体实现可以看这篇文章：<a href=\"https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html\">InnoDB存储引擎对MVCC的实现</a>。</p>\n</blockquote>\n<h3 id=\"SQL标准定义了哪些事务隔离级别\"><a href=\"#SQL标准定义了哪些事务隔离级别\" class=\"headerlink\" title=\"SQL标准定义了哪些事务隔离级别?\"></a>SQL标准定义了哪些事务隔离级别?</h3><p>SQL标准定义了四个隔离级别：</p>\n<ul>\n<li>**READ-UNCOMMITTED(读取未提交)**：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li>\n<li>**READ-COMMITTED(读取已提交)**：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li>\n<li>**REPEATABLE-READ(可重复读)**：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li>\n<li>**SERIALIZABLE(可串行化)**：最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">READ-UNCOMMITTED</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">READ-COMMITTED</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">REPEATABLE-READ</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">SERIALIZABLE</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<h3 id=\"MySQL的隔离级别是基于锁实现的吗？\"><a href=\"#MySQL的隔离级别是基于锁实现的吗？\" class=\"headerlink\" title=\"MySQL的隔离级别是基于锁实现的吗？\"></a>MySQL的隔离级别是基于锁实现的吗？</h3><p>MySQL的隔离级别基于锁和MVCC机制共同实现的。</p>\n<p>SERIALIZABLE隔离级别是通过锁来实现的，READ-COMMITTED和REPEATABLE-READ隔离级别是基于MVCC实现的。不过，SERIALIZABLE之外的其他隔离级别可能也需要用到锁机制，就比如REPEATABLE-READ在当前读情况下需要使用加锁读来保证不会出现幻读。</p>\n<h3 id=\"MySQL的默认隔离级别是什么\"><a href=\"#MySQL的默认隔离级别是什么\" class=\"headerlink\" title=\"MySQL的默认隔离级别是什么?\"></a>MySQL的默认隔离级别是什么?</h3><p>MySQLInnoDB存储引擎的默认支持的隔离级别是<strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT@@tx_isolation;</code>命令来查看，MySQL8.0该命令改为<code>SELECT@@transaction_isolation;</code></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@tx_isolation</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+</span>\n<span class=\"token operator\">|</span> @<span class=\"token variable\">@tx_isolation</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">REPEATABLE</span><span class=\"token operator\">-</span><span class=\"token keyword\">READ</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"相关文章-1\"><a href=\"#相关文章-1\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/TWBztovuzR3jXm9TZibTIA\">面试官灵魂的一击：你懂MySQL事务吗</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/BLmcN_hhen-lbbSlGIQcCQ\">MySQL事务的实现原理，写得太好了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/1x0GDRowziRtgNr2Bwz2Vw\">一文讲清，MySQL如何解决多事务并发问题</a></li>\n</ul>\n","more":"<h2 id=\"什么是事务？\"><a href=\"#什么是事务？\" class=\"headerlink\" title=\"什么是事务？\"></a>什么是事务？</h2><p><strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。</strong>相信大家应该都能背上面这句话了，下面我结合我们日常的真实开发来谈一谈。</p>\n<p>我们系统的每个业务方法可能包括了多个原子性的数据库操作，比如下面的savePerson()方法中就有两个原子性的数据库操作。这些原子性的数据库操作是有依赖的，它们要么都执行，要不就都不执行。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">savePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    personDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    personDetailDao<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>personDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，需要格外注意的是：<strong>事务能否生效数据库引擎是否支持事务是关键。比如常用的MySQL数据库默认使用支持事务的innodb引擎。但是，如果把数据库引擎变为myisam，那么程序也就不再支持事务了！</strong></p>\n<p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：</p>\n<blockquote>\n<ol>\n<li>将小明的余额减少1000元。</li>\n<li>将小红的余额增加1000元。</li>\n</ol>\n</blockquote>\n<p>万一在这两个操作之间突然出现错误比如银行系统崩溃或者网络故障，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrdersService</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setOrdersDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountDao <span class=\"token operator\">=</span> accountDao<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">,</span>\n                isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">,</span> readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accountMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">//小红账户多1000</span>\n\t\taccountDao<span class=\"token punctuation\">.</span><span class=\"token function\">addMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>xiaohong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//模拟突然出现的异常，比如银行中可能为突然停电等等</span>\n    \t<span class=\"token comment\">//如果没有配置事务管理的话会造成，小红账户多了1000而小明账户没有少钱</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//小王账户少1000</span>\n\t\taccountDao<span class=\"token punctuation\">.</span><span class=\"token function\">reduceMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>xiaoming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，数据库事务的ACID四大特性是事务的基础，下面简单来了解一下。</p>\n<h2 id=\"事务的特性-ACID-了解么\"><a href=\"#事务的特性-ACID-了解么\" class=\"headerlink\" title=\"事务的特性(ACID)了解么?\"></a>事务的特性(ACID)了解么?</h2><ul>\n<li><strong>原子性（Atomicity）：</strong>一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</li>\n<li><strong>一致性（Consistency）：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。</li>\n<li><strong>隔离性（Isolation）：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括未提交读（Read uncommitted）、提交读（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>\n<li>**持久性（Durability）:**事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\n</ul>\n<p>参考：<a href=\"https://zh.wikipedia.org/wiki/ACID\">https://zh.wikipedia.org/wiki/ACID</a>。</p>\n<h2 id=\"详谈Spring对事务的支持\"><a href=\"#详谈Spring对事务的支持\" class=\"headerlink\" title=\"详谈Spring对事务的支持\"></a>详谈Spring对事务的支持</h2><blockquote>\n<p>⚠️再提醒一次：你的程序是否支持事务首先取决于数据库，比如使用MySQL的话，如果你选择的是innodb引擎，那么恭喜你，是可以支持事务的。但是，如果你的MySQL数据库使用的是myisam引擎的话，那不好意思，从根上就是不支持事务的。</p>\n</blockquote>\n<p>这里再提一下一个非常重要的知识点：<strong>MySQL怎么保证原子性的？</strong></p>\n<p>我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行<strong>回滚</strong>，在MySQL中，恢复机制是通过<strong>回滚日志（undo log）</strong>实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用<strong>回滚日志</strong>中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚之前未完成的事务。</p>\n<h3 id=\"Spring支持两种方式的事务管理\"><a href=\"#Spring支持两种方式的事务管理\" class=\"headerlink\" title=\"Spring支持两种方式的事务管理\"></a>Spring支持两种方式的事务管理</h3><h4 id=\"编程式事务管理\"><a href=\"#编程式事务管理\" class=\"headerlink\" title=\"编程式事务管理\"></a>编程式事务管理</h4><p>通过TransactionTemplate或者TransactionManager手动管理事务，实际应用中很少使用，但是对于你理解Spring事务管理原理有帮助。</p>\n<p>使用TransactionTemplate进行编程式事务管理的示例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">TransactionTemplate</span> transactionTemplate<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    transactionTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionCallbackWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doInTransactionWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> transactionStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// ....业务代码</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//回滚</span>\n                transactionStatus<span class=\"token punctuation\">.</span><span class=\"token function\">setRollbackOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用TransactionManager进行编程式事务管理的示例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactionManager</span> transactionManager<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// ....业务代码</span>\n              transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"声明式事务管理\"><a href=\"#声明式事务管理\" class=\"headerlink\" title=\"声明式事务管理\"></a>声明式事务管理</h4><p>推荐使用（代码侵入性最小），实际是通过AOP实现（基于@Transactional的全注解方式使用最多）。</p>\n<p>使用@Transactional注解进行事务管理的示例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//do something</span>\n  <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">C</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">cMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Spring事务管理接口介绍\"><a href=\"#Spring事务管理接口介绍\" class=\"headerlink\" title=\"Spring事务管理接口介绍\"></a>Spring事务管理接口介绍</h3><p>Spring框架中，事务管理相关最重要的3个接口如下：</p>\n<ul>\n<li><strong>PlatformTransactionManager</strong>：（平台）事务管理器，Spring事务策略的核心。</li>\n<li><strong>TransactionDefinition</strong>：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。</li>\n<li><strong>TransactionStatus</strong>：事务运行状态。</li>\n</ul>\n<p>我们可以把<strong>PlatformTransactionManager</strong>接口可以被看作是事务上层的管理者，而<strong>TransactionDefinition</strong>和<strong>TransactionStatus</strong>这两个接口可以看作是事务的描述。</p>\n<p><strong>PlatformTransactionManager</strong>会根据<strong>TransactionDefinition</strong>的定义比如事务超时时间、隔离级别、传播行为等来进行事务管理，而<strong>TransactionStatus</strong>接口则提供了一些方法来获取事务相应的状态比如是否新事务、是否可以回滚等等。</p>\n<h4 id=\"PlatformTransactionManager-事务管理接口\"><a href=\"#PlatformTransactionManager-事务管理接口\" class=\"headerlink\" title=\"PlatformTransactionManager:事务管理接口\"></a>PlatformTransactionManager:事务管理接口</h4><p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong>。Spring事务管理器的接口是：<strong>PlatformTransactionManager</strong>。</p>\n<p>通过这个接口，Spring为各个平台如：JDBC(DataSourceTransactionManager)、Hibernate(HibernateTransactionManager)、JPA(JpaTransactionManager)等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>\n<p><strong>PlatformTransactionManager接口的具体实现如下:</strong></p>\n<p><img src=\"https://javaguide.cn/assets/PlatformTransactionManager.bfc04603.png\" alt=\"img\"></p>\n<p>PlatformTransactionManager接口中定义了三个方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Nullable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//获得事务</span>\n    <span class=\"token class-name\">TransactionStatus</span> <span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">TransactionDefinition</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//提交事务</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//回滚事务</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransactionException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>为什么要定义或者说抽象出来PlatformTransactionManager这个接口呢？</strong></p>\n<p>主要是因为要将事务管理行为抽象出来，然后不同的平台去实现它，这样我们可以保证提供给外部的行为不变，方便我们扩展。</p>\n<h4 id=\"TransactionDefinition-事务属性\"><a href=\"#TransactionDefinition-事务属性\" class=\"headerlink\" title=\"TransactionDefinition:事务属性\"></a>TransactionDefinition:事务属性</h4><p>事务管理器接口<strong>PlatformTransactionManager</strong>通过<strong>getTransaction(TransactionDefinition definition)<strong>方法来得到一个事务，这个方法里面的参数是</strong>TransactionDefinition</strong>类，这个类就定义了一些基本的事务属性。</p>\n<p><strong>什么是事务属性呢？</strong>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。</p>\n<p>事务属性包含了5个方面：</p>\n<ul>\n<li>隔离级别</li>\n<li>传播行为</li>\n<li>回滚规则</li>\n<li>是否只读</li>\n<li>事务超时</li>\n</ul>\n<p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Nullable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_SUPPORTS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_MANDATORY</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NOT_SUPPORTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NEVER</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NESTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_DEFAULT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_UNCOMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_COMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_REPEATABLE_READ</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_SERIALIZABLE</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">TIMEOUT_DEFAULT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回事务的传播行为，默认值为REQUIRED。</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getPropagationBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回事务的隔离级别，默认值是DEFAULT</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getIsolationLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回是否为只读事务，默认值为false</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Nullable</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"TransactionStatus-事务状态\"><a href=\"#TransactionStatus-事务状态\" class=\"headerlink\" title=\"TransactionStatus:事务状态\"></a>TransactionStatus:事务状态</h4><p>TransactionStatus接口用来记录事务的状态该接口定义了一组方法,用来获取或判断事务的相应状态信息。</p>\n<p>PlatformTransactionManager.getTransaction(…)方法返回一个TransactionStatus对象。</p>\n<p><strong>TransactionStatus接口内容如下：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionStatus</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNewTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否是新的事务</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasSavepoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否有恢复点</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRollbackOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置为只回滚</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRollbackOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否为只回滚</span>\n    <span class=\"token keyword\">boolean</span> isCompleted<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否已完成</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"事务属性详解\"><a href=\"#事务属性详解\" class=\"headerlink\" title=\"事务属性详解\"></a>事务属性详解</h3><p>实际业务开发中，大家一般都是使用@Transactional注解来开启事务，但很多人并不清楚这个注解里面的参数是什么意思，有什么用。为了更好的在项目中使用事务管理，强烈推荐好好阅读一下下面的内容。</p>\n<h4 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h4><p><strong>事务传播行为是为了解决业务层方法之间互相调用的事务问题</strong>。</p>\n<p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>\n<p>举个例子：我们在A类的aMethod()方法中调用了B类的bMethod()方法。这个时候就涉及到业务层方法之间互相调用的事务问题。如果我们的bMethod()如果发生异常需要回滚，如何配置事务传播行为才能让aMethod()也跟着回滚呢？这个时候就需要事务传播行为的知识了，如果你不知道的话一定要好好看一下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_SUPPORTS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_MANDATORY</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NOT_SUPPORTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NEVER</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATION_NESTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过，为了方便使用，Spring相应地定义了一个枚举类：Propagation</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TransactionDefinition</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Propagation</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token function\">REQUIRED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">SUPPORTS</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_SUPPORTS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">MANDATORY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_MANDATORY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">REQUIRES_NEW</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_REQUIRES_NEW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">NOT_SUPPORTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NOT_SUPPORTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">NEVER</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NEVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">NESTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPAGATION_NESTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>正确的事务传播行为可能的值如下</strong>：</p>\n<h5 id=\"TransactionDefinition-PROPAGATION-REQUIRED\"><a href=\"#TransactionDefinition-PROPAGATION-REQUIRED\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_REQUIRED\"></a>TransactionDefinition.PROPAGATION_REQUIRED</h5><p>使用的最多的一个事务传播行为，我们平时经常使用的@Transactional注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。也就是说：</p>\n<ul>\n<li>如果外部方法没有开启事务的话，Propagation.REQUIRED修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</li>\n<li>如果外部方法开启事务并且被Propagation.REQUIRED的话，所有Propagation.REQUIRED修饰的内部方法和外部方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</li>\n</ul>\n<p>举个例子：如果我们上面的aMethod()和bMethod()使用的都是PROPAGATION_REQUIRED传播行为的话，两者使用的就是同一个事务，只要其中一个方法回滚，整个事务均回滚。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"TransactionDefinition-PROPAGATION-REQUIRES-NEW\"><a href=\"#TransactionDefinition-PROPAGATION-REQUIRES-NEW\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_REQUIRES_NEW\"></a>TransactionDefinition.PROPAGATION_REQUIRES_NEW</h5><p>创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</p>\n<p>举个例子：如果我们上面的bMethod()使用PROPAGATION_REQUIRES_NEW事务传播行为修饰，aMethod还是用PROPAGATION_REQUIRED修饰的话。如果aMethod()发生异常回滚，bMethod()不会跟着回滚，因为bMethod()开启了独立的事务。但是，如果bMethod()抛出了未被捕获的异常并且这个异常满足事务回滚规则的话,aMethod()同样也会回滚，因为这个异常被aMethod()的事务管理机制检测到了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"TransactionDefinition-PROPAGATION-NESTED\"><a href=\"#TransactionDefinition-PROPAGATION-NESTED\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_NESTED\"></a>TransactionDefinition.PROPAGATION_NESTED</h5><p>如果当前存在事务，就在嵌套事务内执行；如果当前没有事务，就执行与TransactionDefinition.PROPAGATION_REQUIRED类似的操作。也就是说：</p>\n<ul>\n<li>在外部方法开启事务的情况下,在内部开启一个新的事务，作为嵌套事务存在。</li>\n<li>如果外部方法无事务，则单独开启一个事务，与PROPAGATION_REQUIRED类似。</li>\n</ul>\n<p>这里还是简单举个例子：如果bMethod()回滚的话，aMethod()也会回滚。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> aMethod <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">bMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NESTED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> bMethod <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//do something</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"TransactionDefinition-PROPAGATION-MANDATORY\"><a href=\"#TransactionDefinition-PROPAGATION-MANDATORY\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_MANDATORY\"></a>TransactionDefinition.PROPAGATION_MANDATORY</h5><p>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</p>\n<p>这个使用的很少，就不举例子来说了。</p>\n<p><strong>若是错误的配置以下3种事务传播行为，事务将不会发生回滚，这里不对照案例讲解了，使用的很少。</strong></p>\n<h5 id=\"TransactionDefinition-PROPAGATION-SUPPORTS\"><a href=\"#TransactionDefinition-PROPAGATION-SUPPORTS\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_SUPPORTS\"></a>TransactionDefinition.PROPAGATION_SUPPORTS</h5><p>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p>\n<h5 id=\"TransactionDefinition-PROPAGATION-NOT-SUPPORTED\"><a href=\"#TransactionDefinition-PROPAGATION-NOT-SUPPORTED\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED\"></a>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</h5><p>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p>\n<h5 id=\"TransactionDefinition-PROPAGATION-NEVER\"><a href=\"#TransactionDefinition-PROPAGATION-NEVER\" class=\"headerlink\" title=\"TransactionDefinition.PROPAGATION_NEVER\"></a>TransactionDefinition.PROPAGATION_NEVER</h5><p>以非事务方式运行，如果当前存在事务，则抛出异常。</p>\n<p>更多关于事务传播行为的内容请看这篇文章：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486668&idx=2&sn=0381e8c836442f46bdc5367170234abb&chksm=cea24307f9d5ca11c96943b3ccfa1fc70dc97dd87d9c540388581f8fe6d805ff548dff5f6b5b&token=1776990505&lang=zh_CN#rd\">《太难了~面试官让我结合案例讲讲自己对Spring事务传播行为的理解。》</a></p>\n<h5 id=\"总结下Spring中的事务传播机制\"><a href=\"#总结下Spring中的事务传播机制\" class=\"headerlink\" title=\"总结下Spring中的事务传播机制\"></a>总结下Spring中的事务传播机制</h5><p>Spring事务传播机制共7中,可以分为3组+1个特殊来分析或者记忆</p>\n<ul>\n<li>REQUIRE组</li>\n</ul>\n<ol>\n<li>REQUIRED:当前存在事务则使用当前的事务,当前不存在事务则创建一个新的事务</li>\n<li>REQUIRES_NEW:创建新事务,如果已经存在事务,则把已存在的事务挂起</li>\n</ol>\n<ul>\n<li>SUPPORT组</li>\n</ul>\n<ol>\n<li>SUPPORTS:支持事务.如果当前存在事务则加入该事务,如果不存在事务则以无事务状态执行</li>\n<li>NOT_SUPPORTED:不支持事务.在无事务状态下执行,如果已经存在事务则挂起已存在的事务</li>\n</ol>\n<ul>\n<li>Exception组</li>\n</ul>\n<ol>\n<li>MANDATORY:必须在事务中执行,如果当前不存在事务,则抛出异常</li>\n<li>NEVER:不可在事务中执行,如果当前存在事务,则抛出异常</li>\n</ol>\n<ul>\n<li>NESTED:嵌套事务.如果当前存在事务,则嵌套执行,如果当前不存在事务,则开启新事务</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s/S8RXcISJA0TdJuBsOXWPcQ\">Spring事务传播行为详解</a></p>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><p>TransactionDefinition接口中定义了五个表示隔离级别的常量：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_DEFAULT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_UNCOMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_READ_COMMITTED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_REPEATABLE_READ</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token constant\">ISOLATION_SERIALIZABLE</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>和事务传播行为那块一样，为了方便使用，Spring也相应地定义了一个枚举类：Isolation</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Isolation</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token function\">DEFAULT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">READ_UNCOMMITTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_READ_UNCOMMITTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">READ_COMMITTED</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_READ_COMMITTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">REPEATABLE_READ</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_REPEATABLE_READ</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">SERIALIZABLE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATION_SERIALIZABLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面我依次对每一种事务隔离级别进行介绍：</p>\n<ul>\n<li><strong>TransactionDefinition.ISOLATION_DEFAULT</strong>:使用后端数据库默认的隔离级别，MySQL默认采用的REPEATABLE_READ隔离级别,Oracle默认采用的READ_COMMITTED隔离级别.</li>\n<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</strong>:最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED</strong>:允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ</strong>:对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE</strong>:最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>\n</ul>\n<p>相关阅读：<a href=\"https://javaguide.cn/database/mysql/transaction-isolation-level.html\">MySQL事务隔离级别详解</a>。</p>\n<h5 id=\"总结5种隔离级别\"><a href=\"#总结5种隔离级别\" class=\"headerlink\" title=\"总结5种隔离级别\"></a>总结5种隔离级别</h5><ol>\n<li><p>DEFAULT\t<br>使用数据库本身使用的隔离级别(oracle默认读已提交,mysql默认可重复读)</p>\n</li>\n<li><p>READ_UNCOMITTED\t<br>读未提交：事务即使未提交，却可以被别的事务读取到的，这级别的事务隔离有脏读、重复读、幻读的问题。</p>\n</li>\n<li><p>READ_COMMITED<br>读已提交：当前事务只能读取到其他事务提交的数据，这种事务的隔离级别解决了脏读问题，但还是会存在不可重复读、幻读问题。</p>\n</li>\n<li><p>REPEATABLE_READ<br>可重复读：限制了读取数据的时候，不可以进行修改，所以解决了不可重复读的问题，但是读取范围数据的时候，是可以插入数据，所以还会存在幻读问题。</p>\n</li>\n<li><p>SERLALIZABLE\t<br>串行化：事务最高的隔离级别，在该级别下，所有事务都是进行串行化顺序执行的。可以避免脏读、不可重复读与幻读所有并发问题。但是这种事务隔离级别下，事务执行很耗性能。</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://blog.csdn.net/l1394049664/article/details/81814090\">MySQL事务隔离级别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/eTbWDz8NiM8L8BbIrNiLHQ\">四个案例看懂MySQL事务隔离级别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6tRPXwXnWUW4mVfCdBlkog\">长文捋明白Spring事务！隔离性？传播性？一网打尽！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/H1VuZxC1JRUh2gAM-KZn6w\">一文详解幻读、脏读和不可重复读</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UcQdZYUP3Eb_V3XNk2dk6A\">关于幻读，该捋清楚了！</a></li>\n</ul>\n<h4 id=\"事务超时属性\"><a href=\"#事务超时属性\" class=\"headerlink\" title=\"事务超时属性\"></a>事务超时属性</h4><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在TransactionDefinition中以int的值来表示超时时间，其单位是秒，默认值为-1，这表示事务的超时时间取决于底层事务系统或者没有超时时间。</p>\n<h4 id=\"事务只读属性\"><a href=\"#事务只读属性\" class=\"headerlink\" title=\"事务只读属性\"></a>事务只读属性</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Nullable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionDefinition</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 返回是否为只读事务，默认值为false</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于只有读取数据查询的事务，可以指定事务类型为readonly，即只读事务。只读事务不涉及数据的修改，数据库会提供一些优化手段，适合用在有多条数据库查询操作的方法中。</p>\n<p>很多人就会疑问了，为什么我一个数据查询操作还要启用事务支持呢？</p>\n<p>拿MySQL的innodb举例子，根据<a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-autocommit-commit-rollback.html\">官网</a>描述：</p>\n<blockquote>\n<p>MySQL默认对每一个新建立的连接都启用了autocommit模式。在该模式下，每一个发送到MySQL服务器的sql语句都会在一个单独的事务中进行处理，执行结束后会自动提交事务，并开启一个新的事务。</p>\n</blockquote>\n<p>但是，如果你给方法加上了Transactional注解的话，这个方法执行的所有sql会被放在一个事务中。如果声明了只读事务的话，数据库就会去优化它的执行，并不会带来其他的什么收益。</p>\n<p>如果不加Transactional，每条sql会开启一个单独的事务，中间被其它事务改了数据，都会实时读取到最新值。</p>\n<p>分享一下关于事务只读属性，其他人的解答：</p>\n<ul>\n<li>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；</li>\n<li>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持</li>\n</ul>\n<h4 id=\"事务回滚规则\"><a href=\"#事务回滚规则\" class=\"headerlink\" title=\"事务回滚规则\"></a>事务回滚规则</h4><p>这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常（RuntimeException的子类）时才会回滚，Error也会导致事务回滚，但是，在遇到检查型（Checked）异常时不会回滚。</p>\n<p><img src=\"https://javaguide.cn/assets/roollbackFor.14ef1320.png\" alt=\"img\"></p>\n<p>如果你想要回滚你定义的特定的异常类型的话，可以这样：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor<span class=\"token operator\">=</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Transactional注解使用详解\"><a href=\"#Transactional注解使用详解\" class=\"headerlink\" title=\"@Transactional注解使用详解\"></a>@Transactional注解使用详解</h3><h4 id=\"Transactional的作用范围\"><a href=\"#Transactional的作用范围\" class=\"headerlink\" title=\"@Transactional的作用范围\"></a>@Transactional的作用范围</h4><ol>\n<li><strong>方法</strong>：推荐将注解使用于方法上，不过需要注意的是：<strong>该注解只能应用到public方法上，否则不生效。</strong></li>\n<li><strong>类</strong>：如果这个注解使用在类上的话，表明该注解对该类中所有的public方法都生效。</li>\n<li><strong>接口</strong>：不推荐在接口上使用。</li>\n</ol>\n<h4 id=\"Transactional的常用配置参数\"><a href=\"#Transactional的常用配置参数\" class=\"headerlink\" title=\"@Transactional的常用配置参数\"></a>@Transactional的常用配置参数</h4><p>@Transactional注解源码如下，里面包含了基本事务属性的配置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Transactional</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transactionManager\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Propagation</span> <span class=\"token function\">propagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Isolation</span> <span class=\"token function\">isolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIMEOUT_DEFAULT</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">readOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">rollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">rollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">noRollbackFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">noRollbackForClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@Transactional的常用配置参数总结（只列出了5个我平时比较常用的）：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性名</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">propagation</td>\n<td align=\"left\">事务的传播行为，默认值为REQUIRED，可选的值在上面介绍过</td>\n</tr>\n<tr>\n<td align=\"left\">isolation</td>\n<td align=\"left\">事务的隔离级别，默认值采用DEFAULT，可选的值在上面介绍过</td>\n</tr>\n<tr>\n<td align=\"left\">timeout</td>\n<td align=\"left\">事务的超时时间，默认值为-1（不会超时）。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td>\n</tr>\n<tr>\n<td align=\"left\">readOnly</td>\n<td align=\"left\">指定事务是否为只读事务，默认值为false。</td>\n</tr>\n<tr>\n<td align=\"left\">rollbackFor</td>\n<td align=\"left\">用于指定能够触发事务回滚的异常类型，并且可以指定多个异常类型。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Transactional事务注解原理\"><a href=\"#Transactional事务注解原理\" class=\"headerlink\" title=\"@Transactional事务注解原理\"></a>@Transactional事务注解原理</h4><p>面试中在问AOP的时候可能会被问到的一个问题。简单说下吧！</p>\n<p>我们知道，**@Transactional的工作机制是基于AOP实现的，AOP又是使用动态代理实现的。如果目标对象实现了接口，默认情况下会采用JDK的动态代理，如果目标对象没有实现了接口,会使用CGLIB动态代理。**</p>\n<p>createAopProxy()方法决定了是使用JDK还是Cglib来做动态代理，源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultAopProxyFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AopProxyFactory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">AopProxy</span> <span class=\"token function\">createAopProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AdvisedSupport</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AopConfigException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">isOptimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">isProxyTargetClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">hasNoUserSuppliedProxyInterfaces</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetClass <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetClass <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AopConfigException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TargetSource cannot determine target class: \"</span> <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"Either an interface or a target is required for proxy creation.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">isProxyClass</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdkDynamicAopProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjenesisCglibAopProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdkDynamicAopProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果一个类或者一个类中的public方法上被标注@Transactional注解的话，Spring容器就会在启动的时候为其创建一个代理类，在调用被@Transactional注解的public方法的时候，实际调用的是，TransactionInterceptor类中的invoke()方法。这个方法的作用就是在目标方法之前开启事务，方法执行过程中如果遇到异常的时候回滚事务，方法调用完成之后提交事务。</p>\n<blockquote>\n<p>TransactionInterceptor类中的invoke()方法内部实际调用的是TransactionAspectSupport类的invokeWithinTransaction()方法。由于新版本的Spring对这部分重写很大，而且用到了很多响应式编程的知识，这里就不列源码了。</p>\n</blockquote>\n<h4 id=\"SpringAOP自调用问题\"><a href=\"#SpringAOP自调用问题\" class=\"headerlink\" title=\"SpringAOP自调用问题\"></a>SpringAOP自调用问题</h4><p>若同一类中的其他没有@Transactional注解的方法内部调用有@Transactional注解的方法，有@Transactional注解的方法的事务会失效。</p>\n<p>这是由于SpringAOP代理的原因造成的，因为只有当@Transactional注解的方法在类以外被调用的时候，Spring事务管理才生效。</p>\n<p>MyService类中的method1()调用method2()就会导致method2()的事务失效。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//......</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">//......</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决办法就是避免同一类中自调用或者使用AspectJ取代Spring AOP代理。</p>\n<h4 id=\"Transactional的使用注意事项总结\"><a href=\"#Transactional的使用注意事项总结\" class=\"headerlink\" title=\"@Transactional的使用注意事项总结\"></a>@Transactional的使用注意事项总结</h4><ul>\n<li>@Transactional注解只有作用到public方法上事务才生效，不推荐在接口上使用；</li>\n<li>避免同一个类中调用@Transactional注解的方法，这样会导致事务失效；</li>\n<li>正确的设置@Transactional的rollbackFor和propagation属性，否则事务可能会回滚失败;</li>\n<li>被@Transactional注解的方法所在的类必须被Spring管理，否则不生效；</li>\n<li>底层使用的数据库必须支持事务机制，否则不生效；</li>\n</ul>\n<h4 id=\"总结事务失效的集中原因\"><a href=\"#总结事务失效的集中原因\" class=\"headerlink\" title=\"总结事务失效的集中原因\"></a>总结事务失效的集中原因</h4><ul>\n<li>数据库引擎不支持事务</li>\n<li>事务方法未被Spring管理</li>\n<li>方法使用final类型修饰</li>\n<li>非public修饰的方法</li>\n<li>同一个类中的方法相互调用</li>\n<li>未配置开启事务,数据源没有配置事务管理器</li>\n<li>方法的事务传播类型不支持事务(Propagation.NOT_SUPPORTED表示不以事务运行)</li>\n<li>异常被内部catch</li>\n<li>异常类型错误<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// update order</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/**\n * 这样事务也是不生效的，因为默认回滚的是：RuntimeException，如果你想触发其他异常的回滚，需要在注解上配置一下，如：\n * @Transactional(rollbackFor = Exception.class)\n * 这个配置仅限于Throwable异常类及其子类。\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>多线程调用,会导致两个方法不在同一个线程中，从而是两个不同的事务</li>\n</ul>\n<blockquote>\n<p><a href=\"https://javaguide.cn/system-design/framework/spring/spring-transaction.html\">原文链接</a></p>\n</blockquote>\n<h3 id=\"事务相关文章\"><a href=\"#事务相关文章\" class=\"headerlink\" title=\"事务相关文章\"></a>事务相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/ZCwiz5FwUuslf6ireP8o_g\">三问Spring事务：解决什么问题？如何解决？存在什么问题?</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/J7A0rwnwpCc92IbaQ6Q6Yw\">Spring事务失效了，怎么办？(介绍的很好，包括代理相关内容,跨方法调用导致事务失效的原因)</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zMAFhZi9wYGwofasv-0aMA\">Spring事务(介绍的很详细)</a></li>\n</ul>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p>CAP理论告诉我们，一个分布式系统不可能同时满足一致(C:Consistency)，可用性(A:Availability)和分区容错性(P:Partition tolerance)这三个基本需求，最多只能同时满足其中的2个。</p>\n<p>BASE：全称：Basically Available(基本可用)，Soft state（软状态）,和Eventually consistent（最终一致性）。<br>Base理论是对CAP中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于CAP定理逐步演化而来的。其核心思想是：既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性(Eventual consistency)</p>\n<h3 id=\"2PC\"><a href=\"#2PC\" class=\"headerlink\" title=\"2PC\"></a>2PC</h3><p><strong>阶段一(准备阶段)</strong>:协调者向所有的参与者询问，是否准备好了执行事务，并开始等待各参与者的响应。执行事务各参与者节点执行事务操作，并将Undo和Redo信息记入事务日志中，各参与者向协调者反馈事务询问的响应，如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，表示事务可以执行；如果参与者没有成功执行事务，就返回No给协调者，表示事务不可以执行。</p>\n<p><strong>阶段二：在阶段二中，会根据阶段一的投票结果执行2种操作：执行事务提交，中断事务。</strong><br>执行事务提交步骤如下：<br><strong>发送提交请求</strong>：协调者向所有参与者发出commit请求。参与者收到commit请求后，会正式执行事务提交操作，并在完成提交之后释放整个事务执行期间占用的事务资源。参与者在完成事务提交之后，向协调者发送Ack信息。协调者接收到所有参与者反馈的Ack信息后，完成事务。</p>\n<p>中断事务步骤如下：<br><strong>发送回滚请求</strong>：协调者向所有参与者发出Rollback请求。参与者接收到Rollback请求后，会利用其在阶段一种记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。参与者在完成事务回滚之后，想协调者发送Ack信息。协调者接收到所有参与者反馈的Ack信息后，完成事务中断。</p>\n<p><strong>二阶段提交缺点：</strong></p>\n<ol>\n<li>同步阻塞问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。</li>\n<li>单点故障。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）</li>\n<li>数据不一致。在二阶段提交的阶段二中，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。</li>\n<li>二阶段无法解决的问题：协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。<br>由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</li>\n</ol>\n<h3 id=\"3PC\"><a href=\"#3PC\" class=\"headerlink\" title=\"3PC\"></a>3PC</h3><p>与两阶段提交不同的是，三阶段提交有两个改动点。<br><strong>引入超时机制</strong>。同时在协调者和参与者中都引入超时机制。<br>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的.如果段时间内没有收到协调者的commit请求，那么就会自动进行commit，解决了2PC单点故障的问题。</p>\n<h3 id=\"TCC\"><a href=\"#TCC\" class=\"headerlink\" title=\"TCC\"></a>TCC</h3><p>2PC要求参与者实现了XA协议，通常用来解决多个数据库之间的事务问题，比较局限。在多个系统服务利用api接口相互调用的时候，就不遵守XA协议了，这时候2PC就不适用了。现代企业多采用分布式的微服务，因此更多的是要解决多个微服务之间的分布式事务问题。<br>TCC就是一种解决多个微服务之间的分布式事务问题的方案。TCC是Try、Confirm、Cancel三个词的缩写，其本质是一个应用层面上的2PC，同样分为两个阶段：<br><strong>准备阶段</strong>：协调者调用所有的每个微服务提供的try接口，将整个全局事务涉及到的资源锁定住，若锁定成功try接口向协调者返回yes。<br><strong>提交阶段</strong>：若所有的服务的try接口在阶段一都返回yes，则进入提交阶段，协调者调用所有服务的confirm接口，各个服务进行事务提交。如果有任何一个服务的try接口在阶段一返回no或者超时，则协调者调用所有服务的cancel接口<br>这里有个关键问题，既然TCC是一种服务层面上的2PC。它是如何解决2PC无法应对宕机问题的缺陷的呢？答案是不断重试。</p>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"http://seata.io/zh-cn/\">seata官网</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YxlAtPmCZ8h_oyPStXJP_A\">一致性协议算法-2PC、3PC、Paxos、Raft、ZAB、NWR详解</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/JZnLbBrRx_fDtnsYsRs4Aw\">阿里终面：分布式事务原理</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/eczKVv7Jgt4f0Mhwaq1JXw\">分布式事务，阿里为什么钟爱TCC</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/VIuJ5ywyjfGjAWd3Fb-XWg\">七种分布式事务的解决方案，一次讲给你听！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/J3BMnwRD-Ag8BAlJQiYuhg\">对比7种分布式事务方案，还是偏爱阿里开源的Seata，真香</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hBSY7VwHu9kM_3OrJ8WDwA\">实战！阿里神器Seata实现TCC模式解决分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Aj_BECgTZWkxX-dy5sayOw\">分布式事务的6种解决方案，写得非常好！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MbPRpBudXtdfl8o4hlqNlQ\">我还不懂什么是分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494401&amp;idx=1&amp;sn=915f97e20b4cb58bea2f638389ff60e5&amp;source=41#wechat_redirect\">一文看懂分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QpOwudYMY1HMRpU6SIXjzA\">面试官：聊聊分布式事务，再说说解决方案！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/83-I7hPDuWRTTfrldHJ0VA\">看了那么多博客，还是不懂TCC，不妨看看这个案例！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/EQuVJGFi6SEj3Qj2FS-uSg\">听说TCC不支持OpenFeign</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/47efAPrm10l1Bxn1zECwvA\">五分钟带你体验一把分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/BJHmVkNrvNL87hBT8DM8vg\">XA事务水很深，小伙子我怕你把握不住</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/cZabAt7JF4QrQHERHHAWjA\">你这Saga事务保“隔离性”吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jcavJfjseBvaETAuTPnRqw\">哪种分布式事务处理方案效率最高</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6DOtO5OQyCL8bR03Z-3q9A\">一文搞明白分布式事务解决方案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA\">手把手带领小伙伴们写一个分布式事务案例</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NbnCiRwRFUZGym5vDxOoPQ\">Spring Boot多数据源如何处理事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/lwCNNCyG9wwtRHsni5pD8g\">亿级流量架构分布式事务如何实现？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ic57T3Yj2C_5tpdnM39IrQ\">SpringBoot分布式事务的解决方案（JTA+Atomic+多数据源）</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/29PmqK_bzDgh8bl9SBY3Uw\">分布式事务，原理简单，写起来全是坑！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kiRD3Hmdx2b__cBWeQOTWQ\">分布式事务处理方案大PK！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wTF3LlUKtH3lzsVgCLdCpQ\">如何用RabbitMQ解决分布式事务</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/XRGIO7S9q9XqAfwqWr0OsQ\">MySQL为什么需要两阶段提交？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nM81BRyQRTWab78a6KTD-g\">阿里Seata新版本终于解决了TCC模式的幂等、悬挂和空回滚问题</a></li>\n</ul>\n<h2 id=\"MySQL事务\"><a href=\"#MySQL事务\" class=\"headerlink\" title=\"MySQL事务\"></a>MySQL事务</h2><h3 id=\"并发事务带来了哪些问题\"><a href=\"#并发事务带来了哪些问题\" class=\"headerlink\" title=\"并发事务带来了哪些问题?\"></a>并发事务带来了哪些问题?</h3><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p>\n<h4 id=\"脏读（Dirtyread）\"><a href=\"#脏读（Dirtyread）\" class=\"headerlink\" title=\"脏读（Dirtyread）\"></a>脏读（Dirtyread）</h4><p>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</p>\n<p>例如：事务1读取某表中的数据A&#x3D;20，事务1修改A&#x3D;A-1，事务2读取到A&#x3D;19,事务1回滚导致对A的修改并为提交到数据库，A的值还是20。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-dirty-reading.ee15b0b9.png\" alt=\"脏读\"></p>\n<h4 id=\"丢失修改（Losttomodify）\"><a href=\"#丢失修改（Losttomodify）\" class=\"headerlink\" title=\"丢失修改（Losttomodify）\"></a>丢失修改（Losttomodify）</h4><p>在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>\n<p>例如：事务1读取某表中的数据A&#x3D;20，事务2也读取A&#x3D;20，事务1先修改A&#x3D;A-1，事务2后来也修改A&#x3D;A-1，最终结果A&#x3D;19，事务1的修改被丢失。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-missing-modifications.5b2e2bd8.png\" alt=\"丢失修改\"></p>\n<h4 id=\"不可重复读（Unrepeatableread）\"><a href=\"#不可重复读（Unrepeatableread）\" class=\"headerlink\" title=\"不可重复读（Unrepeatableread）\"></a>不可重复读（Unrepeatableread）</h4><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n<p>例如：事务1读取某表中的数据A&#x3D;20，事务2也读取A&#x3D;20，事务1修改A&#x3D;A-1，事务2再次读取A&#x3D;19，此时读取的结果和第一次读取的结果不同。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-unrepeatable-read.ff9186e1.png\" alt=\"不可重复读\"></p>\n<h4 id=\"幻读（Phantomread）\"><a href=\"#幻读（Phantomread）\" class=\"headerlink\" title=\"幻读（Phantomread）\"></a>幻读（Phantomread）</h4><p>幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n<p>例如：事务2读取某个范围的数据，事务1在这个范围插入了新的数据，事务2再次读取这个范围的数据发现相比于第一次读取的结果多了新的数据。</p>\n<p><img src=\"https://javaguide.cn/assets/concurrency-consistency-issues-phantom-read.7cba7a85.png\" alt=\"幻读\"></p>\n<h3 id=\"不可重复读和幻读有什么区别？\"><a href=\"#不可重复读和幻读有什么区别？\" class=\"headerlink\" title=\"不可重复读和幻读有什么区别？\"></a>不可重复读和幻读有什么区别？</h3><ul>\n<li>不可重复读的重点是内容修改或者记录减少比如多次读取一条记录发现其中某些记录的值被修改；</li>\n<li>幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</li>\n</ul>\n<p>幻读其实可以看作是不可重复读的一种特殊情况，单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。</p>\n<p>举个例子：执行<code>delete</code>和<code>update</code>操作的时候，可以直接对记录加锁，保证事务安全。而执行<code>insert</code>操作的时候，由于记录锁（RecordLock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（GapLock）。也就是说执行<code>insert</code>操作的时候需要依赖Next-KeyLock（RecordLock+GapLock）进行加锁来保证不出现幻读。</p>\n<h3 id=\"并发事务的控制方式有哪些？\"><a href=\"#并发事务的控制方式有哪些？\" class=\"headerlink\" title=\"并发事务的控制方式有哪些？\"></a>并发事务的控制方式有哪些？</h3><p>MySQL中并发事务的控制方式无非就两种：<strong>锁</strong>和<strong>MVCC</strong>。锁可以看作是悲观控制的模式，多版本并发控制（MVCC，Multiversionconcurrencycontrol）可以看作是乐观控制的模式。</p>\n<p><strong>锁</strong>控制方式下会通过锁来显示控制共享资源而不是通过调度手段，MySQL中主要是通过<strong>读写锁</strong>来实现并发控制。</p>\n<ul>\n<li><strong>共享锁（S锁）</strong>：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</li>\n<li><strong>排他锁（X锁）</strong>：又称写锁&#x2F;独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。</li>\n</ul>\n<p>读写锁可以做到读读并行，但是无法做到写读、写写并行。另外，根据根据锁粒度的不同，又被分为**表级锁(table-levellocking)<strong>和</strong>行级锁(row-levellocking)**。InnoDB不光支持表级锁，还支持行级锁，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说，InnoDB的性能更高。不论是表级锁还是行级锁，都存在共享锁（ShareLock，S锁）和排他锁（ExclusiveLock，X锁）这两类。</p>\n<p><strong>MVCC</strong>是多版本并发控制方法，即对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。</p>\n<p>MVCC在MySQL中实现所依赖的手段主要是:<strong>隐藏字段、readview、undolog</strong>。</p>\n<ul>\n<li>undolog:undolog用于记录某行数据的多个版本的数据。</li>\n<li>readview和隐藏字段:用来判断当前版本数据的可见性。</li>\n</ul>\n<blockquote>\n<p>关于InnoDB对MVCC的具体实现可以看这篇文章：<a href=\"https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html\">InnoDB存储引擎对MVCC的实现</a>。</p>\n</blockquote>\n<h3 id=\"SQL标准定义了哪些事务隔离级别\"><a href=\"#SQL标准定义了哪些事务隔离级别\" class=\"headerlink\" title=\"SQL标准定义了哪些事务隔离级别?\"></a>SQL标准定义了哪些事务隔离级别?</h3><p>SQL标准定义了四个隔离级别：</p>\n<ul>\n<li>**READ-UNCOMMITTED(读取未提交)**：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li>\n<li>**READ-COMMITTED(读取已提交)**：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li>\n<li>**REPEATABLE-READ(可重复读)**：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li>\n<li>**SERIALIZABLE(可串行化)**：最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">READ-UNCOMMITTED</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">READ-COMMITTED</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">REPEATABLE-READ</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">SERIALIZABLE</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<h3 id=\"MySQL的隔离级别是基于锁实现的吗？\"><a href=\"#MySQL的隔离级别是基于锁实现的吗？\" class=\"headerlink\" title=\"MySQL的隔离级别是基于锁实现的吗？\"></a>MySQL的隔离级别是基于锁实现的吗？</h3><p>MySQL的隔离级别基于锁和MVCC机制共同实现的。</p>\n<p>SERIALIZABLE隔离级别是通过锁来实现的，READ-COMMITTED和REPEATABLE-READ隔离级别是基于MVCC实现的。不过，SERIALIZABLE之外的其他隔离级别可能也需要用到锁机制，就比如REPEATABLE-READ在当前读情况下需要使用加锁读来保证不会出现幻读。</p>\n<h3 id=\"MySQL的默认隔离级别是什么\"><a href=\"#MySQL的默认隔离级别是什么\" class=\"headerlink\" title=\"MySQL的默认隔离级别是什么?\"></a>MySQL的默认隔离级别是什么?</h3><p>MySQLInnoDB存储引擎的默认支持的隔离级别是<strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT@@tx_isolation;</code>命令来查看，MySQL8.0该命令改为<code>SELECT@@transaction_isolation;</code></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@tx_isolation</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+</span>\n<span class=\"token operator\">|</span> @<span class=\"token variable\">@tx_isolation</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">REPEATABLE</span><span class=\"token operator\">-</span><span class=\"token keyword\">READ</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">-----------------+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"相关文章-1\"><a href=\"#相关文章-1\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/TWBztovuzR3jXm9TZibTIA\">面试官灵魂的一击：你懂MySQL事务吗</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/BLmcN_hhen-lbbSlGIQcCQ\">MySQL事务的实现原理，写得太好了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/1x0GDRowziRtgNr2Bwz2Vw\">一文讲清，MySQL如何解决多事务并发问题</a></li>\n</ul>\n","categories":[{"name":"数据库","path":"api/categories/数据库.json"},{"name":"Spring","path":"api/categories/Spring.json"}],"tags":[]}