{"title":"我的笔记","slug":"我的笔记","date":"2022-09-29T06:09:43.618Z","updated":"2023-07-06T06:27:08.978Z","comments":true,"path":"api/articles/我的笔记.json","excerpt":null,"covers":"https://pic1.zhimg.com/v2-2a72ccd8ac9a0c889b79d9ad021ef08e_r.jpg","content":"\r\n\r\n## 代码块\r\n\r\n### 静态代码块\r\n在类被加载的时候就运行了，而且只运行一次，并且优先于各种代码块以及构造函数。如果一个类中有多个静态代码块，会按照书写顺序依次执行。静态代码块不能存在任何方法体中静态代码块不能访问普通变量\r\n\r\n### 构造代码块\r\n在创建对象时被调用，每次创建对象都会调用一次，但是优先于构造函数执行。需要注意的是，构造代码块不是优先于构造函数执行，而是依托于构造函数，也就是说，如果你不实例化对象，构造代码块是不会执行的\r\n\r\n### 普通代码块\r\n和构造代码块的区别是，构造代码块是在类中定义的，而普通代码块是在方法体中定义的。且普通代码块的执行顺序和书写顺序一致\r\n\r\n静态代码块>构造代码块（类中定义）>构造函数>普通代码块(方法中定义)\r\n\r\n\r\n## 内部类\r\n\r\n### 成员内部类\r\n也是最普通的内部类，它是外围类的一个成员，所以他是可以无限制的访问外围类的所有成员属性和方法，尽管是private的，但是外围类要访问内部类的成员属性和方法则需要通过内部类实例来访问。\r\n在成员内部类中要注意两点，第一：成员内部类中不能存在任何static的变量和方法；第二：成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类。\r\n\r\n```java\r\nOuterClass outerClass = new OuterClass();\r\nOuterClass.InnerClass innerClass = outerClass.new InnerClass();\r\ninnerClass.getOuterClass().display();\r\n```\r\n\r\n### 局部内部类\r\n有这样一种内部类，它是嵌套在方法和作用域内的，对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。\r\n\r\n### 静态内部类\r\n使用static修饰的内部类我们称之为静态内部类，不过我们更喜欢称之为嵌套内部类。静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：\r\n1. 它的创建是不需要依赖于外围类的。\r\n2. 它不能使用任何外围类的非static成员变量和方法。\r\n3. 在静态内部类中可以存在静态成员\r\n4. 静态内部类只能访问外围类的静态成员变量和方法，不能访问外围类的非静态成员变量和方法\r\n5. 非静态内部类中不能存在静态成员，非静态内部类中可以调用外围类的任何成员,不管是静态的还是非静态的\r\n6. 静态内部类可以直接创建实例不需要依赖于外围类\r\n7. 非静态内部的创建需要依赖于外围类方位\r\n8. 非静态内部类的成员需要使用非静态内部类的实例new\r\n\r\n### 匿名内部类\r\nnew父类构造器（参数列表）|实现接口（）{\r\n   //匿名内部类的类体部分\r\n}\r\n在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。\r\n1. 使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。\r\n2. 匿名内部类中是不能定义构造函数的。\r\n3. 匿名内部类中不能存在任何的静态成员变量和静态方法。\r\n4. 匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。\r\n5. 匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。\r\n\r\n```java\r\nThread thread = new Thread(new Runnable() {\r\n\t@Override\r\n\tpublic void run() {\r\n\tSystem.out.println(title);\r\n\t}\r\n });\r\n```\r\n### 使用内部类的优势\r\n封装性、实现多继承※、用匿名内部类实现回调功能、解决继承及实现接口出现同名方法的问题\r\n\r\n> [详解内部类](https://www.cnblogs.com/chenssy/p/3388487.html)\r\n> [深入理解Java：内部类](https://mp.weixin.qq.com/s/Is2Ka2R_PWZP3XZsUroLIg)\r\n> [Java内部类有坑,100%内存泄露！](https://mp.weixin.qq.com/s/u8rgIwoxnXLe8GPMrFbXpQ)\r\n\r\n## 注解\r\n\r\n**@Retention**作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）\r\n取值（RetentionPoicy）有：\r\n1. SOURCE:在源文件中有效（即源文件保留）\r\n2. CLASS:在class文件中有效（即class保留）\r\n3. RUNTIME:在运行时有效（即运行时保留）\r\n\r\n**@Target**作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）\r\n取值(ElementType)有：\r\n1. CONSTRUCTOR:用于描述构造器\r\n2. FIELD:用于描述域\r\n3. LOCAL_VARIABLE:用于描述局部变量\r\n4. METHOD:用于描述方法\r\n5. PACKAGE:用于描述包\r\n6. PARAMETER:用于描述参数\r\n7. TYPE:用于描述类、接口(包括注解类型)或enum声明\r\n8. ANNOTATION_TYPE:标明注解可以用于注解声明(应用于另一个注解上)\r\n9. TYPE_PARAMETER:表示该注解能写在类型参数的声明语句中也就是泛型上，类型参数声明如下：<T\\>，< T extends Person>\r\n10. TYPE_USE:表示注解可以在任何用到该类的地方使用\r\n\r\n\r\n**@Inherited**:标记这个注解是继承于哪个注解类(默认注解并没有继承于任何子类)\r\n**@Documented**:标记这些注解是否包含在用户文档中。\r\n**@Repeatable**:重复注解,在java8中新增了一个方法getAnnotationsByType，用于获取可重复的注解,返回类型是数组\r\n\r\n> [你知道Java中的注解是如何工作的？](https://mp.weixin.qq.com/s/kx_111lekaIzkYYYAwjwxg)\r\n> [深入理解Java：注解](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247493932&amp;idx=1&amp;sn=c8e75d1f75467f240ad749853eae4668&amp;source=41#wechat_redirect)\r\n> [JDK中注解的底层原来是这样实现的](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494076&amp;idx=2&amp;sn=ba12e71724444dfd8ce10297778682aa&amp;source=41#wechat_redirect)\r\n> [原来注解是这么实现的啊](https://mp.weixin.qq.com/s/Ggw-uPBmxZ0VDyACreMNOw)\r\n\r\n\r\n## 构建工具\r\n\r\n### maven\r\n\r\n**常用命令**\r\n\r\n- mvn package、install、deploy区别\r\n**package**命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库\r\n**install**命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库\r\n**deploy**命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库\r\n\r\n- compile(编译 打包)\r\ncompile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath中可用，同时它们也会被打包。\r\n\r\n- provided(已提供 编译不打包)\r\nprovided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。\r\n\r\n- runtime(运行时 不编译打包)\r\nruntime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已。\r\n\r\n- test (测试)\r\ntest范围依赖在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。\r\n\r\n- system (系统)\r\nMaven不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个systemPath元素。注意该范围是不推荐使用的（建议尽量去从公共或定制的Maven仓库中引用依赖）\r\n\r\n- import(导入)\r\nimport仅支持在<dependencyManagement\\>中的类型依赖项上。它表示要在指定的POM<dependencyManagement\\>部分中用有效的依赖关系列表替换的依赖关系。该scope类型的依赖项实际上不会参与限制依赖项的可传递性。\r\n\r\n- <optional\\>标签\r\nprojectA依赖projectB,projectB依赖projectC时,当projectA在maven引入projectB时,如果projectB写上<optional\\>true</optional\\>时,则projectA不依赖projectC,即projectA可以自己选择是否依赖projectC,如果不写或者是false的时候,则projectA引入projectB时,也会引入projectC,默认<optional\\>的值为false,即子项目必须依赖.但是像引入parent继承情况时,像这样\r\n```xml\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>joda-time</groupId>\r\n            <artifactId>joda-time</artifactId>\r\n            <version>2.9.9</version>\r\n            <optional>true</optional>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```\r\noptional选项在统一控制版本的情况下会失效\r\n\r\n**Maven打包跳过测试的5种方法**\r\n\r\n(1) 命令行方式\r\n```bash\r\n# -DskipTests=true,不执行测试用例,但编译测试用例类生成相应的class文件至target/test-classes下。\r\nmvn package -DskipTests=true\r\n# -Dmaven.test.skip=true,不执行测试用例,也不编译测试用例类。\r\nmvn package -Dmaven.test.skip=true\r\n```\r\n(2) pom.xml\r\n```xml\r\n<build>\r\n    <plugins>\r\n        <!-- maven打包时跳过测试 -->\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-surefire-plugin</artifactId>\r\n            <configuration>\r\n                <skip>true</skip>\r\n            </configuration>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```\r\n(3) IDEA图标Skip Tests。点击选中，再用LifeCycle中的打包就会跳过测试\r\n(4) 打开配置，找到Build,Exxcution,Deployment–>Build Tools–>Maven–>Runner，在VM option中添加-Dmaven.test.skip=true或者-DskipTests=true，就能在打包时跳过测试。\r\n(5) 打开配置，找到Build,Exxcution,Deployment–>Build Tools–>Maven–>Runner，在Properties中勾选Skip Test选项。\r\n\r\n> [说一个大家都知道的Spring Boot小细节](https://mp.weixin.qq.com/s/JD2wfLGXdujoc9DOJEZFpA)\r\n> [Maven(五)：resources、profiles标签的实践](https://mp.weixin.qq.com/s/Kt51X_VEeC_EQSw22pqB-A)\r\n> [Maven最全教程，看了必懂，99%的人都收藏了！](https://mp.weixin.qq.com/s/dEmCRy_9CtRPtOP4DViDHw)\r\n> [如何利用Maven将代码打包成第三方公共jar包？](https://mp.weixin.qq.com/s/vq6Id8g0IBRVM3xdPRYFbA)\r\n\r\n### Gradle\r\n\r\n- implementation，默认的scope,取代compile（已弃用）。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。\r\n\r\n- api,和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。\r\n\r\n- compileOnly和runtimeOnly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeOnly和Maven的provided比较接近。runtimeOnly取代了runtime（不建议使用）\r\n\r\n- testImplementation，这种依赖在测试编译时和运行时可见，类似于Maven的test作用域。\r\n\r\n- testCompileOnly和testRuntimeOnly，这两种类似于compileOnly和runtimeOnly，但是作用于测试编译时和运行时。\r\n\r\n- compileClasspath延伸compile,compileOnly,implementation。编译类路径，在编译源代码时使用。由任务使用compileJava。runtimeClasspath延伸runtimeOnly,runtime,implementation，运行时类路径包含实现的元素以及仅运行时元素。\r\n\r\n- annotationProcessor编译期间使用的注释处理器。\r\n\r\n\r\n## String相关\r\n\r\n- String.intern()是一个Native方法，底层调用C++的StringTable::intern方法实现。当通过语句str.intern()调用intern()方法后，JVM就会在当前类的常量池中查找是否存在与str等值的String，若存在则直接返回常量池中相应Strnig的引用；若不存在，则会在常量池中创建一个等值的String，然后返回这个String在常量池中的引用,通俗的讲，是将字符串放入常量池中。是一种手动将字符串加入常量池中的方法\r\n- String.toUpperCase()会在内存中新建一个字符串并不会修改原来的字符串\r\n- String对象new出来的字符串是放在堆中，直接赋值的字符串是放在常量池中的。\r\n对字符串做拼接操作，即做“+”运算，分两种情况：\r\n①表达式右边是纯字符串常量，则存放在常量池中\r\n②表达式右边存在字符串引用，则存放在堆中\r\n```java\r\nString a = \"s\"; String b = \"b\";\r\nString c = a+b;//变量形式相加底层new String()不放常量池\r\nString d = \"s\"+\"b\";//非变量形式相加放到常量池\r\nString e = \"sb\";//放到常量池\r\nString f = new String(\"sb\");//不放常量池\r\nString g = f.intern();//手动放到常量池\r\nSystem.out.println(d==e);//true\r\nSystem.out.println(c==e);//false\r\nSystem.out.println(c==f);//false\r\nSystem.out.println(c==d);//false\r\nSystem.out.println(e==f);//false\r\nSystem.out.println(e==g);//true\r\n\r\nString s1 = new String(\"计算机\");\r\nString s2 = s1.intern();\r\nString s3 = \"计算机\";\r\nSystem.out.println(s2);//计算机\r\nSystem.out.println(s1 == s2);//false，因为一个是堆内存中的String对象一个是常量池中的String对象，\r\nSystem.out.println(s3 == s2);//true，因为两个都是常量池中的String对\r\n\r\nString str1 = \"str\";\r\nString str2 = \"ing\";\r\nString str3 = \"str\" + \"ing\";//常量池中的对象\r\nString str4 = str1 + str2; //在堆上创建的新的对象\r\nString str5 = \"string\";//常量池中的对象\r\nSystem.out.println(str3 == str4);//false\r\nSystem.out.println(str3 == str5);//true\r\nSystem.out.println(str4 == str5);//false\r\n\r\nString a = \"a\";\r\nString b = a;\r\nSystem.out.pringln(\"a == b\");true\r\n```\r\n\r\n- String字符串有长度限制，在编译期，要求字符串常量池中的常量不能超过65535，并且在javac执行过程中控制了最大值为65534。\r\n在运行期，长度不能超过Int的范围，否则会抛异常。\r\n\r\n- common-lang3包StringUtils\r\n```java\r\nisEmpty// 如果是null或者“”则返回true。\r\nisBlank// 如果是null或者“”或者空格或者制表符则返回true。isBlank判空更加准确。\r\n```\r\n\r\n> [java.lang.String的+号操作，这个谜终于要解开了！](https://mp.weixin.qq.com/s/ic5K1X6DQnBN37uv9cr-mg)\r\n> [基础面试，为什么面试官总喜欢问String？](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493885&idx=1&sn=024118e8044ce958c0602db7aba2f916&source=41#wechat_redirect)\r\n> [深入Java源码剖析之字符串常量](https://mp.weixin.qq.com/s/YvHt9uKKOdYZDdipGJXQYA)\r\n> [浅谈Java中字符串的初始化及字符串操作类](https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491285&idx=1&sn=c9373feb23075bbada302740ec1a1434&source=41#wechat_redirect)\r\n> [5个刁钻的String面试题！](https://mp.weixin.qq.com/s/xJnQq8voJvAyyyaBkrvc8A)\r\n> [为什么String是不可变的？](https://mp.weixin.qq.com/s/P-ijDf5IqtAwnFzDErQOyQ)\r\n> [90%的同学都没搞清楚的Java字符串常量池问题（图文并茂）](https://mp.weixin.qq.com/s/fwRcDog9_EU3nCEmDF_jcw)\r\n> [Java中你以为的String其实并不完全正确](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494306&idx=1&sn=9184273c5833a9a363b4ebb85163c1a5&source=41#wechat_redirect)\r\n> [再议String-字符串常量池与String.intern()](https://mp.weixin.qq.com/s/TuGw1tDVj53hIurRfA360g)\r\n> [Java 9为何要将String的底层实现由char改成了byte?](https://mp.weixin.qq.com/s/AWVJIvOAMERmw7lU1th4iQ)\r\n> [关于Java字符串的全部，都在这份手册里了](https://mp.weixin.qq.com/s/iYO16IddRqAqn3D5VhURQQ)\r\n> [面试被问到了String相关的几道题，你能答上来吗？](https://mp.weixin.qq.com/s/wR-HmIn8nO2UICVmJeqgGw)\r\n\r\n\r\n## try、catch、finally\r\n\r\n1. try中的return语句先执行了但并没有立即返回，等到finally执行结束后再return\r\n2. finally块中的return语句会覆盖try块中的return返回\r\n3. 如果finally语句中没有return语句覆盖返回值，那么原来的返回值可能因为finally里的修改而改变也可能不变\r\n4. try块里的return语句在异常的情况下不会被执行，这样具体返回哪个看情况\r\n5. 当发生异常后，catch中的return执行情况与未发生异常时try中return的执行情况完全一样\r\n6. finally块的语句在try或catch中的return语句执行之后返回之前执行且finally里的修改语句可能影响也可能不影响try或catch中return已经确定的返回值，若finally里也有return语句则覆盖try或catch中的return语句直接返回。\r\n\r\n> [finally是在return之前还是之后执行](https://mp.weixin.qq.com/s/0fdehvtTYz8Off52YOT8Qg)\r\n> [面试官太难伺候？一个try-catch问出这么多花样](https://mp.weixin.qq.com/s/qYvMpbOXcJ77XQbK_MC8MA)\r\n\r\n## 几个经典问题\r\n\r\n### equals和hashcode的关系\r\n1. 如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同；\r\n2. 如果两个对象的hashCode相同，它们并不一定相同(即用equals比较返回false)\r\n\r\n### 重写equals为什么需要重写hashcode\r\n比较对象先比较hashcode，hashcode相同在比较equals。如果equals为true而hashcode不同的话就会造成hashmap的key可能会重复，因为jdk判断hashmap的key是否为重复首先判断hashcode是否一致，不一致的话直接判定不是同一个对象，而equals则判定对象为一个对象违背了hashmap的设计原则，重写hashCode方法，是为了在一些算法中避免我们不想要的冲突和碰撞\r\n\r\n### Java为什么不支持多重继承\r\n有两个类B和C继承自A；假设B和C都继承了A的方法并且进行了覆盖，编写了自己的实现；假设D通过多重继承继承了B和C，那么D应该继承B和C的重载方法，那么它应该继承的是B的还是C的？这就陷入了矛盾，所以Java不允许多重继承。\r\n\r\n### Java8中的接口和抽象类到底还有啥区别？\r\n既然接口都能写默认方法了，那么还要抽象类干嘛呢？\r\n区别1：首先抽象类是一个“类”，而接口只是一个“接口”，两者的概念和应用场景不一样，这也是抽象类和接口的主要区别。\r\n区别2：即使在Java8中接口也能写实现方法了，但却不能写构造方法，而在抽象类是可以写构造方法的，意味着抽象类是参与类的实例化过程的，而接口则不是。抽象类不可以new\r\n区别3：抽象类可以有自己的各种成员变量，并且可以通过自己的非抽象方法进行改变，而接口中的变量默认全是public static final修饰的，意味着都是常量，并且不能被自己和外部修改。\r\n区别4：接口可以实现多继承，而抽象类只能单继承\r\n\r\n### Comparable和Comparator区别\r\n- 一个类实现了Comparable接口，意味着该类的对象可以直接进行比较（排序），但比较（排序）的方式只有一种，很单一。一个类如果想要保持原样，又需要进行不同方式的比较（排序），就可以定制比较器（实现Comparator接口）。\r\n- Comparable接口在java.lang包下，而Comparator接口在java.util包下。\r\n- 如果对象的排序需要基于自然顺序，请选择Comparable，如果需要按照对象的不同属性进行排序，请选择Comparator\r\n\r\n### 过滤器和拦截器的区别\r\n1. Filter需要在web.xml中配置，依赖于Servlet；Interceptor需要在SpringMVC中配置，依赖于框架；\r\n3. Filter的执行顺序在Interceptor之前\r\n3. 两者的本质区别：拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter能做的事情，都能做，而且可以在请求前，请求后执行，比较灵活。Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），太细的话，还是建议用interceptor。不过还是根据不同情况选择合适的。\r\n5. 拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。\r\n6. 在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。init(),destroy()各一次，dofilter()多次\r\n7. 拦截的请求范围不同,过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。\r\n8. 触发时机不同，过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。拦截器Interceptor是在请求进入servlet后，在进入Controller之前进行预处理的，Controller中渲染了对应的视图之后请求结束。\r\n\r\n> [过滤器、监听器、拦截器的区别](https://zhuanlan.zhihu.com/p/69060111?utm_source=wechat_timeline&amp;utm_medium=social&amp;utm_oi=1040923520439672832&amp;from=timeline)\r\n> [一口气说出过滤器和拦截器6个区别](https://mp.weixin.qq.com/s/PzQlCjLLM1fjPc0y4poQOw)\r\n> [SpringBoot过滤器、拦截器、监听器对比及使用场景](https://mp.weixin.qq.com/s/kZx10tnBJ8a6xtDgQsN1vQ)\r\n\r\n\r\n## 泛型\r\n\r\n- `List<? extends Object >`相当于`List<?>`\r\n在Java集合框架中，对于参数值是未知类型的容器类，只能读取其中元素，不能向其中添加元素,因为，其类型是未知，所以编译器无法识别添加元素的类型和容器的类型是否兼容，唯一的例外是NULL\r\n\r\n- `List<? extends T>`可以添加元素添加的元素为T或T的子类\r\n- `List<? super T>`可以添加元素添加的元素为T或T的父类\r\n\r\n> [为了让你理解Java泛型，费了好大心思](https://mp.weixin.qq.com/s/ilqFpf5kE0XzJnOv9SsX7Q)\r\n> [泛型中的T、E、K、V，还记得嘛？](https://mp.weixin.qq.com/s/5dWCpdyXNP5PeCZM8AQVAg)\r\n\r\n## CSRF和XSS的区别\r\n1. CSRF是跨站请求伪造;XSS是跨域脚本攻击。\r\n2. CSRF需要用户先登录网站A,获取cookie;XSS不需要登录。\r\n3. CSRF是利用网站A本身的漏洞,去请求网站A的api;XSS是向网站A注入JS代码,然后执行JS里的代码,篡改网站A的内容。（XSS利用的是站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。你可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求。）\r\n\r\n\r\n## web.xml详解\r\n\r\n**<context-param\\>** 元素含有一对参数名和参数值，用作应用的Servlet上下文初始化参数，参数名在整个Web应用中必须是惟一的，在web应用的整个生命周期中上下文初始化参数都存在，任意的Servlet和jsp都可以随时随地访问它。在JSP网页中可以使用下列方法来取得：\r\n\r\n```js\r\n${initParam.param_name}\r\n```\r\n若在Servlet可以使用下列方法来获得：\r\n```java\r\nString param_name=getServletContext().getInitParamter(\"param_name\");\r\n```\r\nServlet的ServletConfig对象拥有该Servlet的ServletContext的一个引用，所以可这样取得上下文初始化参数：\r\n```java\r\ngetServletConfig().getServletContext().getInitParameter()\r\n```\r\n也可以在Servlet中直接调用\r\n```java\r\ngetServletContext().getInitParameter()，\r\n```\r\n两者是等价的。\r\n\r\n**<listener\\>** 为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：\r\n\r\n1. ServletContextListener：用于监听Web应用的启动和关闭；\r\n2. ServletContextAttributeListener：用于监听ServletContext范围（application）内属性的改变；\r\n3. ServletRequestListener：用于监听用户的请求；\r\n4. ServletRequestAttributeListener：用于监听ServletRequest范围（request）内属性的改变；\r\n5. HttpSessionListener：用于监听用户session的开始和结束；\r\n6. HttpSessionAttributeListener：用于监听HttpSession范围（session）内属性的改变\r\n\r\n**<load-on-startup\\>1</load-on-startup/\\>**\r\nload-on-startup元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)。它的值必须是一个整数，表示servlet被加载的先后顺序。如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载创建Servlet实例有两个时机较小的优先加载\r\n\r\n\r\n## 解决跨域的几种方案\r\n服务器没有同源策略，浏览器的同源策略是为了保证浏览器的安全性，实际上跨域请求会将请求发送到服务器，只不过在返回数据的时候浏览器发出跨域警告\r\n\r\n1. JSONP\r\n2. CORS\r\n服务器中编写过滤器允许跨域访问\r\n```java\r\nHttpServletResponse httpResponse = (HttpServletResponse) response;\r\n//该字段必填。它的值要么是请求时Origin字段的具体值，要么是一个*，表示接受任意域名的请求\r\nhttpResponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n//该字段必填。它的值是逗号分隔的一个具体的字符串(GET,POST...)或者*，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求\r\nhttpResponse.setHeader(\"Access-Control-Allow-Methods\", \"*\");\r\n//该字段可选，用来指定本次预检请求的有效期，单位为秒。在有效期间，不用发出另一条预检请求。\r\nhttpResponse.setHeader(\"Access-Control-Max-Age\", \"3600\");\r\nhttpResponse.setHeader(\"Access-Control-Allow-Headers\",\r\n\"Origin,X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie\");\r\nhttpResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\nhttpResponse.setHeader(\"Content-type\", \"application/json\");\r\nhttpResponse.setHeader(\"Cache-Control\", \"no-cache, must-revalidate\");\r\nchain.doFilter(request,httpResponse);\r\n```\r\n3. 反向代理工具如nginx\r\n4. 服务器没有同源策略，使用HTTPClient等技术\r\n5. 控制器添加@CrossOrigin注解\r\n\r\n\r\n## 收藏文章\r\n\r\nJava\r\n\r\n- [java关键字名单](https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491305&idx=2&sn=c8b3f2d88d16aa3ebb9f5b674dce0a55&source=41#wechat_redirect)\r\n- [Class.forName和ClassLoader到底有啥区别](https://mp.weixin.qq.com/s/qvKunFJfDuBesjJUIsJdXg)\r\n- [说说Java深拷贝和浅拷贝区别](https://mp.weixin.qq.com/s/GOSoJrArIQrctiP3ArG6lA)\r\n- [面试难缠的深拷贝浅拷贝，这次终于通透了](https://mp.weixin.qq.com/s/SQB4ZteKe7-fHFzL__6cSQ)\r\n- [简单聊聊对象浅拷贝和深拷贝，真不简单！](https://mp.weixin.qq.com/s/P1mlsdacKGF0vB566fqm3g)\r\n- [零拷贝技术在Java中为何这么牛](https://mp.weixin.qq.com/s/GSzbiVge-aoDHxYCzCTALw)\r\n- [天天都会写接口，但它的用途和好处有多少人能说得清楚？](https://mp.weixin.qq.com/s/R7JyIRnRYEEMNKZG-aEoMw)\r\n- [Java中的接口还可以这样用，你知道吗？](https://mp.weixin.qq.com/s/NN3Zy1RGpwWUIgaatAJ4HQ)\r\n- [10大Java面试难题，打趴无数面试者！](https://mp.weixin.qq.com/s/Fap6REHGxmnaHOPwp94iRA)※\r\n- [知名互联网公司Java开发岗面试知识点解析](https://mp.weixin.qq.com/s/efM15hYwgowrprWWNgbYjg)\r\n- [社招后端20问！](https://mp.weixin.qq.com/s/kbvWCme1T-_3_MaIvgH66g)\r\n- [Java面试题全梳理](https://mp.weixin.qq.com/s/3cqRu-STSX7aL_3kRQffTQ)\r\n- [oppo面试题](https://mp.weixin.qq.com/s/UZld1hKUgeBrYFrhQ_wjMQ)\r\n- [扪心自问！一百多道难搞的面试题，你能答对了多少](https://mp.weixin.qq.com/s/aj-WmrJsWnH2Utsbhurnbg)\r\n- [B站面试经历](https://mp.weixin.qq.com/s/ZbP8kBTKpnxKsogZyQL1nw)\r\n- [Java基础夺命连环16问](https://mp.weixin.qq.com/s/_JsVu1Vcj8kCl1gZc8tNXg)\r\n- [15个常见的Node.js面试问题及答案](https://mp.weixin.qq.com/s/-v3PCoVInPYpkhnO9y3SNQ)\r\n- [30道计网常考面试题含答案总结！血赚！](https://mp.weixin.qq.com/s/OY6oO-1dSxc9Flseal22zw)\r\n- [2W字！梳理50道经典计算机网络面试题（收藏版）](https://mp.weixin.qq.com/s/PlBwyJ4wpDeZ7J-PKw3sgA)\r\n- [蚂蚁金服一面：十道经典面试题解析](https://mp.weixin.qq.com/s/6KhtiAdDOljqQ4bzc7pSnw)\r\n- [美团面试题](https://mp.weixin.qq.com/s/2IUaDr5XRgWoVaGgPGsAxA)\r\n- [Java中经常被提到的SPI到底是什么](https://mp.weixin.qq.com/s/t92OtlMD_dwk1ldCVNvHBA)\r\n\r\n分布式\r\n\r\n- [Java分布式面试题集合](https://mp.weixin.qq.com/s/8L713J4zzv_PfDtfdR5CRA)\r\n- [分布式十二问！万字图文详解！](https://mp.weixin.qq.com/s/TnFsKK77uyfXkckt4m1Ctw)\r\n- [面试官：谈谈分布式一致性机制，我一脸懵逼。。](https://mp.weixin.qq.com/s/e1xvvdx8oOs8ykIMgSKiuw)\r\n- [面试绕不开的CAP理论，这篇文章帮你搞定！](https://mp.weixin.qq.com/s/tLfJdZ4BxlXY_wiV6-Hx8w)\r\n\r\n其他\r\n\r\n- [如何写出让CPU跑得更快的代码](https://mp.weixin.qq.com/s/g6bCfbyJ0NrtSAwN3Xooqw)\r\n- [程序在计算机中是如何运行起来的](https://mp.weixin.qq.com/s/Ek3gWfzrmWrRz8ypL76UTA)\r\n- [了解这些软件设计思想，你的思维至少上升一个段位](https://mp.weixin.qq.com/s/3dF8cy9LWh5A0oGWL2p35g)\r\n- [微信支付、支付宝最全接入指引，看完立刻就可以上手](https://mp.weixin.qq.com/s/emU6QyhRFXaBlkj9jerOMg)\r\n- [如何防止你的jar被反编译](https://mp.weixin.qq.com/s/AB1GN6UAsHW_nvctH_tuRQ)\r\n- [PageHelper使用中的一些坑](https://mp.weixin.qq.com/s/2FR4lmNdGmLP4qnD2F0Krw)\r\n- [一文参透分布式存储系统Ceph的架构设计、集群搭建](https://mp.weixin.qq.com/s/bt5Df-sY3QETgvGp3Kp8Yw)\r\n- [电商系统架构，常见的9个大坑](https://mp.weixin.qq.com/s/RnR3OyNA8PSz9CrCMP48kw)\r\n- [给定一个接口，要用户自定义动态实现并上传热部署](https://mp.weixin.qq.com/s/4Yr0J5MPvUQmDTseoJAILQ)\r\n- [说说布隆过滤器与布谷鸟过滤器及应用场景](https://mp.weixin.qq.com/s/q5p0v2R_FeYq2HwlrqL_xA)\r\n- [我们为什么要放弃RESTful，选择拥抱GraphQL](https://mp.weixin.qq.com/s/CsUIu48Yyqr0yiir4Xq4XA)\r\n- [轻松实现word、excel、ppt、txt等办公文件在线预览功能](https://mp.weixin.qq.com/s/m2e8dgW0NLgB9jzYd7nS2A)\r\n\r\n下载\r\n\r\n- [apache旗下安装包](https://dlcdn.apache.org/)\r\n- [centos rpm包（cat /etc/centos-release）](http://vault.centos.org/)\r\n- [PLSQL历史版本下载](https://www.allroundautomations.com/registered-plsqldev/)\r\n- [onekey ghpst+win7 ghost](https://www.newxitong.com/)\r\n- [Chrome](https://www.google.cn/chrome/)\r\n\r\n工具\r\n\r\n- [阿里云开发者藏经阁](https://developer.aliyun.com/topic/ebook)\r\n- [Postman详细用法示例](https://mp.weixin.qq.com/s/ccRwb3SJBQl3Fhq8pDzl_A)\r\n- [简单的Postman，还能玩出花](https://mp.weixin.qq.com/s/YTacVjCl90CKcn8tIhM7bQ)\r\n- [pdf在线转换器(easypdf.com)](https://easypdf.com/cn)\r\n- [pdf工具（在线签名、转换等）](https://lightpdf.com/zh/)\r\n- [Linux端口转发](https://blog.csdn.net/Tomorrow_Yesterday/article/details/84605297)\r\n- [开源中国工具](https://tool.oschina.net/)\r\n- [QQ浏览器工具箱](https://tool.browser.qq.com/)\r\n- [amCharts3官方文档](https://www.amcharts.com/docs/v3/reference/)\r\n- [表格组件神器：bootstrap table](https://www.cnblogs.com/landeanfen/p/4993979.html)\r\n- [创建地图-百度地图生成器](http://api.map.baidu.com/lbsapi/creatmap/index.html)\r\n- [面向程序员的精品开源字体](https://mp.weixin.qq.com/s/Dz3Z1S6vIkBksPfVyq7ehQ)\r\n- [idea使用的30个小技巧](https://mp.weixin.qq.com/s/XsBqQwZBUHfwBJBLgd2NTw)\r\n\r\n\r\n排序算法\r\n\r\n> [Java实现的排序算法](https://github.com/xmxe/demo/tree/master/study-demo/src/main/java/com/xmxe/study_demo/algorithm/sort)\r\n\r\n- [漫画：“排序算法”大总结](https://mp.weixin.qq.com/s/teOGQlslb6aP4AQrx7TTzA)\r\n- [因为排序不明白，被面试官锤了一顿](https://mp.weixin.qq.com/s/hQkdAMICGU2Akonl0upbag)\r\n- [史上最好的排序和数据结构入门](https://mp.weixin.qq.com/s/8iXAupQIdbRrcsFDuKwgHA)\r\n\r\n堆\r\n\r\n- [一文告诉你Java集合中「堆」的最佳打开方式](https://mp.weixin.qq.com/s/Wy-DgsZZAeZmI19ZskERRg)\r\n\r\n链表\r\n\r\n- [一口气搞懂「链表」，就靠这20+张图了](https://mp.weixin.qq.com/s/oyXrWMfOBRBClbCg1j9TyQ)\r\n\r\n栈\r\n\r\n- [面试官问我什么是「栈」，我随手画了10张图来解释](https://mp.weixin.qq.com/s/E3WDAksQV3qjS_O8ittfBA)\r\n\r\n哈希\r\n\r\n- [不能错过！简单易懂的哈希表总结](https://mp.weixin.qq.com/s/AgkHMhITtOTf9y3jrrxsfQ)\r\n- [学生物的女朋友都能看懂的哈希表总结](https://mp.weixin.qq.com/s?__biz=Mzg3Mzc0NjUzMQ==&mid=2247497071&idx=1&sn=3a67993e5e4634ddf0880e6c02a10d4e&source=41#wechat_redirect)\r\n- [如果世界上只有一种数据结构，我选择哈希！](https://mp.weixin.qq.com/s/YA5Pj6GTMFw0nrIOseMyRg)\r\n\r\n算法复杂度\r\n\r\n- [复杂度O、Θ、Ω、o、ω，别再傻傻分不清了！](https://mp.weixin.qq.com/s/HgsQUAGWG5GOs288thM8QA)\r\n- [看完这篇，还不清楚时间复杂度的，请来怼我](https://mp.weixin.qq.com/s/z_pSFJPaEdPsWtV9o-4tUQ)\r\n- [面试时候说的复杂度都是什么？](https://mp.weixin.qq.com/s/9ZFC_vlMa0bhrXhgvWx9pw)\r\n\r\n二叉树\r\n\r\n- [漫画：什么是平衡二叉树？](https://mp.weixin.qq.com/s/Tbx-VZxca8Z2U8VpXl6GoA)\r\n- [不怕面试被问了！二叉树算法大盘点](https://mp.weixin.qq.com/s/T4ObPeuFzdAbkW3R5q_vLA)\r\n- [看懂这篇文章，玩转二叉查找树](https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491062&idx=1&sn=3baf32b14a438ea29273add1bbae134e&source=41#wechat_redirect)\r\n- [一文弄懂二叉树三种遍历](https://mp.weixin.qq.com/s/38j1f-UR1uakiav5sPoCIw)\r\n- [一文高效图解二叉树面试题](https://mp.weixin.qq.com/s/QEM6Arxny0HaUasGRoSxQw)\r\n- [3分钟看完关于树的故事](https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491085&idx=2&sn=ad6b30d8feb980354f5131d21f3c34b8&source=41#wechat_redirect)\r\n\r\n红黑树\r\n\r\n- [漫画：什么是红黑树?](https://mp.weixin.qq.com/s/X3zYwQXxq93P_XUzFmKluQ)\r\n- [一口气写出了7k字的红黑树总结](https://mp.weixin.qq.com/s/uTkORM6bQeUT2XDHHmOc4A)\r\n- [漫画算法：5分钟搞明白红黑树到底是什么](https://mp.weixin.qq.com/s/MSB-vFGqNWB26kPydBJQmQ)\r\n- [用超强动静图详解红黑树，简单易懂](https://mp.weixin.qq.com/s/UjP3pHXWnlIf68cplj2RRw)\r\n- [红黑树是怎么实现的，看这篇真的就够了！](https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247491027&idx=1&sn=70566688d09508c7355cfef38b1453a5&source=41#wechat_redirect)\r\n- [什么是红黑树？看完这篇你就明白了！](https://mp.weixin.qq.com/s/9s6c1sPN7avqwxZC7BsVUQ)\r\n- [图文详解红黑树，还有谁不会](https://mp.weixin.qq.com/s/Xim1IUQmGT8hKelYZwUdLA)\r\n\r\nTomcat\r\n\r\n- [面试官:Tomcat的生命周期是什么样子的？](https://mp.weixin.qq.com/s/b3MP9eTvfEdEKw-fL2jeTw)\r\n- [超详细的Tomcat性能监控及调优教程](https://mp.weixin.qq.com/s/3i8uRr-4EOpFizie2hmogA)\r\n- [Tomcat配置文件server.xml你有深入了解过没？](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494066&idx=2&sn=14302c80a7c6e6480dd7553a5579ce06&source=41#wechat_redirect)\r\n- [一文拆解Tomcat高并发原理与性能调优](https://mp.weixin.qq.com/s/GR7iB5esMEczn687mwwc5Q)\r\n- [Tomcat调优和JVM参数优化](https://mp.weixin.qq.com/s/jmqqLbbOt3D--wksCigAOw)\r\n- [牛逼！硬核图解Tomcat整体架构](https://mp.weixin.qq.com/s/U49ZIWYRvIYYFkL-06aSXA)\r\n- [Tomcat深入理解](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494316&idx=1&sn=fb6eb1b78ed195a977bdfbe92a7cc6f4&source=41#wechat_redirect)\r\n- [Tomcat请求处理流程](https://mp.weixin.qq.com/s/Miw5K0OyE4oytn4U65Hn5g)\r\n- [Tomcat有哪些组成部分？讲讲工作原理？](https://mp.weixin.qq.com/s/UilzaN7jQEza7wiwzw4bsg)\r\n- [教你用Java写一个自己的Tomcat容器，涨姿势了](https://mp.weixin.qq.com/s/RpMXgOi8WsMm19S4YOh1aw)\r\n","categories":[],"tags":[{"name":"随笔","path":"api/tags/随笔.json"}]}