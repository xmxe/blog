{"title":"Linux相关","slug":"Linux相关","date":"2022-09-27T06:41:54.131Z","updated":"2023-03-22T07:11:49.835Z","comments":true,"path":"api/articles/Linux相关.json","excerpt":null,"covers":"https://img2.baidu.com/it/u=1090189516,820941418&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500","content":"<h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><h4 id=\"gt-x2F-dev-x2F-null\"><a href=\"#gt-x2F-dev-x2F-null\" class=\"headerlink\" title=\"&gt;&#x2F;dev&#x2F;null\"></a>&gt;&#x2F;dev&#x2F;null</h4><p>这条命令的作用是将标准输出1重定向到&#x2F;dev&#x2F;null中。&#x2F;dev&#x2F;null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了&gt;&#x2F;dev&#x2F;null之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p>\n<p>1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;详解：<br>0：表示标准输入stdin<br>1：表示标准输出stdout，系统默认为1，可省略(即1&gt;&#x2F;dev&#x2F;null等价于&gt;&#x2F;dev&#x2F;null)<br>2：表示标准错误stderr<br>&gt;：表示重定向（即将输出定向到指定路径文件，&gt;&#x2F;dev&#x2F;null表示将标准输出重定向到空设备文件，即不输出任何信息到终端，即不显示任何信息。）<br>2&gt;&amp;1：其中的&amp;表示等同于的意思，即2(标准错误stderr)的重定向等同于1<br>&amp;表示后台运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 后台执行abc.jar即便关闭终端也继续运行 不输出任何日志</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> abc.jar <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"关闭ssh情况下不退出进程\"><a href=\"#关闭ssh情况下不退出进程\" class=\"headerlink\" title=\"关闭ssh情况下不退出进程\"></a>关闭ssh情况下不退出进程</h4><p>nohup command &amp;<br>command参数：要执行的命令行<br>但是这种方式启动项目会默认生成一个nohup.out的文件来记录日志，而且会越来越大，不生成日志使用&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</p>\n<p>最终命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>0:表示键盘输入(stdin)<br>1:表示标准输出(stdout),系统默认是1<br>2:表示错误输出(stderr)</p>\n<p>command &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; &#x3D;&#x3D; command 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>command:表示shell命令或者为一个可执行程序<br>&gt;:表示重定向到哪里<br>&#x2F;dev&#x2F;null:表示Linux的空设备文件<br>2:表示标准错误输出<br>&amp;1:&amp;表示等同于的意思,2&gt;&amp;1,表示2的输出重定向等于于1<br>&amp;:表示后台执行,即这条指令执行在后台运行<br>1&gt;&#x2F;dev&#x2F;null:表示标准输出重定向到空设备文件,也就是不输出任何信息到终端,不显示任何信息。<br>2&gt;&amp;1:表示标准错误输出重定向等同于标准输出,因为之前标准输出已经重定向到了空设备文件,所以标准错误输出也重定向到空设备文件。<br>这条命令的意思就是在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放到&#x2F;dev&#x2F;null文件,也就是清空.<br>所以可以看出”&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;”常用来避免shell命令或者程序等运行中有内容输出</p>\n<h4 id=\"安装ifconfig\"><a href=\"#安装ifconfig\" class=\"headerlink\" title=\"安装ifconfig\"></a>安装ifconfig</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># centos</span>\nyum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> net-tools\n<span class=\"token comment\"># ubuntu</span>\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> net-tools<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>apt与apt-get的区别<br>apt可以看作apt-get和apt-cache命令的子集,可以为包管理提供必要的命令选项。apt-get虽然没被弃用，但作为普通用户，还是应该首先使用apt<br><a href=\"https://mirrors.cnnic.cn/help/centos/\">centos7更换yum源</a></li>\n</ul>\n<h4 id=\"配置jdk环境变量\"><a href=\"#配置jdk环境变量\" class=\"headerlink\" title=\"配置jdk环境变量\"></a>配置jdk环境变量</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/profile\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/jdk1.8.0_121\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/jre/lib/rt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin\n<span class=\"token builtin class-name\">source</span> /etc/profile <span class=\"token comment\"># 使环境变量生效</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span> <span class=\"token comment\"># 查看环境变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ubuntu按照上面的步骤在&#x2F;etc&#x2F;environment再配置一遍，配置完成后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /etc/environment<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安装iptables\"><a href=\"#安装iptables\" class=\"headerlink\" title=\"安装iptables\"></a>安装iptables</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl stop firewalld.service <span class=\"token comment\"># 停止服务</span>\nsystemctl mask firewalld.service <span class=\"token comment\"># 屏蔽服务</span>\nyum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> iptables-services  <span class=\"token comment\"># 安装iptables服务</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> iptables <span class=\"token comment\"># 开机启动iptables</span>\nsystemctl start iptables <span class=\"token comment\"># 启动iptables</span>\n<span class=\"token function\">service</span> iptables save <span class=\"token comment\"># 保存防火墙规则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"centos7防火墙\"><a href=\"#centos7防火墙\" class=\"headerlink\" title=\"centos7防火墙\"></a>centos7防火墙</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 启动</span>\nsystemctl start firewalld.service\n<span class=\"token comment\"># 关闭</span>\nsystemctl stop firewalld.service\n<span class=\"token comment\"># 查看状态</span>\nsystemctl status firewalld.service\n<span class=\"token comment\"># 开机禁用 </span>\nsystemctl disable firewalld.service\n<span class=\"token comment\"># 开机启用</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> firewalld.service\n<span class=\"token comment\"># 查看系统服务列表</span>\nsystemctl list-unit-files<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看开机启动的服务列表：\"><a href=\"#查看开机启动的服务列表：\" class=\"headerlink\" title=\"查看开机启动的服务列表：\"></a>查看开机启动的服务列表：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看某个服务是否开机启动：</span>\nsystemctl list-unit-files<span class=\"token operator\">|</span><span class=\"token function\">grep</span> enabled\n<span class=\"token comment\"># 查看启动失败的服务列表：systemctl --failed</span>\nsystemctl is-enabled firewalld.service\n\n<span class=\"token comment\"># 端口开放</span>\nfirewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp <span class=\"token parameter variable\">--permanent</span>\n<span class=\"token comment\">#（--permanent永久生效，没有此参数重启后失效）</span>\n\n<span class=\"token comment\"># 重新载入</span>\nfirewall-cmd --reload查看\nfirewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span> public --query-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp\n<span class=\"token comment\"># 删除</span>\nfirewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span> public --remove-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp <span class=\"token parameter variable\">--permanent</span>\n\n<span class=\"token comment\"># 查看开放的端口</span>\nfirewall-cmd --list-ports\n\n<span class=\"token comment\"># ubuntu</span>\n<span class=\"token comment\">#查看防火墙当前状态</span>\n<span class=\"token function\">sudo</span> ufw status\n<span class=\"token comment\"># 开启防火墙</span>\n<span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span>\n<span class=\"token comment\"># 关闭防火墙</span>\n<span class=\"token function\">sudo</span> ufw disable\n<span class=\"token comment\"># 查看防火墙版本</span>\n<span class=\"token function\">sudo</span> ufw version\n<span class=\"token comment\"># 默认允许外部访问本机</span>\n<span class=\"token function\">sudo</span> ufw default allow\n<span class=\"token comment\"># 默认拒绝外部访问主机</span>\n<span class=\"token function\">sudo</span> ufw default deny\n<span class=\"token comment\"># 允许外部访问53端口</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">53</span>\n<span class=\"token comment\"># 拒绝外部访问53端口</span>\n<span class=\"token function\">sudo</span> ufw deny <span class=\"token number\">53</span>\n<span class=\"token comment\"># 允许某个IP地址访问本机所有端口</span>\n<span class=\"token function\">sudo</span> ufw allow from <span class=\"token number\">192.168</span>.0.1\n<span class=\"token comment\"># 重启防火墙</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"生成文件\"><a href=\"#生成文件\" class=\"headerlink\" title=\"生成文件\"></a>生成文件</h4><p>&gt; 直接把内容生成到指定文件，会覆盖源文件中的内容，还有一种用途是直接生成一个空白文件，相当于touch命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> a.txt 输出1\n<span class=\"token comment\"># >>尾部追加，不会覆盖掉文件中原有的内容</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">>></span> a.txt 输出1 <span class=\"token number\">2</span>\n\n<span class=\"token function\">cat</span> file1 <span class=\"token operator\">>></span> file2 <span class=\"token comment\"># 把file1的文档内容输入file2这个文档里</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"用户-x2F-用户组\"><a href=\"#用户-x2F-用户组\" class=\"headerlink\" title=\"用户&#x2F;用户组\"></a>用户&#x2F;用户组</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看linux所有用户</span>\n<span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span> /etc/passwd\n<span class=\"token comment\"># 查看linux所有用户组</span>\n<span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span> /etc/group <span class=\"token comment\"># -d : 以“：”为分割符进行分割 -f 1展示第一列</span>\n<span class=\"token function\">groups</span> <span class=\"token comment\"># 用户名：查看用户所在用户组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"centos7-定时运行任务脚本\"><a href=\"#centos7-定时运行任务脚本\" class=\"headerlink\" title=\"centos7 定时运行任务脚本\"></a>centos7 定时运行任务脚本</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装crontab</span>\nyum <span class=\"token function\">install</span> vixie-cron\nyum <span class=\"token function\">install</span> crontabs\n<span class=\"token comment\"># 开启crontab服务</span>\n<span class=\"token function\">service</span> crond start <span class=\"token comment\"># 启动服务</span>\n<span class=\"token function\">service</span> crond stop <span class=\"token comment\"># 关闭服务</span>\n<span class=\"token function\">service</span> crond restart <span class=\"token comment\"># 重新启动服务</span>\n<span class=\"token function\">service</span> crond reload <span class=\"token comment\"># 又一次加载配置</span>\n<span class=\"token comment\"># 添加任务(两种方式)</span>\n<span class=\"token number\">1</span>. <span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span>  * * * * * /usr/local/a.sh。\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-l</span> <span class=\"token comment\"># 列出当前的全部调度任务</span>\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-u</span> jp <span class=\"token comment\">#列出用户jp的全部调度任务</span>\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-r</span> <span class=\"token comment\"># 删除全部任务调度工作</span>\n<span class=\"token number\">2</span>. <span class=\"token comment\"># 直接编辑 vim /etc/crontab</span>\n<span class=\"token comment\"># 添加* * * * * root /usr/local/a.sh</span>\n<span class=\"token comment\"># 注意要使用绝对路径</span>\n\n<span class=\"token comment\"># 查看邮件</span>\n<span class=\"token function\">cat</span> /var/spool/mail/root\n<span class=\"token comment\"># 查看日志</span>\n<span class=\"token builtin class-name\">cd</span> /var/log\n<span class=\"token function\">ls</span> <span class=\"token function\">cron</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s/c91XWEQvr9Axcf0hjvuKgg\">Linux定时任务调度(crontab)，太实用了！</a></p>\n<h4 id=\"修改文件所属用户和用户组\"><a href=\"#修改文件所属用户和用户组\" class=\"headerlink\" title=\"修改文件所属用户和用户组\"></a>修改文件所属用户和用户组</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 修改a.txt文件所属用户为jay，所属用户组为fefjay</span>\n<span class=\"token function\">chown</span> jay:fefjay a.txt\n<span class=\"token comment\"># 递归修改文件夹my及包含的所有子文件（夹）的所属用户和用户组</span>\n<span class=\"token function\">chown</span> <span class=\"token parameter variable\">-R</span> jay:fefjay my<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"curl命令\"><a href=\"#curl命令\" class=\"headerlink\" title=\"curl命令\"></a>curl命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'login=emma＆password=123'</span>-X POST URL\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'login=emma'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'password=123'</span> <span class=\"token parameter variable\">-X</span> POST URL\n<span class=\"token parameter variable\">-X</span> <span class=\"token comment\"># POST可以省略</span>\n\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-L</span> <span class=\"token parameter variable\">-X</span> POST URL <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'id=3&amp;pwd=jae_123'</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\"abc\":123,\"bcd\":\"nihao\"&#125;'</span> URL\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/angle_chen123/article/details/120675472\">Linux curl命令最全详解</a></li>\n<li><a href=\"https://www.cnblogs.com/fan-gx/p/12321351.html\">curl其他参数介绍</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ryhphDFvx0ml9NrDUks2NA\">堪称神器的命令行工具系列——curl</a></li>\n</ul>\n<h4 id=\"Linux系统服务\"><a href=\"#Linux系统服务\" class=\"headerlink\" title=\"Linux系统服务\"></a>Linux系统服务</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加自定义系统服务的目录：</span>\n/lib/systemd/system <span class=\"token comment\"># lib/systemd/system真实地址是/usr/lib/system/system地址，</span>\n/usr/lib/systemd/system/ <span class=\"token comment\"># 软件包安装的单元</span>\n/etc/systemd/system/ <span class=\"token comment\"># 系统管理员安装的单元,优先级更高</span>\n<span class=\"token comment\"># 优先级为 /etc/systemd/system /run/systemd/system /lib/systemd/system</span>\n<span class=\"token comment\"># 如果同一选项三个地方都配置了，优先级高的会覆盖优先级低的。</span>\n\n<span class=\"token comment\"># 开机启动执行命令：编辑/etc/rc.d/rc.local</span>\n<span class=\"token comment\"># 添加要执行的命令或者脚本,并且赋予执行权限</span>\n<span class=\"token function\">chmod</span> +x /etc/rc.d/rc.local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看隐藏目录\"><a href=\"#查看隐藏目录\" class=\"headerlink\" title=\"查看隐藏目录\"></a>查看隐藏目录</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"图形化页面卡死重启\"><a href=\"#图形化页面卡死重启\" class=\"headerlink\" title=\"图形化页面卡死重启\"></a>图形化页面卡死重启</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> gnome-shell pid<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看centos版本\"><a href=\"#查看centos版本\" class=\"headerlink\" title=\"查看centos版本\"></a>查看centos版本</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/redhat-release<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"重命名文件\"><a href=\"#重命名文件\" class=\"headerlink\" title=\"重命名文件\"></a>重命名文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 例:把a替换为xxx</span>\n<span class=\"token function\">rename</span> “a” “xxx” *.txt\n<span class=\"token comment\"># 或者使用mv命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-antu</span> <span class=\"token comment\"># 可以查看所有tcp、udp端口开放情况</span>\n<span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-ntlp</span> <span class=\"token comment\"># 查看正在运行的端口(t代表tcp 加u查看udp)</span>\n<span class=\"token function\">lsof</span> -i: <span class=\"token number\">9090</span> <span class=\"token comment\"># 查看某一端口运行的程序</span>\n<span class=\"token function\">netstat</span> -ntulp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token comment\"># 端口号 查看指定端口被哪个进程占用的情况</span>\n<span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> abc <span class=\"token comment\"># 查找abc进程</span>\n<span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aux</span> <span class=\"token comment\"># 显示所有进程</span>\n<span class=\"token comment\"># 发现A进程占用该端口号</span>\n<span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> A <span class=\"token comment\">#查看pid</span>\n\n<span class=\"token function\">kill</span> <span class=\"token number\">9</span> pid <span class=\"token comment\">#杀掉进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"找到pid并kill的shell脚本\"><a href=\"#找到pid并kill的shell脚本\" class=\"headerlink\" title=\"找到pid并kill的shell脚本\"></a>找到pid并kill的shell脚本</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\"># #!/bin/bash是指此脚本使用/bin/bash来解释执行。其中，#!是一个特殊的表示符，其后，跟着解释此脚本的shell路径。命令文件所在的路径是/bin/sh或者/usr/bin/sh.bash只是shell的一种，还有很多其它shell，如：sh,csh,ksh,tcsh.除第一行外，脚本中所有以“#”开头的行都是注释。</span>\n<span class=\"token comment\"># 注意不要有空格，否则解释成命令</span>\n<span class=\"token assign-left variable\">jar</span><span class=\"token operator\">=</span>abc.jar\n<span class=\"token comment\"># ``等价于$()</span>\n<span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token function\">java</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> $jar <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $2&#125;'</span><span class=\"token variable\">)</span></span>\n<span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token variable\">$pid</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$pid</span> killed\"</span>\n<span class=\"token function\">nohup</span> <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.runoob.com/linux/linux-shell.html\">shell菜鸟教程</a></p>\n<h4 id=\"设置静态ip后无法连接外网的问题\"><a href=\"#设置静态ip后无法连接外网的问题\" class=\"headerlink\" title=\"设置静态ip后无法连接外网的问题\"></a>设置静态ip后无法连接外网的问题</h4><p>因为动态ip会自动分配DNS 而静态ip需要手动配置DNS<br>centos7在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 写入DNS1&#x3D;114.114.114.114<br>ubuntu在&#x2F;etc&#x2F;resolv.conf写入nameserver 114.114.114.114</p>\n<p><a href=\"https://www.cnblogs.com/adforce/p/3363681.html\">Linux配置IP地址</a></p>\n<h4 id=\"命令行更改MAC地址\"><a href=\"#命令行更改MAC地址\" class=\"headerlink\" title=\"命令行更改MAC地址\"></a>命令行更改MAC地址</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/sbin/ifconfig eth0 down\n/sbin/ifconfig eth0 hw ether 00:50:56:94:16:a8\n/sbin/ifconfig eth0 up\n<span class=\"token function\">service</span> network restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看文件\"><a href=\"#查看文件\" class=\"headerlink\" title=\"查看文件\"></a>查看文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> h.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token comment\"># \"hello\"过滤掉特定字符串,效率低，因为有管道</span>\n<span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token string\">\"hello\"</span> h.txt <span class=\"token comment\"># 可以直接跟文件名，效率快</span>\n\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> k <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> +k <span class=\"token operator\">=</span> <span class=\"token function\">head</span> k\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> k <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-k</span> <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> k <span class=\"token comment\"># k为指定行数</span>\n\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> +3 <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-3</span> <span class=\"token comment\"># 显示文件前3行</span>\n\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-3</span> <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-3</span>  <span class=\"token comment\"># 显示文件最后3行</span>\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-k</span> <span class=\"token comment\"># 其中-k的意义是除了最后k行的所有行</span>\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-3</span> filename <span class=\"token comment\"># 查看filename除了最后3行的所有行</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> +k <span class=\"token comment\"># 是从第k行开始，输出所有行</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> +3 <span class=\"token comment\"># 从第三行开始输出所有行</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> finename <span class=\"token comment\"># 实时跟踪文件，如果文件不存在，则终止</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-F</span> filename <span class=\"token comment\"># 如果文件不存在，会继续尝试</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"源码安装配置-configure-、编译-make-、安装-make-install\"><a href=\"#源码安装配置-configure-、编译-make-、安装-make-install\" class=\"headerlink\" title=\"源码安装配置(configure)、编译(make)、安装(make install)\"></a>源码安装配置(configure)、编译(make)、安装(make install)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/test\n<span class=\"token comment\"># 编译出错时，清除编译生成的文件</span>\n<span class=\"token function\">make</span> distclean\n<span class=\"token comment\"># 编译安装到指定目录下</span>\n<span class=\"token function\">make</span> <span class=\"token assign-left variable\">PREFIX</span><span class=\"token operator\">=</span>/usr/local/redis <span class=\"token function\">install</span>\n<span class=\"token comment\"># 卸载</span>\n<span class=\"token function\">make</span> uninstall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"设置-keepalived-服务开机启动\"><a href=\"#设置-keepalived-服务开机启动\" class=\"headerlink\" title=\"设置 keepalived 服务开机启动\"></a>设置 keepalived 服务开机启动</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> keepalived on\n<span class=\"token function\">chkconfig</span> <span class=\"token parameter variable\">--add</span> name\n          <span class=\"token parameter variable\">--del</span> name\n          <span class=\"token parameter variable\">--list</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Ubuntu图形界面允许root登陆\"><a href=\"#Ubuntu图形界面允许root登陆\" class=\"headerlink\" title=\"Ubuntu图形界面允许root登陆\"></a>Ubuntu图形界面允许root登陆</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置root密码</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root  <span class=\"token comment\"># 终端会先验证密码 然后在设置root密码</span>\n<span class=\"token function\">vi</span> /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf\n<span class=\"token comment\"># 增加两行  greeter-show-manual-login=true all-guest=false#不允许guest用户登陆</span>\n<span class=\"token builtin class-name\">cd</span> /etc/pam.d  <span class=\"token comment\"># 编辑gdm-autologin和gdm-password文件 注释掉auth required pam_succeed_if.so user != root quiet_success</span>\n<span class=\"token function\">vi</span> /root/.profile <span class=\"token comment\"># 将mesg n || true 修改为 tty -s &amp;&amp; mesg n || true</span>\n<span class=\"token function\">reboot</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://www.cnblogs.com/yixius/articles/6971054.html\">解决Ubuntu的root账号无法登录SSH问题</a></p>\n<h4 id=\"查看指定目录大小\"><a href=\"#查看指定目录大小\" class=\"headerlink\" title=\"查看指定目录大小\"></a>查看指定目录大小</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">du</span> <span class=\"token parameter variable\">-h</span> --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> /usr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看磁盘空间\"><a href=\"#查看磁盘空间\" class=\"headerlink\" title=\"查看磁盘空间\"></a>查看磁盘空间</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看内存\"><a href=\"#查看内存\" class=\"headerlink\" title=\"查看内存\"></a>查看内存</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">free</span> <span class=\"token parameter variable\">-h</span>\n\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 表示更新两次后终止更新显示并退出</span>\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 表示更新周期为3秒</span>\n<span class=\"token comment\"># top命令进入展示信息后按大写M表示按照内存大小排序展示 按大写P表示按照CPU使用率进行排序</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"读、写、运行\"><a href=\"#读、写、运行\" class=\"headerlink\" title=\"读、写、运行\"></a>读、写、运行</h4><p>三项权限可以用数字表示，r&#x3D;4,w&#x3D;2,x&#x3D;1 rw-r–r–用数字表示成644</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">754</span> filename\n<span class=\"token comment\"># 将filename文件的读写运行权限赋予文件所有者，把读和运行的权限赋予群组用户，把读的权限赋予其他用户。</span>\n<span class=\"token comment\"># chmod +x是将文件状态改为可执行，而chmod 777是改变文件读写权限。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"centos7卸载openjdk\"><a href=\"#centos7卸载openjdk\" class=\"headerlink\" title=\"centos7卸载openjdk\"></a>centos7卸载openjdk</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> jdk  <span class=\"token comment\"># 查看已有的openjdk -q(query) -a(all)</span>\n<span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> <span class=\"token punctuation\">(</span>上条命令的查询结果<span class=\"token punctuation\">)</span> <span class=\"token comment\">#卸载</span>\n\nubuntu \n<span class=\"token function\">apt-get</span> remove openjdk*\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"rpm参数\"><a href=\"#rpm参数\" class=\"headerlink\" title=\"rpm参数\"></a>rpm参数</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span>a　查询所有套件。\n<span class=\"token punctuation\">-</span>b&lt;完成阶段<span class=\"token punctuation\">></span>&lt;套件档<span class=\"token punctuation\">></span>+或<span class=\"token punctuation\">-</span>t&lt;完成阶段<span class=\"token punctuation\">></span>&lt;套件档<span class=\"token punctuation\">></span>+　设置包装套件的完成阶段，并指定套件档的文件名称。\n<span class=\"token punctuation\">-</span>c　只列出组态配置文件，本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span>d　只列出文本文件，本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span>e&lt;套件档<span class=\"token punctuation\">></span>或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>erase&lt;套件档<span class=\"token punctuation\">></span>　删除指定的套件。\n<span class=\"token punctuation\">-</span>f&lt;文件<span class=\"token punctuation\">></span>+　查询拥有指定文件的套件。\n<span class=\"token punctuation\">-</span>h或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>hash　套件安装时列出标记。\n<span class=\"token punctuation\">-</span>i　显示套件的相关信息。\n<span class=\"token punctuation\">-</span>i&lt;套件档<span class=\"token punctuation\">></span>或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>install&lt;套件档<span class=\"token punctuation\">></span>　安装指定的套件档。\n<span class=\"token punctuation\">-</span>l　显示套件的文件列表。\n<span class=\"token punctuation\">-</span>p&lt;套件档<span class=\"token punctuation\">></span>+　查询指定的RPM套件档。\n<span class=\"token punctuation\">-</span>q　使用询问模式，当遇到任何问题时，rpm指令会先询问用户。\n<span class=\"token punctuation\">-</span>R　显示套件的关联性信息。\n<span class=\"token punctuation\">-</span>s　显示文件状态，本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span>U&lt;套件档<span class=\"token punctuation\">></span>或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>upgrade&lt;套件档<span class=\"token punctuation\">></span>升级指定的套件档。\n<span class=\"token punctuation\">-</span>v　显示指令执行过程。\n<span class=\"token punctuation\">-</span>vv　详细显示指令执行过程，便于排错。\n<span class=\"token punctuation\">-</span>addsign&lt;套件档<span class=\"token punctuation\">></span>+　在指定的套件里加上新的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>allfiles　安装所有文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>allmatches　删除符合指定的套件所包含的文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>badreloc　发生错误时，重新配置文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>buildroot&lt;根目录<span class=\"token punctuation\">></span>　设置产生套件时，欲当作根目录的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>changelog　显示套件的更改记录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>checksig&lt;套件档<span class=\"token punctuation\">></span>+　检验该套件的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>clean　完成套件的包装后，删除包装过程中所建立的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dbpath&lt;数据库目录<span class=\"token punctuation\">></span>　设置欲存放RPM数据库的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dump　显示每个文件的验证信息。本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>excludedocs　安装套件时，不要安装文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>excludepath&lt;排除目录<span class=\"token punctuation\">></span>　忽略在指定目录里的所有文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force　强行置换套件或文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ftpproxy&lt;主机名称或IP地址<span class=\"token punctuation\">></span>　指定FTP代理服务器。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ftpport&lt;通信端口<span class=\"token punctuation\">></span>　设置FTP服务器或代理服务器使用的通信端口。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>help　在线帮助。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>httpproxy&lt;主机名称或IP地址<span class=\"token punctuation\">></span>　指定HTTP代理服务器。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>httpport&lt;通信端口<span class=\"token punctuation\">></span>　设置HTTP服务器或代理服务器使用的通信端口。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ignorearch　不验证套件档的结构正确性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ignoreos　不验证套件档的结构正确性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ignoresize　安装前不检查磁盘空间是否足够。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>includedocs　安装套件时，一并安装文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>initdb　确认有正确的数据库可以使用。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>justdb　更新数据库，当不变动任何文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nobulid　不执行任何完成阶段。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nodeps　不验证套件档的相互关联性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nofiles　不验证文件的属性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nogpg　略过所有GPG的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nomd5　不使用MD5编码演算确认文件的大小与正确性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nopgp　略过所有PGP的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>noorder　不重新编排套件的安装顺序，以便满足其彼此间的关联性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>noscripts　不执行任何安装Script文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>notriggers　不执行该套件包装内的任何Script文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>oldpackage　升级成旧版本的套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>percent　安装套件时显示完成度百分比。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>pipe&lt;执行指令<span class=\"token punctuation\">></span>　建立管道，把输出结果转为该执行指令的输入数据。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>prefix&lt;目的目录<span class=\"token punctuation\">></span>　若重新配置文件，就把文件放到指定的目录下。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>provides　查询该套件所提供的兼容度。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>queryformat&lt;档头格式<span class=\"token punctuation\">></span>　设置档头的表示方式。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>querytags　列出可用于档头格式的标签。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rcfile&lt;配置文件<span class=\"token punctuation\">></span>　使用指定的配置文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rebulid&lt;套件档<span class=\"token punctuation\">></span>　安装原始代码套件，重新产生二进制文件的套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rebuliddb　以现有的数据库为主，重建一份数据库。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>recompile&lt;套件档<span class=\"token punctuation\">></span>　此参数的效果和指定\"<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rebulid\"参数类似，当不产生套件档。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>relocate&lt;原目录<span class=\"token punctuation\">></span>=&lt;新目录<span class=\"token punctuation\">></span>　把本来会放到原目录下的文件改放到新目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>replacefiles　强行置换文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>replacepkgs　强行置换套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>requires　查询该套件所需要的兼容度。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>resing&lt;套件档<span class=\"token punctuation\">></span>+　删除现有认证，重新产生签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rmsource　完成套件的包装后，删除原始代码。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rmsource&lt;文件<span class=\"token punctuation\">></span>　删除原始代码和指定的文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>root&lt;根目录<span class=\"token punctuation\">></span>　设置欲当作根目录的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>scripts　列出安装套件的Script的变量。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>setperms　设置文件的权限。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>setugids　设置文件的拥有者和所属群组。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>short<span class=\"token punctuation\">-</span>circuit　直接略过指定完成阶段的步骤。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>sign　产生PGP或GPG的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>target=&lt;安装平台<span class=\"token punctuation\">></span>+　设置产生的套件的安装平台。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>test　仅作测试，并不真的安装套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>timecheck&lt;检查秒数<span class=\"token punctuation\">></span>　设置检查时间的计时秒数。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>triggeredby&lt;套件档<span class=\"token punctuation\">></span>　查询该套件的包装者。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>triggers　展示套件档内的包装Script。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>verify　此参数的效果和指定\"<span class=\"token punctuation\">-</span>q\"参数相同。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>version　显示版本信息。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>whatprovides&lt;功能特性<span class=\"token punctuation\">></span>　查询该套件对指定的功能特性所提供的兼容度。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>whatrequires&lt;功能特性<span class=\"token punctuation\">></span>　查询该套件对指定的功能特性所需要的兼容度。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"从服务器复制文件到本地\"><a href=\"#从服务器复制文件到本地\" class=\"headerlink\" title=\"从服务器复制文件到本地\"></a>从服务器复制文件到本地</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 从服务器复制文件到本地</span>\n<span class=\"token function\">scp</span> root@192.168.1.100:/data/test.txt /home/myfile/\n<span class=\"token comment\"># 从服务器复制文件夹到本地</span>\n<span class=\"token function\">scp</span> <span class=\"token parameter variable\">-r</span> root@192.168.1.100:/data/ /home/myfile/\n<span class=\"token comment\"># 从本地复制文件到服务器</span>\n<span class=\"token function\">scp</span> /home/myfile/test.txt root@192.168.1.100:/data/\n<span class=\"token comment\"># 从本地复制文件夹到服务器</span>\n<span class=\"token function\">scp</span> <span class=\"token parameter variable\">-r</span> /home/myfile/ root@192.168.1.100:/data/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ssh双向免密登录服务器A、B\"><a href=\"#ssh双向免密登录服务器A、B\" class=\"headerlink\" title=\"ssh双向免密登录服务器A、B\"></a>ssh双向免密登录服务器A、B</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 生成密钥</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> rsa\n<span class=\"token comment\"># 生成密钥的位置</span>\n<span class=\"token builtin class-name\">cd</span> /root/.ssh/\n<span class=\"token comment\"># 此命令在A机器执行，目的将A的公钥发送至B机器</span>\n<span class=\"token function\">scp</span> id_rsa.pub root@BIP地址:/root/.ssh/id_rsa_A.pub\n<span class=\"token comment\"># 此命令在B机器执行，目的将B的公钥发送至A机器</span>\n<span class=\"token function\">scp</span> id_rsa.pub root@AIP地址:/root/.ssh/id_rsa_B.pub\n\n<span class=\"token comment\"># 如果发送文件夹 使用scp -r /test root@B:/root/test</span>\n\n<span class=\"token comment\"># 查看远程复制是否成功 写入密钥</span>\n<span class=\"token function\">cat</span> id_rsa_A<span class=\"token punctuation\">(</span>或者B<span class=\"token punctuation\">)</span>.pub <span class=\"token operator\">>></span> authorized_keys\n<span class=\"token comment\"># 如果出现agent admitted failure to sign using the key</span>\nssh-add ~/.ssh/id_rsa \n<span class=\"token comment\"># ssh A和ssh B测试ssh本机和远程是否已经免密登录（第一次免密登录需要输入密码，以后不需要）</span>\nssh登陆 <span class=\"token function\">ssh</span> root@ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s/1e4aGp_cx0E_qCHVuS3GMg\">科普：什么是SSH？</a></p>\n<h4 id=\"centos7-x2F-ubuntu通用\"><a href=\"#centos7-x2F-ubuntu通用\" class=\"headerlink\" title=\"centos7&#x2F;ubuntu通用\"></a>centos7&#x2F;ubuntu通用</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 默认命令行</span>\nsystemctl set-default multi-user.target  （init <span class=\"token number\">3</span>）\n\n<span class=\"token comment\"># 默认图形页面</span>\nsystemctl set-default graphical.target  <span class=\"token punctuation\">(</span>init <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看系统内核-uname-r\"><a href=\"#查看系统内核-uname-r\" class=\"headerlink\" title=\"查看系统内核 uname -r\"></a>查看系统内核 uname -r</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 全部内核</span>\n<span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> kernel\nyum list installed <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> kernel\n<span class=\"token comment\">#删除多余内核</span>\nyum remove kernel-<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"测试端口是否开通\"><a href=\"#测试端口是否开通\" class=\"headerlink\" title=\"测试端口是否开通\"></a>测试端口是否开通</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-v</span> <span class=\"token parameter variable\">-p</span> port username@ip\n<span class=\"token comment\"># -v 调试模式(会打印日志) -p 指定端口 username可以随意</span>\n\n<span class=\"token comment\"># 使用 telnet 命令</span>\ntelnet <span class=\"token function\">ip</span> 端口\n\n<span class=\"token comment\"># 使用nc命令</span>\n<span class=\"token function\">nc</span> <span class=\"token parameter variable\">-vu</span> <span class=\"token function\">ip</span> 端口\n<span class=\"token comment\"># -v 输出交互或出错信息，新手调试时尤为有用,-u指定nc使用UDP协议，默认为TCP</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"arthas调试常用命令\"><a href=\"#arthas调试常用命令\" class=\"headerlink\" title=\"arthas调试常用命令\"></a>arthas调试常用命令</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cls 清空当前屏幕内容\n\ntrace 类名 方法名  &#39;#cost &gt; 10&#39;\n查看某个类的某个方法执行多长时间 (加后面参数只会展示耗时大于10ms的调用路径)\n\nsc 类名 查看该类是否被jvm加载\n\nsm 类名 查看该类的方法信息\n\njad 类名 反编译\n\nwatch 类名 方法名 &quot;&#123;params,returnObj,throwExp&#125;&quot; -e -b  -x 2\n观察方法出参，返回值，-b在调用之前观察 -e在方法异常之后观察 -x指定输出结果的遍历深度 默认为1\n\nthread 查看线程\n\nredefine class文件(带class后缀名):热部署，修改jvm的class并不会修改本地的class文件 服务重启后失效 注意class新增属性、方法且方法正在运行的时候会热部署失败\n\n退出arthas\nquit或exit 退出当前连接，完全退出使用stop(所有客户端连接都会退出)\n\nlogger --name ROOT --level debug动态修改日志级别<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/quick-start.html\">arthas官方文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/7RMjfIYlmskMsifnhIzxgA\">学会arthas，让你3年经验掌握5年功力</a></li>\n</ul>\n<h4 id=\"Linux交换空间-swap-space\"><a href=\"#Linux交换空间-swap-space\" class=\"headerlink\" title=\"Linux交换空间(swap space)\"></a>Linux交换空间(swap space)</h4><p>交换空间是磁盘上的一块区域，可以是一个分区，也可以是一个文件，或者是他们的组合。简单点说，当系统物理内存吃紧时，Linux会将内存中不常访问的数据保存到swap上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问swap上存储的内容时，再将swap上的数据加载到内存中，这就是我们常说的swap out和swap in</p>\n<p><strong>设置交换空间</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 在Home目录创建一个大小为16G的swap文件，块大小为1MByte，总共1K个块，也就是总共1GB</span>\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=~</span>/swapfile <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>1M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>1k\n<span class=\"token comment\"># 2. 格式化新增的swap文件</span>\n<span class=\"token function\">mkswap</span> ～/swapfile\n<span class=\"token comment\"># 3. 启动新增的swap文件</span>\n<span class=\"token function\">swapon</span> ～/swapfile\n<span class=\"token comment\"># 4. 查看swap空间大小，发现增加了16G</span>\n<span class=\"token function\">free</span>\n<span class=\"token comment\"># 5. 关闭新增的swap文件</span>\nswapoff ～/swapfile\n<span class=\"token comment\"># 6. 设置开机自启动，开机后自动启动新增的swap文件，在/etc/fstab中新增如下命令</span>\n/swapfile none swap sw <span class=\"token number\">0</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 一、查看磁盘挂载目录</span>\n<span class=\"token function\">df</span> -h（查看分区情况及数据盘名称）\n<span class=\"token function\">mkdir</span> /usr（如果没有就创建，否则此步跳过）\n<span class=\"token comment\"># 二、卸载磁盘</span>\n<span class=\"token function\">umount</span> /data（卸载硬盘已挂载的data目录）\n<span class=\"token comment\"># 三、挂载到新目录</span>\n<span class=\"token function\">mount</span> /dev/vdb1 /usr（挂载到usr目录）\n<span class=\"token comment\"># 四、修改 /etc/fstab</span>\n<span class=\"token function\">vi</span> /etc/fstab （编辑fstab文件修改或添加，使重启后可以自动挂载）\n/dev/vdb1 /usr ext3 auto <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># 五、重新挂载所有分区</span>\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-a</span>\n<span class=\"token comment\"># 六、验证</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> /usr/\n<span class=\"token comment\"># 七、重启服务器</span>\n<span class=\"token function\">reboot</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是：在实际操作过程中，挂载的目录会覆盖掉原目录的文件信息。可以先进行旧目录备份，挂载完成后在恢复数据。</p>\n<h4 id=\"source-filename与sh-filename及-x2F-filename执⾏脚本的区别\"><a href=\"#source-filename与sh-filename及-x2F-filename执⾏脚本的区别\" class=\"headerlink\" title=\"source filename与sh filename及.&#x2F;filename执⾏脚本的区别\"></a>source filename与sh filename及.&#x2F;filename执⾏脚本的区别</h4><ol>\n<li>当shell脚本具有可执⾏权限时，⽤sh filename与.&#x2F;filename执⾏脚本是没有区别得。.&#x2F;filename是因为当前⽬录没有在PATH中，所有”.”是⽤来表⽰当前⽬录的。</li>\n<li>sh filename重新建⽴⼀个⼦shell，在⼦shell中执⾏脚本⾥⾯的语句，该⼦shell继承⽗shell的环境变量，但⼦shell新建的、改变的变量不会被带回⽗shell，除⾮使⽤export。</li>\n<li>source filename：这个命令其实只是简单地读取脚本⾥⾯的语句依次在当前shell⾥⾯执⾏，没有建⽴新的⼦shell。那么脚本⾥⾯所有新建、改变变量的语句都会保存在当前shell⾥⾯</li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><h4 id=\"环境变量文件\"><a href=\"#环境变量文件\" class=\"headerlink\" title=\"环境变量文件\"></a>环境变量文件</h4><ul>\n<li>&#x2F;etc&#x2F;profile：此文件为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行，并从&#x2F;etc&#x2F;profile.d目录的配置文件中收集shell的设置</li>\n<li>&#x2F;etc&#x2F;bashrc：为每一个运行bash shell的用户执行此文件，当bash shell被打开时，该文件被读取也就是说，当用户shell执行了bash时，运行这个文件；</li>\n<li>~&#x2F;.bash_profile：每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下，它设置一些环境变量，执行用户的.bashrc文件</li>\n<li>~&#x2F;.bashrc：该文件包含用于你的bash shell的bash信息，当登录时以及每次打开新的shell时，该文件被读取。该文件存储的是专属于个人bash shell的信息，当登录时以及每次打开一个新的shell时，执行这个文件。在这个文件里可以自定义用户专属的个人信息。</li>\n<li>~&#x2F;.bash_logout：当每次退出系统(退出bash shell)时，执行该文件；另外，&#x2F;etc&#x2F;profile中设定的变量(全局)的可以作用于任何用户，而~&#x2F;.bashrc等中设定的变量(局部)只能继承&#x2F;etc&#x2F;profile中的变量，他们是“父子”关系；</li>\n</ul>\n<h4 id=\"Ubuntu下bash的几个初始化文件\"><a href=\"#Ubuntu下bash的几个初始化文件\" class=\"headerlink\" title=\"Ubuntu下bash的几个初始化文件\"></a>Ubuntu下bash的几个初始化文件</h4><ul>\n<li>&#x2F;etc&#x2F;profile 全局(公有)配置，不管是哪个用户，登录时都会读取该文件；</li>\n<li>&#x2F;etc&#x2F;bashrc Ubuntu下没有此文件，与之对应的是&#x2F;etc&#x2F;bash.bashrc，它也是全局的；bash执行时，不管是何种方式，都会读取此文件；</li>\n<li>~&#x2F;.profile 若bash是以login方式执行时，读取~&#x2F;.bash_profile，若它不存在，则读取~&#x2F;.bash_login，若前两者不存在，读取~&#x2F;.profile；另外，图形模式登录时，此文件将被读取，即使存在~&#x2F;.bash_profile和~&#x2F;.bash_login；</li>\n<li>~&#x2F;.bash_login 若bash是以login方式执行时，读取~&#x2F;.bash_profile，若它不存在，则读取~&#x2F;.bash_login，若前两者都不存在，则读取~&#x2F;.profile；</li>\n<li>~&#x2F;.bash_profile Ubuntu默认没有此文件，可新建。只有bash是以login形式执行时，才会读取此文件。通常该配置文件还会配置成去读取~&#x2F;.bashrc；</li>\n<li>~&#x2F;.bashrc当bash是以non-login形式执行时，读取此文件。若是以login形式执行，则不会读取此文件；</li>\n<li>~&#x2F;.bash_logout注销时，且是login形式，此文件才会读取。也就是说，在文本模式注销时，此文件会被读取，图形模式注销时，此文件不会被读取。</li>\n<li>&#x2F;etc&#x2F;environment系统的环境变量，系统应用程序的执行与用户环境可以是无关的，但与系统环境是相关的</li>\n</ul>\n<ol>\n<li>在登录时,操作系统定制用户环境时使用的第一个文件就是&#x2F;etc&#x2F;profile,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。</li>\n<li>在登录时操作系统使用的第二个文件是&#x2F;etc&#x2F;environment，系统在读取你自己的profile前,设置环境文件的环境变量。</li>\n<li>在登录时用到的第三个文件是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。&#x2F;etc&#x2F;bashrc:为每一个运行bash shell的用户执行此文件。当bash shell被打开时,该文件被读取。</li>\n<li>&#x2F;etc&#x2F;environment是设置整个系统的环境，而&#x2F;etc&#x2F;profile是设置所有用户的环境，前者与登录用户无关，后者与登录用户有关。<br>先执行&#x2F;etc&#x2F;enviroment，后执行&#x2F;etc&#x2F;profile</li>\n</ol>\n<p><a href=\"https://mp.weixin.qq.com/s/D32FE4CS2pT89czVUv0SOg\">Linux环境变量配置的6种方法</a></p>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://javaguide.cn/cs-basics/operating-system/linux-intro.html\">Linux基础知识总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wejhjmbtS16AdlDo0JiLMA\">程序员必备的150个Linux命令！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TvUcd7mLkHxD_botoo7BQg\">新人必备的Linux命令！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/43JCaDehv0nbzDKbe0S8Kg\">1000+常用的Linux命令来袭</a></li>\n<li><a href=\"https://www.zhihu.com/question/319076999/answer/672319588?utm_source=wechat_timeline&utm_medium=social&utm_oi=1040923520439672832&from=timeline\">作为一名Java开发人员，应该从多大程度上掌握Linux？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2FDa8fOm6x4-1MP9l9N7vA\">30个实例详解TOP命令</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/liiz58PC1JlfPaEW81wUpg\">ping命令的7大用法,看完秒变大神！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/4pPdcSak3YLyqiz4Ns8htQ\">听说你ping用的很6,给我图解一下ping的工作原理</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fLY3JH5_4_h4vABV7B-4uw\">ping命令还能这么玩？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494347&idx=1&sn=2f6bfe4a5716d4b0aba6d8b5348f7033&source=41#wechat_redirect\">后端线上问题排查常用命令收藏</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jlmPjqFTfP4JNmbhpGoHsA\">Java开发常用的Linux命令知识积累</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/F_0kiOWgQS4BINx2t2Rqtw\">这篇Linux总结的真棒！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UT3RYrUGP2E5JQbf1Z8c8w\">Linux远程桌面管理工具！功能真心强大</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kxvc95RJoSKqcXwwmyrPKg\">在Linux上保护SSH服务器连接的8种方法</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zmfCC083VBrA8P6uWHL2DQ\">发现谁用kill -9关闭程序就开除！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hXDAZD0LUJ9g85t6fkBR-Q\">万字详解Linux常用指令</a></li>\n</ul>\n","more":"<h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><h4 id=\"gt-x2F-dev-x2F-null\"><a href=\"#gt-x2F-dev-x2F-null\" class=\"headerlink\" title=\"&gt;&#x2F;dev&#x2F;null\"></a>&gt;&#x2F;dev&#x2F;null</h4><p>这条命令的作用是将标准输出1重定向到&#x2F;dev&#x2F;null中。&#x2F;dev&#x2F;null代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了&gt;&#x2F;dev&#x2F;null之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p>\n<p>1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;详解：<br>0：表示标准输入stdin<br>1：表示标准输出stdout，系统默认为1，可省略(即1&gt;&#x2F;dev&#x2F;null等价于&gt;&#x2F;dev&#x2F;null)<br>2：表示标准错误stderr<br>&gt;：表示重定向（即将输出定向到指定路径文件，&gt;&#x2F;dev&#x2F;null表示将标准输出重定向到空设备文件，即不输出任何信息到终端，即不显示任何信息。）<br>2&gt;&amp;1：其中的&amp;表示等同于的意思，即2(标准错误stderr)的重定向等同于1<br>&amp;表示后台运行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 后台执行abc.jar即便关闭终端也继续运行 不输出任何日志</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> abc.jar <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"关闭ssh情况下不退出进程\"><a href=\"#关闭ssh情况下不退出进程\" class=\"headerlink\" title=\"关闭ssh情况下不退出进程\"></a>关闭ssh情况下不退出进程</h4><p>nohup command &amp;<br>command参数：要执行的命令行<br>但是这种方式启动项目会默认生成一个nohup.out的文件来记录日志，而且会越来越大，不生成日志使用&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</p>\n<p>最终命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>0:表示键盘输入(stdin)<br>1:表示标准输出(stdout),系统默认是1<br>2:表示错误输出(stderr)</p>\n<p>command &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; &#x3D;&#x3D; command 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;<br>command:表示shell命令或者为一个可执行程序<br>&gt;:表示重定向到哪里<br>&#x2F;dev&#x2F;null:表示Linux的空设备文件<br>2:表示标准错误输出<br>&amp;1:&amp;表示等同于的意思,2&gt;&amp;1,表示2的输出重定向等于于1<br>&amp;:表示后台执行,即这条指令执行在后台运行<br>1&gt;&#x2F;dev&#x2F;null:表示标准输出重定向到空设备文件,也就是不输出任何信息到终端,不显示任何信息。<br>2&gt;&amp;1:表示标准错误输出重定向等同于标准输出,因为之前标准输出已经重定向到了空设备文件,所以标准错误输出也重定向到空设备文件。<br>这条命令的意思就是在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放到&#x2F;dev&#x2F;null文件,也就是清空.<br>所以可以看出”&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;”常用来避免shell命令或者程序等运行中有内容输出</p>\n<h4 id=\"安装ifconfig\"><a href=\"#安装ifconfig\" class=\"headerlink\" title=\"安装ifconfig\"></a>安装ifconfig</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># centos</span>\nyum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> net-tools\n<span class=\"token comment\"># ubuntu</span>\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> net-tools<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>apt与apt-get的区别<br>apt可以看作apt-get和apt-cache命令的子集,可以为包管理提供必要的命令选项。apt-get虽然没被弃用，但作为普通用户，还是应该首先使用apt<br><a href=\"https://mirrors.cnnic.cn/help/centos/\">centos7更换yum源</a></li>\n</ul>\n<h4 id=\"配置jdk环境变量\"><a href=\"#配置jdk环境变量\" class=\"headerlink\" title=\"配置jdk环境变量\"></a>配置jdk环境变量</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/profile\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/jdk1.8.0_121\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/jre/lib/rt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin\n<span class=\"token builtin class-name\">source</span> /etc/profile <span class=\"token comment\"># 使环境变量生效</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span> <span class=\"token comment\"># 查看环境变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ubuntu按照上面的步骤在&#x2F;etc&#x2F;environment再配置一遍，配置完成后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /etc/environment<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安装iptables\"><a href=\"#安装iptables\" class=\"headerlink\" title=\"安装iptables\"></a>安装iptables</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl stop firewalld.service <span class=\"token comment\"># 停止服务</span>\nsystemctl mask firewalld.service <span class=\"token comment\"># 屏蔽服务</span>\nyum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> iptables-services  <span class=\"token comment\"># 安装iptables服务</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> iptables <span class=\"token comment\"># 开机启动iptables</span>\nsystemctl start iptables <span class=\"token comment\"># 启动iptables</span>\n<span class=\"token function\">service</span> iptables save <span class=\"token comment\"># 保存防火墙规则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"centos7防火墙\"><a href=\"#centos7防火墙\" class=\"headerlink\" title=\"centos7防火墙\"></a>centos7防火墙</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 启动</span>\nsystemctl start firewalld.service\n<span class=\"token comment\"># 关闭</span>\nsystemctl stop firewalld.service\n<span class=\"token comment\"># 查看状态</span>\nsystemctl status firewalld.service\n<span class=\"token comment\"># 开机禁用 </span>\nsystemctl disable firewalld.service\n<span class=\"token comment\"># 开机启用</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> firewalld.service\n<span class=\"token comment\"># 查看系统服务列表</span>\nsystemctl list-unit-files<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看开机启动的服务列表：\"><a href=\"#查看开机启动的服务列表：\" class=\"headerlink\" title=\"查看开机启动的服务列表：\"></a>查看开机启动的服务列表：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看某个服务是否开机启动：</span>\nsystemctl list-unit-files<span class=\"token operator\">|</span><span class=\"token function\">grep</span> enabled\n<span class=\"token comment\"># 查看启动失败的服务列表：systemctl --failed</span>\nsystemctl is-enabled firewalld.service\n\n<span class=\"token comment\"># 端口开放</span>\nfirewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp <span class=\"token parameter variable\">--permanent</span>\n<span class=\"token comment\">#（--permanent永久生效，没有此参数重启后失效）</span>\n\n<span class=\"token comment\"># 重新载入</span>\nfirewall-cmd --reload查看\nfirewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span> public --query-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp\n<span class=\"token comment\"># 删除</span>\nfirewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span> public --remove-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp <span class=\"token parameter variable\">--permanent</span>\n\n<span class=\"token comment\"># 查看开放的端口</span>\nfirewall-cmd --list-ports\n\n<span class=\"token comment\"># ubuntu</span>\n<span class=\"token comment\">#查看防火墙当前状态</span>\n<span class=\"token function\">sudo</span> ufw status\n<span class=\"token comment\"># 开启防火墙</span>\n<span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span>\n<span class=\"token comment\"># 关闭防火墙</span>\n<span class=\"token function\">sudo</span> ufw disable\n<span class=\"token comment\"># 查看防火墙版本</span>\n<span class=\"token function\">sudo</span> ufw version\n<span class=\"token comment\"># 默认允许外部访问本机</span>\n<span class=\"token function\">sudo</span> ufw default allow\n<span class=\"token comment\"># 默认拒绝外部访问主机</span>\n<span class=\"token function\">sudo</span> ufw default deny\n<span class=\"token comment\"># 允许外部访问53端口</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">53</span>\n<span class=\"token comment\"># 拒绝外部访问53端口</span>\n<span class=\"token function\">sudo</span> ufw deny <span class=\"token number\">53</span>\n<span class=\"token comment\"># 允许某个IP地址访问本机所有端口</span>\n<span class=\"token function\">sudo</span> ufw allow from <span class=\"token number\">192.168</span>.0.1\n<span class=\"token comment\"># 重启防火墙</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"生成文件\"><a href=\"#生成文件\" class=\"headerlink\" title=\"生成文件\"></a>生成文件</h4><p>&gt; 直接把内容生成到指定文件，会覆盖源文件中的内容，还有一种用途是直接生成一个空白文件，相当于touch命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> a.txt 输出1\n<span class=\"token comment\"># >>尾部追加，不会覆盖掉文件中原有的内容</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">2</span> <span class=\"token operator\">>></span> a.txt 输出1 <span class=\"token number\">2</span>\n\n<span class=\"token function\">cat</span> file1 <span class=\"token operator\">>></span> file2 <span class=\"token comment\"># 把file1的文档内容输入file2这个文档里</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"用户-x2F-用户组\"><a href=\"#用户-x2F-用户组\" class=\"headerlink\" title=\"用户&#x2F;用户组\"></a>用户&#x2F;用户组</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看linux所有用户</span>\n<span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span> /etc/passwd\n<span class=\"token comment\"># 查看linux所有用户组</span>\n<span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span> /etc/group <span class=\"token comment\"># -d : 以“：”为分割符进行分割 -f 1展示第一列</span>\n<span class=\"token function\">groups</span> <span class=\"token comment\"># 用户名：查看用户所在用户组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"centos7-定时运行任务脚本\"><a href=\"#centos7-定时运行任务脚本\" class=\"headerlink\" title=\"centos7 定时运行任务脚本\"></a>centos7 定时运行任务脚本</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装crontab</span>\nyum <span class=\"token function\">install</span> vixie-cron\nyum <span class=\"token function\">install</span> crontabs\n<span class=\"token comment\"># 开启crontab服务</span>\n<span class=\"token function\">service</span> crond start <span class=\"token comment\"># 启动服务</span>\n<span class=\"token function\">service</span> crond stop <span class=\"token comment\"># 关闭服务</span>\n<span class=\"token function\">service</span> crond restart <span class=\"token comment\"># 重新启动服务</span>\n<span class=\"token function\">service</span> crond reload <span class=\"token comment\"># 又一次加载配置</span>\n<span class=\"token comment\"># 添加任务(两种方式)</span>\n<span class=\"token number\">1</span>. <span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span>  * * * * * /usr/local/a.sh。\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-l</span> <span class=\"token comment\"># 列出当前的全部调度任务</span>\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-u</span> jp <span class=\"token comment\">#列出用户jp的全部调度任务</span>\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-r</span> <span class=\"token comment\"># 删除全部任务调度工作</span>\n<span class=\"token number\">2</span>. <span class=\"token comment\"># 直接编辑 vim /etc/crontab</span>\n<span class=\"token comment\"># 添加* * * * * root /usr/local/a.sh</span>\n<span class=\"token comment\"># 注意要使用绝对路径</span>\n\n<span class=\"token comment\"># 查看邮件</span>\n<span class=\"token function\">cat</span> /var/spool/mail/root\n<span class=\"token comment\"># 查看日志</span>\n<span class=\"token builtin class-name\">cd</span> /var/log\n<span class=\"token function\">ls</span> <span class=\"token function\">cron</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s/c91XWEQvr9Axcf0hjvuKgg\">Linux定时任务调度(crontab)，太实用了！</a></p>\n<h4 id=\"修改文件所属用户和用户组\"><a href=\"#修改文件所属用户和用户组\" class=\"headerlink\" title=\"修改文件所属用户和用户组\"></a>修改文件所属用户和用户组</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 修改a.txt文件所属用户为jay，所属用户组为fefjay</span>\n<span class=\"token function\">chown</span> jay:fefjay a.txt\n<span class=\"token comment\"># 递归修改文件夹my及包含的所有子文件（夹）的所属用户和用户组</span>\n<span class=\"token function\">chown</span> <span class=\"token parameter variable\">-R</span> jay:fefjay my<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"curl命令\"><a href=\"#curl命令\" class=\"headerlink\" title=\"curl命令\"></a>curl命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'login=emma＆password=123'</span>-X POST URL\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'login=emma'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'password=123'</span> <span class=\"token parameter variable\">-X</span> POST URL\n<span class=\"token parameter variable\">-X</span> <span class=\"token comment\"># POST可以省略</span>\n\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-L</span> <span class=\"token parameter variable\">-X</span> POST URL <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'id=3&amp;pwd=jae_123'</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\"abc\":123,\"bcd\":\"nihao\"&#125;'</span> URL\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/angle_chen123/article/details/120675472\">Linux curl命令最全详解</a></li>\n<li><a href=\"https://www.cnblogs.com/fan-gx/p/12321351.html\">curl其他参数介绍</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ryhphDFvx0ml9NrDUks2NA\">堪称神器的命令行工具系列——curl</a></li>\n</ul>\n<h4 id=\"Linux系统服务\"><a href=\"#Linux系统服务\" class=\"headerlink\" title=\"Linux系统服务\"></a>Linux系统服务</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加自定义系统服务的目录：</span>\n/lib/systemd/system <span class=\"token comment\"># lib/systemd/system真实地址是/usr/lib/system/system地址，</span>\n/usr/lib/systemd/system/ <span class=\"token comment\"># 软件包安装的单元</span>\n/etc/systemd/system/ <span class=\"token comment\"># 系统管理员安装的单元,优先级更高</span>\n<span class=\"token comment\"># 优先级为 /etc/systemd/system /run/systemd/system /lib/systemd/system</span>\n<span class=\"token comment\"># 如果同一选项三个地方都配置了，优先级高的会覆盖优先级低的。</span>\n\n<span class=\"token comment\"># 开机启动执行命令：编辑/etc/rc.d/rc.local</span>\n<span class=\"token comment\"># 添加要执行的命令或者脚本,并且赋予执行权限</span>\n<span class=\"token function\">chmod</span> +x /etc/rc.d/rc.local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看隐藏目录\"><a href=\"#查看隐藏目录\" class=\"headerlink\" title=\"查看隐藏目录\"></a>查看隐藏目录</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"图形化页面卡死重启\"><a href=\"#图形化页面卡死重启\" class=\"headerlink\" title=\"图形化页面卡死重启\"></a>图形化页面卡死重启</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> gnome-shell pid<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看centos版本\"><a href=\"#查看centos版本\" class=\"headerlink\" title=\"查看centos版本\"></a>查看centos版本</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/redhat-release<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"重命名文件\"><a href=\"#重命名文件\" class=\"headerlink\" title=\"重命名文件\"></a>重命名文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 例:把a替换为xxx</span>\n<span class=\"token function\">rename</span> “a” “xxx” *.txt\n<span class=\"token comment\"># 或者使用mv命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-antu</span> <span class=\"token comment\"># 可以查看所有tcp、udp端口开放情况</span>\n<span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-ntlp</span> <span class=\"token comment\"># 查看正在运行的端口(t代表tcp 加u查看udp)</span>\n<span class=\"token function\">lsof</span> -i: <span class=\"token number\">9090</span> <span class=\"token comment\"># 查看某一端口运行的程序</span>\n<span class=\"token function\">netstat</span> -ntulp<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token comment\"># 端口号 查看指定端口被哪个进程占用的情况</span>\n<span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> abc <span class=\"token comment\"># 查找abc进程</span>\n<span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aux</span> <span class=\"token comment\"># 显示所有进程</span>\n<span class=\"token comment\"># 发现A进程占用该端口号</span>\n<span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> A <span class=\"token comment\">#查看pid</span>\n\n<span class=\"token function\">kill</span> <span class=\"token number\">9</span> pid <span class=\"token comment\">#杀掉进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"找到pid并kill的shell脚本\"><a href=\"#找到pid并kill的shell脚本\" class=\"headerlink\" title=\"找到pid并kill的shell脚本\"></a>找到pid并kill的shell脚本</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\"># #!/bin/bash是指此脚本使用/bin/bash来解释执行。其中，#!是一个特殊的表示符，其后，跟着解释此脚本的shell路径。命令文件所在的路径是/bin/sh或者/usr/bin/sh.bash只是shell的一种，还有很多其它shell，如：sh,csh,ksh,tcsh.除第一行外，脚本中所有以“#”开头的行都是注释。</span>\n<span class=\"token comment\"># 注意不要有空格，否则解释成命令</span>\n<span class=\"token assign-left variable\">jar</span><span class=\"token operator\">=</span>abc.jar\n<span class=\"token comment\"># ``等价于$()</span>\n<span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token function\">java</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> $jar <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $2&#125;'</span><span class=\"token variable\">)</span></span>\n<span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token variable\">$pid</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$pid</span> killed\"</span>\n<span class=\"token function\">nohup</span> <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.runoob.com/linux/linux-shell.html\">shell菜鸟教程</a></p>\n<h4 id=\"设置静态ip后无法连接外网的问题\"><a href=\"#设置静态ip后无法连接外网的问题\" class=\"headerlink\" title=\"设置静态ip后无法连接外网的问题\"></a>设置静态ip后无法连接外网的问题</h4><p>因为动态ip会自动分配DNS 而静态ip需要手动配置DNS<br>centos7在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 写入DNS1&#x3D;114.114.114.114<br>ubuntu在&#x2F;etc&#x2F;resolv.conf写入nameserver 114.114.114.114</p>\n<p><a href=\"https://www.cnblogs.com/adforce/p/3363681.html\">Linux配置IP地址</a></p>\n<h4 id=\"命令行更改MAC地址\"><a href=\"#命令行更改MAC地址\" class=\"headerlink\" title=\"命令行更改MAC地址\"></a>命令行更改MAC地址</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/sbin/ifconfig eth0 down\n/sbin/ifconfig eth0 hw ether 00:50:56:94:16:a8\n/sbin/ifconfig eth0 up\n<span class=\"token function\">service</span> network restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看文件\"><a href=\"#查看文件\" class=\"headerlink\" title=\"查看文件\"></a>查看文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> h.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token comment\"># \"hello\"过滤掉特定字符串,效率低，因为有管道</span>\n<span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token string\">\"hello\"</span> h.txt <span class=\"token comment\"># 可以直接跟文件名，效率快</span>\n\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> k <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> +k <span class=\"token operator\">=</span> <span class=\"token function\">head</span> k\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> k <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-k</span> <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> k <span class=\"token comment\"># k为指定行数</span>\n\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> +3 <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-3</span> <span class=\"token comment\"># 显示文件前3行</span>\n\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-3</span> <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-3</span>  <span class=\"token comment\"># 显示文件最后3行</span>\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-k</span> <span class=\"token comment\"># 其中-k的意义是除了最后k行的所有行</span>\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-3</span> filename <span class=\"token comment\"># 查看filename除了最后3行的所有行</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> +k <span class=\"token comment\"># 是从第k行开始，输出所有行</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> +3 <span class=\"token comment\"># 从第三行开始输出所有行</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> finename <span class=\"token comment\"># 实时跟踪文件，如果文件不存在，则终止</span>\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-F</span> filename <span class=\"token comment\"># 如果文件不存在，会继续尝试</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"源码安装配置-configure-、编译-make-、安装-make-install\"><a href=\"#源码安装配置-configure-、编译-make-、安装-make-install\" class=\"headerlink\" title=\"源码安装配置(configure)、编译(make)、安装(make install)\"></a>源码安装配置(configure)、编译(make)、安装(make install)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/test\n<span class=\"token comment\"># 编译出错时，清除编译生成的文件</span>\n<span class=\"token function\">make</span> distclean\n<span class=\"token comment\"># 编译安装到指定目录下</span>\n<span class=\"token function\">make</span> <span class=\"token assign-left variable\">PREFIX</span><span class=\"token operator\">=</span>/usr/local/redis <span class=\"token function\">install</span>\n<span class=\"token comment\"># 卸载</span>\n<span class=\"token function\">make</span> uninstall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"设置-keepalived-服务开机启动\"><a href=\"#设置-keepalived-服务开机启动\" class=\"headerlink\" title=\"设置 keepalived 服务开机启动\"></a>设置 keepalived 服务开机启动</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> keepalived on\n<span class=\"token function\">chkconfig</span> <span class=\"token parameter variable\">--add</span> name\n          <span class=\"token parameter variable\">--del</span> name\n          <span class=\"token parameter variable\">--list</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Ubuntu图形界面允许root登陆\"><a href=\"#Ubuntu图形界面允许root登陆\" class=\"headerlink\" title=\"Ubuntu图形界面允许root登陆\"></a>Ubuntu图形界面允许root登陆</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置root密码</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root  <span class=\"token comment\"># 终端会先验证密码 然后在设置root密码</span>\n<span class=\"token function\">vi</span> /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf\n<span class=\"token comment\"># 增加两行  greeter-show-manual-login=true all-guest=false#不允许guest用户登陆</span>\n<span class=\"token builtin class-name\">cd</span> /etc/pam.d  <span class=\"token comment\"># 编辑gdm-autologin和gdm-password文件 注释掉auth required pam_succeed_if.so user != root quiet_success</span>\n<span class=\"token function\">vi</span> /root/.profile <span class=\"token comment\"># 将mesg n || true 修改为 tty -s &amp;&amp; mesg n || true</span>\n<span class=\"token function\">reboot</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://www.cnblogs.com/yixius/articles/6971054.html\">解决Ubuntu的root账号无法登录SSH问题</a></p>\n<h4 id=\"查看指定目录大小\"><a href=\"#查看指定目录大小\" class=\"headerlink\" title=\"查看指定目录大小\"></a>查看指定目录大小</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">du</span> <span class=\"token parameter variable\">-h</span> --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> /usr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看磁盘空间\"><a href=\"#查看磁盘空间\" class=\"headerlink\" title=\"查看磁盘空间\"></a>查看磁盘空间</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"查看内存\"><a href=\"#查看内存\" class=\"headerlink\" title=\"查看内存\"></a>查看内存</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">free</span> <span class=\"token parameter variable\">-h</span>\n\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 表示更新两次后终止更新显示并退出</span>\n<span class=\"token function\">top</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 表示更新周期为3秒</span>\n<span class=\"token comment\"># top命令进入展示信息后按大写M表示按照内存大小排序展示 按大写P表示按照CPU使用率进行排序</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"读、写、运行\"><a href=\"#读、写、运行\" class=\"headerlink\" title=\"读、写、运行\"></a>读、写、运行</h4><p>三项权限可以用数字表示，r&#x3D;4,w&#x3D;2,x&#x3D;1 rw-r–r–用数字表示成644</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">754</span> filename\n<span class=\"token comment\"># 将filename文件的读写运行权限赋予文件所有者，把读和运行的权限赋予群组用户，把读的权限赋予其他用户。</span>\n<span class=\"token comment\"># chmod +x是将文件状态改为可执行，而chmod 777是改变文件读写权限。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"centos7卸载openjdk\"><a href=\"#centos7卸载openjdk\" class=\"headerlink\" title=\"centos7卸载openjdk\"></a>centos7卸载openjdk</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> jdk  <span class=\"token comment\"># 查看已有的openjdk -q(query) -a(all)</span>\n<span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> <span class=\"token punctuation\">(</span>上条命令的查询结果<span class=\"token punctuation\">)</span> <span class=\"token comment\">#卸载</span>\n\nubuntu \n<span class=\"token function\">apt-get</span> remove openjdk*\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"rpm参数\"><a href=\"#rpm参数\" class=\"headerlink\" title=\"rpm参数\"></a>rpm参数</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span>a　查询所有套件。\n<span class=\"token punctuation\">-</span>b&lt;完成阶段<span class=\"token punctuation\">></span>&lt;套件档<span class=\"token punctuation\">></span>+或<span class=\"token punctuation\">-</span>t&lt;完成阶段<span class=\"token punctuation\">></span>&lt;套件档<span class=\"token punctuation\">></span>+　设置包装套件的完成阶段，并指定套件档的文件名称。\n<span class=\"token punctuation\">-</span>c　只列出组态配置文件，本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span>d　只列出文本文件，本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span>e&lt;套件档<span class=\"token punctuation\">></span>或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>erase&lt;套件档<span class=\"token punctuation\">></span>　删除指定的套件。\n<span class=\"token punctuation\">-</span>f&lt;文件<span class=\"token punctuation\">></span>+　查询拥有指定文件的套件。\n<span class=\"token punctuation\">-</span>h或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>hash　套件安装时列出标记。\n<span class=\"token punctuation\">-</span>i　显示套件的相关信息。\n<span class=\"token punctuation\">-</span>i&lt;套件档<span class=\"token punctuation\">></span>或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>install&lt;套件档<span class=\"token punctuation\">></span>　安装指定的套件档。\n<span class=\"token punctuation\">-</span>l　显示套件的文件列表。\n<span class=\"token punctuation\">-</span>p&lt;套件档<span class=\"token punctuation\">></span>+　查询指定的RPM套件档。\n<span class=\"token punctuation\">-</span>q　使用询问模式，当遇到任何问题时，rpm指令会先询问用户。\n<span class=\"token punctuation\">-</span>R　显示套件的关联性信息。\n<span class=\"token punctuation\">-</span>s　显示文件状态，本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span>U&lt;套件档<span class=\"token punctuation\">></span>或<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>upgrade&lt;套件档<span class=\"token punctuation\">></span>升级指定的套件档。\n<span class=\"token punctuation\">-</span>v　显示指令执行过程。\n<span class=\"token punctuation\">-</span>vv　详细显示指令执行过程，便于排错。\n<span class=\"token punctuation\">-</span>addsign&lt;套件档<span class=\"token punctuation\">></span>+　在指定的套件里加上新的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>allfiles　安装所有文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>allmatches　删除符合指定的套件所包含的文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>badreloc　发生错误时，重新配置文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>buildroot&lt;根目录<span class=\"token punctuation\">></span>　设置产生套件时，欲当作根目录的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>changelog　显示套件的更改记录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>checksig&lt;套件档<span class=\"token punctuation\">></span>+　检验该套件的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>clean　完成套件的包装后，删除包装过程中所建立的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dbpath&lt;数据库目录<span class=\"token punctuation\">></span>　设置欲存放RPM数据库的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dump　显示每个文件的验证信息。本参数需配合\"<span class=\"token punctuation\">-</span>l\"参数使用。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>excludedocs　安装套件时，不要安装文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>excludepath&lt;排除目录<span class=\"token punctuation\">></span>　忽略在指定目录里的所有文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force　强行置换套件或文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ftpproxy&lt;主机名称或IP地址<span class=\"token punctuation\">></span>　指定FTP代理服务器。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ftpport&lt;通信端口<span class=\"token punctuation\">></span>　设置FTP服务器或代理服务器使用的通信端口。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>help　在线帮助。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>httpproxy&lt;主机名称或IP地址<span class=\"token punctuation\">></span>　指定HTTP代理服务器。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>httpport&lt;通信端口<span class=\"token punctuation\">></span>　设置HTTP服务器或代理服务器使用的通信端口。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ignorearch　不验证套件档的结构正确性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ignoreos　不验证套件档的结构正确性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ignoresize　安装前不检查磁盘空间是否足够。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>includedocs　安装套件时，一并安装文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>initdb　确认有正确的数据库可以使用。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>justdb　更新数据库，当不变动任何文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nobulid　不执行任何完成阶段。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nodeps　不验证套件档的相互关联性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nofiles　不验证文件的属性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nogpg　略过所有GPG的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nomd5　不使用MD5编码演算确认文件的大小与正确性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>nopgp　略过所有PGP的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>noorder　不重新编排套件的安装顺序，以便满足其彼此间的关联性。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>noscripts　不执行任何安装Script文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>notriggers　不执行该套件包装内的任何Script文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>oldpackage　升级成旧版本的套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>percent　安装套件时显示完成度百分比。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>pipe&lt;执行指令<span class=\"token punctuation\">></span>　建立管道，把输出结果转为该执行指令的输入数据。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>prefix&lt;目的目录<span class=\"token punctuation\">></span>　若重新配置文件，就把文件放到指定的目录下。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>provides　查询该套件所提供的兼容度。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>queryformat&lt;档头格式<span class=\"token punctuation\">></span>　设置档头的表示方式。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>querytags　列出可用于档头格式的标签。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rcfile&lt;配置文件<span class=\"token punctuation\">></span>　使用指定的配置文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rebulid&lt;套件档<span class=\"token punctuation\">></span>　安装原始代码套件，重新产生二进制文件的套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rebuliddb　以现有的数据库为主，重建一份数据库。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>recompile&lt;套件档<span class=\"token punctuation\">></span>　此参数的效果和指定\"<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rebulid\"参数类似，当不产生套件档。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>relocate&lt;原目录<span class=\"token punctuation\">></span>=&lt;新目录<span class=\"token punctuation\">></span>　把本来会放到原目录下的文件改放到新目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>replacefiles　强行置换文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>replacepkgs　强行置换套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>requires　查询该套件所需要的兼容度。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>resing&lt;套件档<span class=\"token punctuation\">></span>+　删除现有认证，重新产生签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rmsource　完成套件的包装后，删除原始代码。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>rmsource&lt;文件<span class=\"token punctuation\">></span>　删除原始代码和指定的文件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>root&lt;根目录<span class=\"token punctuation\">></span>　设置欲当作根目录的目录。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>scripts　列出安装套件的Script的变量。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>setperms　设置文件的权限。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>setugids　设置文件的拥有者和所属群组。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>short<span class=\"token punctuation\">-</span>circuit　直接略过指定完成阶段的步骤。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>sign　产生PGP或GPG的签名认证。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>target=&lt;安装平台<span class=\"token punctuation\">></span>+　设置产生的套件的安装平台。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>test　仅作测试，并不真的安装套件。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>timecheck&lt;检查秒数<span class=\"token punctuation\">></span>　设置检查时间的计时秒数。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>triggeredby&lt;套件档<span class=\"token punctuation\">></span>　查询该套件的包装者。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>triggers　展示套件档内的包装Script。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>verify　此参数的效果和指定\"<span class=\"token punctuation\">-</span>q\"参数相同。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>version　显示版本信息。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>whatprovides&lt;功能特性<span class=\"token punctuation\">></span>　查询该套件对指定的功能特性所提供的兼容度。\n<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>whatrequires&lt;功能特性<span class=\"token punctuation\">></span>　查询该套件对指定的功能特性所需要的兼容度。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"从服务器复制文件到本地\"><a href=\"#从服务器复制文件到本地\" class=\"headerlink\" title=\"从服务器复制文件到本地\"></a>从服务器复制文件到本地</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 从服务器复制文件到本地</span>\n<span class=\"token function\">scp</span> root@192.168.1.100:/data/test.txt /home/myfile/\n<span class=\"token comment\"># 从服务器复制文件夹到本地</span>\n<span class=\"token function\">scp</span> <span class=\"token parameter variable\">-r</span> root@192.168.1.100:/data/ /home/myfile/\n<span class=\"token comment\"># 从本地复制文件到服务器</span>\n<span class=\"token function\">scp</span> /home/myfile/test.txt root@192.168.1.100:/data/\n<span class=\"token comment\"># 从本地复制文件夹到服务器</span>\n<span class=\"token function\">scp</span> <span class=\"token parameter variable\">-r</span> /home/myfile/ root@192.168.1.100:/data/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ssh双向免密登录服务器A、B\"><a href=\"#ssh双向免密登录服务器A、B\" class=\"headerlink\" title=\"ssh双向免密登录服务器A、B\"></a>ssh双向免密登录服务器A、B</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 生成密钥</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> rsa\n<span class=\"token comment\"># 生成密钥的位置</span>\n<span class=\"token builtin class-name\">cd</span> /root/.ssh/\n<span class=\"token comment\"># 此命令在A机器执行，目的将A的公钥发送至B机器</span>\n<span class=\"token function\">scp</span> id_rsa.pub root@BIP地址:/root/.ssh/id_rsa_A.pub\n<span class=\"token comment\"># 此命令在B机器执行，目的将B的公钥发送至A机器</span>\n<span class=\"token function\">scp</span> id_rsa.pub root@AIP地址:/root/.ssh/id_rsa_B.pub\n\n<span class=\"token comment\"># 如果发送文件夹 使用scp -r /test root@B:/root/test</span>\n\n<span class=\"token comment\"># 查看远程复制是否成功 写入密钥</span>\n<span class=\"token function\">cat</span> id_rsa_A<span class=\"token punctuation\">(</span>或者B<span class=\"token punctuation\">)</span>.pub <span class=\"token operator\">>></span> authorized_keys\n<span class=\"token comment\"># 如果出现agent admitted failure to sign using the key</span>\nssh-add ~/.ssh/id_rsa \n<span class=\"token comment\"># ssh A和ssh B测试ssh本机和远程是否已经免密登录（第一次免密登录需要输入密码，以后不需要）</span>\nssh登陆 <span class=\"token function\">ssh</span> root@ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s/1e4aGp_cx0E_qCHVuS3GMg\">科普：什么是SSH？</a></p>\n<h4 id=\"centos7-x2F-ubuntu通用\"><a href=\"#centos7-x2F-ubuntu通用\" class=\"headerlink\" title=\"centos7&#x2F;ubuntu通用\"></a>centos7&#x2F;ubuntu通用</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 默认命令行</span>\nsystemctl set-default multi-user.target  （init <span class=\"token number\">3</span>）\n\n<span class=\"token comment\"># 默认图形页面</span>\nsystemctl set-default graphical.target  <span class=\"token punctuation\">(</span>init <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"查看系统内核-uname-r\"><a href=\"#查看系统内核-uname-r\" class=\"headerlink\" title=\"查看系统内核 uname -r\"></a>查看系统内核 uname -r</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 全部内核</span>\n<span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> kernel\nyum list installed <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> kernel\n<span class=\"token comment\">#删除多余内核</span>\nyum remove kernel-<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"测试端口是否开通\"><a href=\"#测试端口是否开通\" class=\"headerlink\" title=\"测试端口是否开通\"></a>测试端口是否开通</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-v</span> <span class=\"token parameter variable\">-p</span> port username@ip\n<span class=\"token comment\"># -v 调试模式(会打印日志) -p 指定端口 username可以随意</span>\n\n<span class=\"token comment\"># 使用 telnet 命令</span>\ntelnet <span class=\"token function\">ip</span> 端口\n\n<span class=\"token comment\"># 使用nc命令</span>\n<span class=\"token function\">nc</span> <span class=\"token parameter variable\">-vu</span> <span class=\"token function\">ip</span> 端口\n<span class=\"token comment\"># -v 输出交互或出错信息，新手调试时尤为有用,-u指定nc使用UDP协议，默认为TCP</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"arthas调试常用命令\"><a href=\"#arthas调试常用命令\" class=\"headerlink\" title=\"arthas调试常用命令\"></a>arthas调试常用命令</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cls 清空当前屏幕内容\n\ntrace 类名 方法名  &#39;#cost &gt; 10&#39;\n查看某个类的某个方法执行多长时间 (加后面参数只会展示耗时大于10ms的调用路径)\n\nsc 类名 查看该类是否被jvm加载\n\nsm 类名 查看该类的方法信息\n\njad 类名 反编译\n\nwatch 类名 方法名 &quot;&#123;params,returnObj,throwExp&#125;&quot; -e -b  -x 2\n观察方法出参，返回值，-b在调用之前观察 -e在方法异常之后观察 -x指定输出结果的遍历深度 默认为1\n\nthread 查看线程\n\nredefine class文件(带class后缀名):热部署，修改jvm的class并不会修改本地的class文件 服务重启后失效 注意class新增属性、方法且方法正在运行的时候会热部署失败\n\n退出arthas\nquit或exit 退出当前连接，完全退出使用stop(所有客户端连接都会退出)\n\nlogger --name ROOT --level debug动态修改日志级别<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/quick-start.html\">arthas官方文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/7RMjfIYlmskMsifnhIzxgA\">学会arthas，让你3年经验掌握5年功力</a></li>\n</ul>\n<h4 id=\"Linux交换空间-swap-space\"><a href=\"#Linux交换空间-swap-space\" class=\"headerlink\" title=\"Linux交换空间(swap space)\"></a>Linux交换空间(swap space)</h4><p>交换空间是磁盘上的一块区域，可以是一个分区，也可以是一个文件，或者是他们的组合。简单点说，当系统物理内存吃紧时，Linux会将内存中不常访问的数据保存到swap上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问swap上存储的内容时，再将swap上的数据加载到内存中，这就是我们常说的swap out和swap in</p>\n<p><strong>设置交换空间</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 在Home目录创建一个大小为16G的swap文件，块大小为1MByte，总共1K个块，也就是总共1GB</span>\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=~</span>/swapfile <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>1M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>1k\n<span class=\"token comment\"># 2. 格式化新增的swap文件</span>\n<span class=\"token function\">mkswap</span> ～/swapfile\n<span class=\"token comment\"># 3. 启动新增的swap文件</span>\n<span class=\"token function\">swapon</span> ～/swapfile\n<span class=\"token comment\"># 4. 查看swap空间大小，发现增加了16G</span>\n<span class=\"token function\">free</span>\n<span class=\"token comment\"># 5. 关闭新增的swap文件</span>\nswapoff ～/swapfile\n<span class=\"token comment\"># 6. 设置开机自启动，开机后自动启动新增的swap文件，在/etc/fstab中新增如下命令</span>\n/swapfile none swap sw <span class=\"token number\">0</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 一、查看磁盘挂载目录</span>\n<span class=\"token function\">df</span> -h（查看分区情况及数据盘名称）\n<span class=\"token function\">mkdir</span> /usr（如果没有就创建，否则此步跳过）\n<span class=\"token comment\"># 二、卸载磁盘</span>\n<span class=\"token function\">umount</span> /data（卸载硬盘已挂载的data目录）\n<span class=\"token comment\"># 三、挂载到新目录</span>\n<span class=\"token function\">mount</span> /dev/vdb1 /usr（挂载到usr目录）\n<span class=\"token comment\"># 四、修改 /etc/fstab</span>\n<span class=\"token function\">vi</span> /etc/fstab （编辑fstab文件修改或添加，使重启后可以自动挂载）\n/dev/vdb1 /usr ext3 auto <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># 五、重新挂载所有分区</span>\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-a</span>\n<span class=\"token comment\"># 六、验证</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> /usr/\n<span class=\"token comment\"># 七、重启服务器</span>\n<span class=\"token function\">reboot</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是：在实际操作过程中，挂载的目录会覆盖掉原目录的文件信息。可以先进行旧目录备份，挂载完成后在恢复数据。</p>\n<h4 id=\"source-filename与sh-filename及-x2F-filename执⾏脚本的区别\"><a href=\"#source-filename与sh-filename及-x2F-filename执⾏脚本的区别\" class=\"headerlink\" title=\"source filename与sh filename及.&#x2F;filename执⾏脚本的区别\"></a>source filename与sh filename及.&#x2F;filename执⾏脚本的区别</h4><ol>\n<li>当shell脚本具有可执⾏权限时，⽤sh filename与.&#x2F;filename执⾏脚本是没有区别得。.&#x2F;filename是因为当前⽬录没有在PATH中，所有”.”是⽤来表⽰当前⽬录的。</li>\n<li>sh filename重新建⽴⼀个⼦shell，在⼦shell中执⾏脚本⾥⾯的语句，该⼦shell继承⽗shell的环境变量，但⼦shell新建的、改变的变量不会被带回⽗shell，除⾮使⽤export。</li>\n<li>source filename：这个命令其实只是简单地读取脚本⾥⾯的语句依次在当前shell⾥⾯执⾏，没有建⽴新的⼦shell。那么脚本⾥⾯所有新建、改变变量的语句都会保存在当前shell⾥⾯</li>\n</ol>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><h4 id=\"环境变量文件\"><a href=\"#环境变量文件\" class=\"headerlink\" title=\"环境变量文件\"></a>环境变量文件</h4><ul>\n<li>&#x2F;etc&#x2F;profile：此文件为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行，并从&#x2F;etc&#x2F;profile.d目录的配置文件中收集shell的设置</li>\n<li>&#x2F;etc&#x2F;bashrc：为每一个运行bash shell的用户执行此文件，当bash shell被打开时，该文件被读取也就是说，当用户shell执行了bash时，运行这个文件；</li>\n<li>~&#x2F;.bash_profile：每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下，它设置一些环境变量，执行用户的.bashrc文件</li>\n<li>~&#x2F;.bashrc：该文件包含用于你的bash shell的bash信息，当登录时以及每次打开新的shell时，该文件被读取。该文件存储的是专属于个人bash shell的信息，当登录时以及每次打开一个新的shell时，执行这个文件。在这个文件里可以自定义用户专属的个人信息。</li>\n<li>~&#x2F;.bash_logout：当每次退出系统(退出bash shell)时，执行该文件；另外，&#x2F;etc&#x2F;profile中设定的变量(全局)的可以作用于任何用户，而~&#x2F;.bashrc等中设定的变量(局部)只能继承&#x2F;etc&#x2F;profile中的变量，他们是“父子”关系；</li>\n</ul>\n<h4 id=\"Ubuntu下bash的几个初始化文件\"><a href=\"#Ubuntu下bash的几个初始化文件\" class=\"headerlink\" title=\"Ubuntu下bash的几个初始化文件\"></a>Ubuntu下bash的几个初始化文件</h4><ul>\n<li>&#x2F;etc&#x2F;profile 全局(公有)配置，不管是哪个用户，登录时都会读取该文件；</li>\n<li>&#x2F;etc&#x2F;bashrc Ubuntu下没有此文件，与之对应的是&#x2F;etc&#x2F;bash.bashrc，它也是全局的；bash执行时，不管是何种方式，都会读取此文件；</li>\n<li>~&#x2F;.profile 若bash是以login方式执行时，读取~&#x2F;.bash_profile，若它不存在，则读取~&#x2F;.bash_login，若前两者不存在，读取~&#x2F;.profile；另外，图形模式登录时，此文件将被读取，即使存在~&#x2F;.bash_profile和~&#x2F;.bash_login；</li>\n<li>~&#x2F;.bash_login 若bash是以login方式执行时，读取~&#x2F;.bash_profile，若它不存在，则读取~&#x2F;.bash_login，若前两者都不存在，则读取~&#x2F;.profile；</li>\n<li>~&#x2F;.bash_profile Ubuntu默认没有此文件，可新建。只有bash是以login形式执行时，才会读取此文件。通常该配置文件还会配置成去读取~&#x2F;.bashrc；</li>\n<li>~&#x2F;.bashrc当bash是以non-login形式执行时，读取此文件。若是以login形式执行，则不会读取此文件；</li>\n<li>~&#x2F;.bash_logout注销时，且是login形式，此文件才会读取。也就是说，在文本模式注销时，此文件会被读取，图形模式注销时，此文件不会被读取。</li>\n<li>&#x2F;etc&#x2F;environment系统的环境变量，系统应用程序的执行与用户环境可以是无关的，但与系统环境是相关的</li>\n</ul>\n<ol>\n<li>在登录时,操作系统定制用户环境时使用的第一个文件就是&#x2F;etc&#x2F;profile,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。</li>\n<li>在登录时操作系统使用的第二个文件是&#x2F;etc&#x2F;environment，系统在读取你自己的profile前,设置环境文件的环境变量。</li>\n<li>在登录时用到的第三个文件是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。&#x2F;etc&#x2F;bashrc:为每一个运行bash shell的用户执行此文件。当bash shell被打开时,该文件被读取。</li>\n<li>&#x2F;etc&#x2F;environment是设置整个系统的环境，而&#x2F;etc&#x2F;profile是设置所有用户的环境，前者与登录用户无关，后者与登录用户有关。<br>先执行&#x2F;etc&#x2F;enviroment，后执行&#x2F;etc&#x2F;profile</li>\n</ol>\n<p><a href=\"https://mp.weixin.qq.com/s/D32FE4CS2pT89czVUv0SOg\">Linux环境变量配置的6种方法</a></p>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><a href=\"https://javaguide.cn/cs-basics/operating-system/linux-intro.html\">Linux基础知识总结</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/wejhjmbtS16AdlDo0JiLMA\">程序员必备的150个Linux命令！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/TvUcd7mLkHxD_botoo7BQg\">新人必备的Linux命令！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/43JCaDehv0nbzDKbe0S8Kg\">1000+常用的Linux命令来袭</a></li>\n<li><a href=\"https://www.zhihu.com/question/319076999/answer/672319588?utm_source=wechat_timeline&utm_medium=social&utm_oi=1040923520439672832&from=timeline\">作为一名Java开发人员，应该从多大程度上掌握Linux？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2FDa8fOm6x4-1MP9l9N7vA\">30个实例详解TOP命令</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/liiz58PC1JlfPaEW81wUpg\">ping命令的7大用法,看完秒变大神！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/4pPdcSak3YLyqiz4Ns8htQ\">听说你ping用的很6,给我图解一下ping的工作原理</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fLY3JH5_4_h4vABV7B-4uw\">ping命令还能这么玩？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247494347&idx=1&sn=2f6bfe4a5716d4b0aba6d8b5348f7033&source=41#wechat_redirect\">后端线上问题排查常用命令收藏</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jlmPjqFTfP4JNmbhpGoHsA\">Java开发常用的Linux命令知识积累</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/F_0kiOWgQS4BINx2t2Rqtw\">这篇Linux总结的真棒！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/UT3RYrUGP2E5JQbf1Z8c8w\">Linux远程桌面管理工具！功能真心强大</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/kxvc95RJoSKqcXwwmyrPKg\">在Linux上保护SSH服务器连接的8种方法</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zmfCC083VBrA8P6uWHL2DQ\">发现谁用kill -9关闭程序就开除！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hXDAZD0LUJ9g85t6fkBR-Q\">万字详解Linux常用指令</a></li>\n</ul>\n","categories":[],"tags":[{"name":"计算机","path":"api/tags/计算机.json"}]}