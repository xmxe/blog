{"title":"Nginx","slug":"Nginx","date":"2022-09-27T07:51:22.667Z","updated":"2023-07-28T05:27:46.906Z","comments":true,"path":"api/articles/Nginx.json","excerpt":null,"covers":"https://picx1.zhimg.com/v2-e68d524210343613129267bd2cb75a0d_1440w.jpg","content":"\r\n\r\n## Nginx安装\r\n\r\n### 下载\r\n\r\n```shell\r\n# 下载nginx:\r\nwget http://nginx.org/download/nginx-1.8.1.tar.gz\r\n# 下载openssl:\r\nwget https://www.openssl.org/source/openssl-fips-2.0.16.tar.gz\r\n# 下载zlib:\r\nwget http://www.zlib.net/zlib-1.2.11.tar.gz\r\n# 下载pcre:\r\nwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\r\n# 如果没有安装c++编译环境，还得安装，通过```yum install gcc-c++```完成安装\r\n```\r\n\r\n### 编译安装\r\n```shell\r\n# openssl：\r\n[root@localhost] tar zxvf openssl-fips-2.0.16.tar.gz\r\n[root@localhost] cd openssl-fips-2.0.16\r\n[root@localhost] ./config && make && make install\r\n\r\n# pcre:\r\n[root@localhost] tar zxvf pcre-8.39.tar.gz\r\n[root@localhost] cd pcre-8.39\r\n[root@localhost]  ./configure && make && make install\r\n\r\n# zlib:\r\n[root@localhost]tar zxvf zlib-1.2.11.tar.gz\r\n[root@localhost] cd zlib-1.2.11\r\n[root@localhost]  ./configure && make && make install\r\n\r\n# 最后安装nginx\r\n[root@localhost]tar zxvf nginx-1.8.1.tar.gz\r\n[root@localhost] cd nginx-1.8.1\r\n[root@localhost]  ./configure && make && make install\r\n```\r\n\r\n### 启动nginx\r\n```shell\r\n/usr/local/nginx/sbin/nginx\r\n/usr/local/nginx/sbin/nginx -s stop # 立即停止nginx，不保存相关信息\r\n/usr/local/nginx/sbin/nginx -s quit  # 正常退出nginx，保存相关信息\r\n/usr/local/nginx/sbin/nginx -s reload # 重启\r\n```\r\n> [Linux安装Nginx详细图解教程](https://www.cnblogs.com/lovexinyi8/p/5845017.html)\r\n\r\n### 将nginx做成系统服务并且开机自启动\r\n\r\n由于是源码安装，需要手动创建nginx.service服务\r\n> 不止nginx，其他源码安装的想要实现开机自启动就在/lib/systemd/system目录下自定义服务即可\r\n```shell\r\nvim /lib/systemd/system/nginx.service\r\n# 编辑内容\r\n[Unit]\r\nDescription=nginx.service\r\nAfter=network.target\r\n\r\n[Service]\r\nType=forking\r\nExecStart=/usr/local/nginx/sbin/nginx\r\nExecReload=/usr/local/nginx/sbin/nginx -s reload\r\nExecStop=/usr/local/nginx/sbin/nginx -s quit\r\nPrivateTmp=true\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n\r\n# 参数介绍：\r\n# [Unit]:服务的说明\r\n# Description:描述服务\r\n# After:描述服务类别\r\n# [Service]服务运行参数的设置\r\n# Type=forking是后台运行的形式\r\n# ExecStart为服务的具体运行命令\r\n# ExecReload为重启命令\r\n# ExecStop为停止命令\r\n# PrivateTmp=True表示给服务分配独立的临时空间\r\n# 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\r\n# [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3\r\n```\r\n:wq! 保存退出。\r\n```shell\r\n# 设置开机启动\r\nsystemctl enable nginx.service\r\n# 其他命令\r\n# 启动nginx服务\r\nsystemctl start nginx.service　\r\n# 停止开机自启动\r\nsystemctl disable nginx.service\r\n# 查看服务当前状态\r\nsystemctl status nginx.service\r\n# 重新启动服务\r\nsystemctl restart nginx.service　\r\n# 查看所有已启动的服务\r\nsystemctl list-units --type=service\r\n```\r\n\r\n## Nginx知识点\r\n\r\n### nginx判断\r\n\r\n1、正则表达式匹配：\r\n\r\n==：等值比较;\r\n\\~：与指定正则表达式模式匹配时返回“真”，判断匹配与否时区分字符大小写；\r\n\\~\\*：与指定正则表达式模式匹配时返回“真”，判断匹配与否时不区分字符大小写；\r\n!\\~：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时区分字符大小写；\r\n!\\~\\*：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时不区分字符大小写；\r\n\r\n2、文件及目录匹配判断：\r\n\r\n-f, !-f：判断指定的路径是否为存在且为文件；\r\n-d, !-d：判断指定的路径是否为存在且为目录；\r\n-e, !-e：判断指定的路径是否存在，文件或目录均可；\r\n-x, !-x：判断指定路径的文件是否存在且可执行；\r\n\r\n### 语法规则\r\n\r\nlocation [=|~|~*|^~] /uri/ { … }\r\n\r\n- =：表示精确匹配,这个优先级也是最高的\r\n- ^\\~：表示uri以某个常规字符串开头，理解为匹配url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。\r\n- \\~：表示区分大小写的正则匹配\r\n- \\~\\*：表示不区分大小写的正则匹配(和上面的唯一区别就是大小写)\r\n- !\\~和!\\~\\*：分别为区分大小写不匹配及不区分大小写不匹配的正则\r\n- /：通用匹配，任何请求都会匹配到，默认匹配.\r\n\r\n**语法的一些规则和优先级**\r\n多个location配置的情况下匹配顺序为：首先匹配=，其次匹配^\\~,其次是按文件中顺序的正则匹配，最后是交给/通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。\r\n\r\n### ngx_http_core_module模块的变量\r\n\r\n- **$arg_PARAMETER**：HTTP请求中某个参数的值，如/index.php?site=www.domain.com 可以用$arg_site取得www.domain.com 这个值。\r\n- **$args HTTP**：请求中的完整参数。例如，在请求/index.php?width=400&height=200中，$args表示字符串width=400&height=200.\r\n- **$binary_remote_addr**：二进制格式的客户端地址。例如：\\x0A\\xE0B\\x0E\r\n- **$body_bytes_sent**：表示在向客户端发送的http响应中，包体部分的字节数\r\n- **$content_length**：表示客户端请求头部中的Content-Length字段\r\n- **$content_type**：表示客户端请求头部中的Content-Type字段\r\n- **$cookie_COOKIE**：表示在客户端请求头部中的cookie字段\r\n- **$document_root**：表示当前请求所使用的root配置项的值\r\n- **$uri**：表示当前请求的URI，不带任何参数\r\n- **$document_uri与$uri含义相同**\r\n- **$request_uri**：表示客户端发来的原始请求URI，带完整的参数。$uri和$document_uri未必是用户的原始请求，在内部重定向后可能是重定向后的URI，而$request_uri永远不会改变，始终是客户端的原始URI\r\n- **$host**：表示客户端请求头部中的Host字段。如果Host字段不存在，则以实际处理的server（虚拟主机）名称代替。如果Host字段中带有端口，如IP:PORT，那么$host是去掉端口的，它的值为IP。$host是全小写的。这些特性与http_HEADER中的http_host不同，http_host只取出Host头部对应的值。\r\n- **$hostname**：表示Nginx所在机器的名称，与gethostbyname调用返回的值相同\r\n- **$http_HEADER**：表示当前HTTP请求中相应头部的值。HEADER名称全小写。例如，示请求中Host头部对应的值用$http_host表\r\n- **$sent_http_HEADER**：表示返回客户端的HTTP响应中相应头部的值。HEADER名称全小写。例如，用$sent_http_content_type表示响应中Content-Type头部对应的值\r\n- **$is_args**：表示请求中的URI是否带参数，如果带参数，$is_args值为?，如果不带参数，则是空字符串\r\n- **$limit_rate**：表示当前连接的限速是多少，0表示无限速\r\n- **$nginx_version**：表示当前Nginx的版本号\r\n- **$query_string**：请求URI中的参数，与$args相同，然而$query_string是只读的不会改变\r\n- **$remote_addr**：表示客户端的地址\r\n- **$remote_port**：表示客户端连接使用的端口\r\n- **$remote_user**：表示使用Auth Basic Module时定义的用户名\r\n- **$request_filename**：表示用户请求中的URI经过root或alias转换后的文件路径\r\n- **$request_body**：表示HTTP请求中的包体，该参数只在proxy_pass或fastcgi_pass中有意义\r\n- **$request_body_file**：表示HTTP请求中的包体存储的临时文件名\r\n- **$request_completion**：当请求已经全部完成时，其值为“ok”。若没有完成，就要返回客户端，则其值为空字符串；或者在断点续传等情况下使用HTTP range访问的并不是文件的最后一块，那么其值也是空字符串。\r\n- **$request_method**：表示HTTP请求的方法名，如GET、PUT、POST等\r\n- **$scheme**：表示HTTP scheme，如在请求https://nginx.com/中表示https\r\n- **$server_addr **：表示服务器地址\r\n- **$server_name**：表示服务器名称\r\n- **$server_port**：表示服务器端口\r\n- **$server_protocol**：表示服务器向客户端发送响应的协议，如HTTP/1.1或HTTP/1.0\r\n\r\n### 日志配置\r\n\r\n- **$remote_addr,$http_x_forwarded_for- **：记录客户端IP地址\r\n- **$remote_user**：记录客户端用户名称\r\n- **$request**：记录请求的URL和HTTP协议\r\n- **$status**：记录请求状态\r\n- **$body_bytes_sent**：发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块mod_log_config里的“%B”参数兼容。\r\n- **$bytes_sent**：发送给客户端的总字节数。\r\n- **$connection**：连接的序列号。\r\n- **$connection_requests**：当前通过一个连接获得的请求数量。\r\n- **$msec**：日志写入时间。单位为秒，精度是毫秒。\r\n- **$pipe**：如果请求是通过HTTP流水线(pipelined)发送，pipe值为“p”，否则为“.”。\r\n- **$http_referer**：记录从哪个页面链接访问过来的\r\n- **$http_user_agent**：记录客户端浏览器相关信息\r\n- **$request_length**：请求的长度（包括请求行，请求头和请求正文）。\r\n- **$request_time**：请求处理时间，单位为秒，精度毫秒；从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\r\n- **$time_iso8601**：ISO8601标准格式下的本地时间。\r\n- **$time_local**：通用日志格式下的本地时间。\r\n\r\n### if\r\n\r\n- 语法：if (condition) { … }\r\n- 默认值：none\r\n- 使用字段：server, location\r\n- 注意：尽量考虑使用trp_files代替。\r\n- 判断的条件可以有以下值：\r\n\r\n1. 一个变量的名称：空字符传”“或者一些“0”开始的字符串为false。\r\n2. 字符串比较：使用=或!=运算符\r\n3. 正则表达式匹配：使用\\~(区分大小写)和\\~\\*(不区分大小写)，取反运算!\\~和!\\~\\*。\r\n4. 文件是否存在：使用-f和!-f操作符\r\n5. 目录是否存在：使用-d和!-d操作符\r\n7. 文件、目录、符号链接是否存在：使用-e和!-e操作符\r\n8. 文件是否可执行：使用-x和!-x操作符\r\n\r\n### return\r\n\r\n- 语法：return code\r\n- 默认值：none\r\n- 使用字段：server,location,if\r\n- nginx隐藏版本号\r\n- nginx.conf中修改http zone中的变量值： server_tokens off;\r\n- php-fpm fastcgi.conf中的变量值： fastcgi_param SERVER_SOFTWARE nginx;\r\n\r\n### nginx正向代理\r\n\r\n```nginx\r\n\r\nserver {\r\n\r\nlisten 8090;\r\n\r\nlocation / {\r\n\r\nresolver 218.85.157.99 218.85.152.99;\r\n\r\nresolver_timeout 30s;\r\n\r\nproxy_pass http://$host$request_uri;\r\n\r\n}\r\n\r\naccess_log /data/httplogs/proxy-$host-aceess.log;\r\n\r\n}\r\n```\r\n\r\nresolver指令\r\n\r\n- 语法: resolver address ... [valid=time];\r\n- 默认值: —\r\n- 配置段: http, server, location\r\n- 配置DNS服务器IP地址。可以指定多个，以轮询方式请求。\r\n- nginx会缓存解析的结果。默认情况下，缓存时间是名字解析响应中的TTL字段的值，可以通过valid参数更改。\r\n\r\n## 相关文章\r\n\r\n- [这是一个Nginx极简教程，目的在于帮助新手快速入门Nginx。](https://github.com/dunwu/nginx-tutorial)\r\n- [就是要让你搞懂Nginx，这篇就够了！](https://mp.weixin.qq.com/s/5Q_VQoQY6kJiMwMHHDIijA)\r\n- [Nginx为什么快到根本停不下来？](https://mp.weixin.qq.com/s/e7r2Jt1DlF_4HpZU_IKZkQ)\r\n- [手把手教你在CentOS7上搭建Nginx](https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&amp;mid=2247490879&amp;idx=1&amp;sn=bd93bc46cdfb7919b9a304c176927dd8&amp;source=41#wechat_redirect)\r\n- [nginx实现动态分离,解决css和js等图片加载问题](https://www.cnblogs.com/sz-jack/p/5206159.html)\r\n- [nginx反向代理tomcat，js，css静态资源不加载问题](https://blog.csdn.net/white1114579650/article/details/120151335)\r\n- [彻底搞懂Nginx的五大应用场景](https://mp.weixin.qq.com/s/v6j2HStMHBDlak6UGTF0Hw)\r\n- [nginx配置参数](https://blog.51cto.com/ting2junshui/2066268)\r\n- [Nginx轻松搞定跨域问题！](https://mp.weixin.qq.com/s/clSjaLJSht5J8woIaiH4gA)\r\n- [如何使用Nginx优雅地限流？](https://mp.weixin.qq.com/s/YXJ1jcr7XLKTbzf9kyjiEg)\r\n- [Nginx如何限流？](https://mp.weixin.qq.com/s/R6GajrvNphXfgKWDsFWzFw)\r\n- [nginxconfig.io](https://nginxconfig.io)\r\n- [为什么Nginx比Apache更牛叉？](https://mp.weixin.qq.com/s/pPV5s3uO1sjPTAhz_BDcJg)\r\n- [如何用Nginx代理MySQL连接，并限制可访问IP？](https://mp.weixin.qq.com/s/6lvKIQb4yk7uTmufr9pJ8w)\r\n","categories":[],"tags":[{"name":"安装","path":"api/tags/安装.json"}]}