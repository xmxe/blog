{"title":"Dubbo","slug":"Dubbo","date":"2022-11-15T07:14:17.493Z","updated":"2023-03-23T01:42:32.593Z","comments":true,"path":"api/articles/Dubbo.json","excerpt":null,"covers":"https://picd.zhimg.com/v2-5f6b4a9d35a1add123ac6b3f444b2291_1440w.jpg","content":"<h2 id=\"Dubbo基础\"><a href=\"#Dubbo基础\" class=\"headerlink\" title=\"Dubbo基础\"></a>Dubbo基础</h2><h3 id=\"什么是Dubbo\"><a href=\"#什么是Dubbo\" class=\"headerlink\" title=\"什么是Dubbo?\"></a>什么是Dubbo?</h3><p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2020-8/427f2168-1930-4c14-8760-415fac8db1d0-20200802184737978.png\" alt=\"img\"></p>\n<p><a href=\"https://github.com/apache/dubbo\">Apache Dubbo</a>|ˈdʌbəʊ|是一款高性能、轻量级的开源Java RPC框架。</p>\n<p>根据 <a href=\"https://dubbo.apache.org/zh/\">Dubbo官方文档</a>的介绍，Dubbo提供了六大核心能力</p>\n<ol>\n<li>面向接口代理的高性能RPC调用。</li>\n<li>智能容错和负载均衡。</li>\n<li>服务自动注册和发现。</li>\n<li>高度可扩展能力。</li>\n<li>运行期流量调度。</li>\n<li>可视化的服务治理与运维。</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/dubbo%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B.png\" alt=\"Dubbo提供的六大核心能力\"></p>\n<p>简单来说就是：<strong>Dubbo不光可以帮助我们调用远程服务，还提供了一些其他开箱即用的功能比如智能负载均衡。</strong></p>\n<p>Dubbo目前已经有接近34.4k的Star。Dubbo是由阿里开源，后来加入了Apache。正是由于Dubbo的出现，才使得越来越多的公司开始使用以及接受分布式架构。</p>\n<h3 id=\"为什么要用Dubbo\"><a href=\"#为什么要用Dubbo\" class=\"headerlink\" title=\"为什么要用Dubbo?\"></a>为什么要用Dubbo?</h3><p>随着互联网的发展，网站的规模越来越大，用户数量越来越多。单一应用架构、垂直应用架构无法满足我们的需求，这个时候分布式服务架构就诞生了。</p>\n<p>分布式服务架构下，系统被拆分成不同的服务比如短信服务、安全服务，每个服务独立提供系统的某个核心服务。</p>\n<p>我们可以使用Java RMI（Java Remote Method Invocation）、Hessian这种支持远程调用的框架来简单地暴露和引用远程服务。但是！当服务越来越多之后，服务调用关系越来越复杂。当应用访问压力越来越大后，负载均衡以及服务监控的需求也迫在眉睫。我们可以用F5这类硬件来做负载均衡，但这样增加了成本，并且存在单点故障的风险。</p>\n<p>不过，Dubbo的出现让上述问题得到了解决。<strong>Dubbo帮助我们解决了什么问题呢？</strong></p>\n<ol>\n<li><strong>负载均衡</strong>：同一个服务部署在不同的机器时该调用哪一台机器上的服务。</li>\n<li><strong>服务调用链路生成</strong>：随着系统的发展，服务越来越多，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。Dubbo可以为我们解决服务之间互相是如何调用的。</li>\n<li><strong>服务访问压力以及时长统计、资源调度和治理</strong>：基于访问压力实时管理集群容量，提高集群利用率。</li>\n<li>……</li>\n</ol>\n<p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/43050183.jpg\" alt=\"img\"></p>\n<p>另外，Dubbo除了能够应用在分布式系统中，也可以应用在现在比较火的微服务系统中。不过，由于Spring Cloud在微服务中应用更加广泛，所以，我觉得一般我们提Dubbo的话，大部分是分布式系统的情况。</p>\n<p><strong>我们刚刚提到了分布式这个概念，下面再给大家介绍一下什么是分布式？为什么要分布式？</strong></p>\n<h2 id=\"分布式基础\"><a href=\"#分布式基础\" class=\"headerlink\" title=\"分布式基础\"></a>分布式基础</h2><h3 id=\"什么是分布式\"><a href=\"#什么是分布式\" class=\"headerlink\" title=\"什么是分布式?\"></a>什么是分布式?</h3><p>分布式或者说SOA分布式重要的就是面向服务，说简单的分布式就是我们把整个系统拆分成不同的服务然后将这些服务放在不同的服务器上减轻单体服务的压力提高并发量和性能。比如电商系统可以简单地拆分成订单系统、商品系统、登录系统等等，拆分之后的每个服务可以部署在不同的机器上，如果某一个服务的访问量比较大的话也可以将这个服务同时部署在多台机器上。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"分布式事务示意图\"></p>\n<h3 id=\"为什么要分布式\"><a href=\"#为什么要分布式\" class=\"headerlink\" title=\"为什么要分布式?\"></a>为什么要分布式?</h3><p>从开发角度来讲单体应用的代码都集中在一起，而分布式系统的代码根据业务被拆分。所以，每个团队可以负责一个服务的开发，这样提升了开发效率。另外，代码根据业务拆分之后更加便于维护和扩展。</p>\n<p>另外，我觉得将系统拆分成分布式之后不光便于系统扩展和维护，更能提高整个系统的性能。你想一想嘛？把整个系统拆分成不同的服务&#x2F;系统，然后每个服务&#x2F;系统单独部署在一台服务器上，是不是很大程度上提高了系统性能呢？</p>\n<h2 id=\"Dubbo架构\"><a href=\"#Dubbo架构\" class=\"headerlink\" title=\"Dubbo架构\"></a>Dubbo架构</h2><h3 id=\"Dubbo架构中的核心角色有哪些？\"><a href=\"#Dubbo架构中的核心角色有哪些？\" class=\"headerlink\" title=\"Dubbo架构中的核心角色有哪些？\"></a>Dubbo架构中的核心角色有哪些？</h3><p><a href=\"https://dubbo.apache.org/zh/docs/v2.7/dev/design/\">官方文档中的框架设计章节</a>已经介绍的非常详细了，我这里把一些比较重要的点再提一下。</p>\n<p><img src=\"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/dubbo-relation.jpg\" alt=\"dubbo-relation\"></p>\n<p>上述节点简单介绍以及他们之间的关系：</p>\n<ul>\n<li><strong>Container：</strong>服务运行容器，负责加载、运行服务提供者。必须。</li>\n<li><strong>Provider：</strong>暴露服务的服务提供方，会向注册中心注册自己提供的服务。必须。</li>\n<li><strong>Consumer：</strong>调用远程服务的服务消费方，会向注册中心订阅自己所需的服务。必须。</li>\n<li><strong>Registry：</strong>服务注册与发现的注册中心。注册中心会返回服务提供者地址列表给消费者。非必须。</li>\n<li><strong>Monitor：</strong>统计服务的调用次数和调用时间的监控中心。服务消费者和提供者会定时发送统计数据到监控中心。非必须。</li>\n</ul>\n<h3 id=\"Dubbo中的Invoker概念了解么？\"><a href=\"#Dubbo中的Invoker概念了解么？\" class=\"headerlink\" title=\"Dubbo中的Invoker概念了解么？\"></a>Dubbo中的Invoker概念了解么？</h3><p>Invoker是Dubbo领域模型中非常重要的一个概念，你如果阅读过Dubbo源码的话，你会无数次看到这玩意。就比如下面我要说的负载均衡这块的源码中就有大量Invoker的身影。</p>\n<p>简单来说，Invoker就是Dubbo对远程调用的抽象。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/dubbo_rpc_invoke.jpg\" alt=\"dubbo_rpc_invoke.jpg\"></p>\n<p>按照Dubbo官方的话来说，Invoker分为</p>\n<ul>\n<li>服务提供Invoker</li>\n<li>服务消费Invoker</li>\n</ul>\n<p>假如我们需要调用一个远程方法，我们需要动态代理来屏蔽远程调用的细节吧！我们屏蔽掉的这些细节就依赖对应的Invoker实现，Invoker实现了真正的远程服务调用。</p>\n<h3 id=\"Dubbo的工作原理了解么？\"><a href=\"#Dubbo的工作原理了解么？\" class=\"headerlink\" title=\"Dubbo的工作原理了解么？\"></a>Dubbo的工作原理了解么？</h3><p>下图是Dubbo的整体设计，从下至上分为十层，各层均为单向依赖。</p>\n<blockquote>\n<p>左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/source-code/dubbo/dubbo-framework.jpg\" alt=\"dubbo-framework\"></p>\n<ul>\n<li><strong>config配置层</strong>：Dubbo相关的配置。支持代码配置，同时也支持基于Spring来做配置，以Service Config,Reference Config为中心</li>\n<li><strong>proxy服务代理层</strong>：调用远程方法像调用本地的方法一样简单的一个关键，真实调用过程依赖代理类，以ServiceProxy为中心。</li>\n<li><strong>registry注册中心层</strong>：封装服务地址的注册与发现。</li>\n<li><strong>cluster路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心。</li>\n<li><strong>monitor监控层</strong>：RPC调用次数和调用时间监控，以Statistics为中心。</li>\n<li><strong>protocol远程调用层</strong>：封装RPC调用，以Invocation,Result为中心。</li>\n<li><strong>exchange信息交换层</strong>：封装请求响应模式，同步转异步，以Request,Response为中心。</li>\n<li><strong>transport网络传输层</strong>：抽象mina和netty为统一接口，以Message为中心。</li>\n<li><strong>serialize数据序列化层</strong>：对需要在网络传输的数据进行序列化。</li>\n</ul>\n<h3 id=\"Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？\"><a href=\"#Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？\" class=\"headerlink\" title=\"Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？\"></a>Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？</h3><p>SPI（Service Provider Interface）机制被大量用在开源项目中，它可以帮助我们动态寻找服务&#x2F;功能（比如负载均衡策略）的实现。</p>\n<p>SPI的具体原理是这样的：我们将接口的实现类放在配置文件中，我们在程序运行过程中读取配置文件，通过反射加载实现类。这样，我们可以在运行的时候，动态替换接口的实现类。和IoC的解耦思想是类似的。</p>\n<p>Java本身就提供了SPI机制的实现。不过，Dubbo没有直接用，而是对Java原生的SPI机制进行了增强，以便更好满足自己的需求。</p>\n<p><strong>那我们如何扩展Dubbo中的默认实现呢？</strong></p>\n<p>比如说我们想要实现自己的负载均衡策略，我们创建对应的实现类XxxLoadBalance实现LoadBalance接口或者AbstractLoadBalance类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxx</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoadBalance</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Invoker</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Invocation</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RpcException</span></span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XxxLoadBalance</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RpcException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们将这个实现类的路径写入到resources目录下的META-INF&#x2F;dubbo&#x2F;org.apache.dubbo.rpc.cluster.LoadBalance文件中即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">src\n <span class=\"token operator\">|</span><span class=\"token operator\">-</span>main\n    <span class=\"token operator\">|</span><span class=\"token operator\">-</span>java\n        <span class=\"token operator\">|</span><span class=\"token operator\">-</span>com\n            <span class=\"token operator\">|</span><span class=\"token operator\">-</span>xxx\n                <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token class-name\">XxxLoadBalance</span><span class=\"token punctuation\">.</span><span class=\"token function\">java</span><span class=\"token punctuation\">(</span>实现<span class=\"token class-name\">LoadBalance</span>接口<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">-</span>resources\n        <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token constant\">META</span><span class=\"token operator\">-</span><span class=\"token constant\">INF</span>\n            <span class=\"token operator\">|</span><span class=\"token operator\">-</span>dubbo\n                <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span></span>LoadBalance</span><span class=\"token punctuation\">(</span>纯文本文件，内容为：xxx<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span></span>XxxLoadBalance</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>org.apache.dubbo.rpc.cluster.LoadBalance</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">xxx=com.xxx.XxxLoadBalance<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其他还有很多可供扩展的选择，你可以在<a href=\"https://cn.dubbo.apache.org/zh-cn/overview/home/\">官方文档</a>中找到。</p>\n<h3 id=\"Dubbo的微内核架构了解吗？\"><a href=\"#Dubbo的微内核架构了解吗？\" class=\"headerlink\" title=\"Dubbo的微内核架构了解吗？\"></a>Dubbo的微内核架构了解吗？</h3><p>Dubbo采用微内核（Microkernel）+插件（Plugin）模式，简单来说就是微内核架构。微内核只负责组装插件。</p>\n<p><strong>何为微内核架构呢？</strong>《软件架构模式》这本书是这样介绍的：</p>\n<blockquote>\n<p>微内核架构模式（有时被称为插件架构模式）是实现基于产品应用程序的一种自然模式。基于产品的应用程序是已经打包好并且拥有不同版本，可作为第三方插件下载的。然后，很多公司也在开发、发布自己内部商业应用像有版本号、说明及可加载插件式的应用软件（这也是这种模式的特征）。微内核系统可让用户添加额外的应用如插件，到核心应用，继而提供了可扩展性和功能分离的用法。</p>\n</blockquote>\n<p>微内核架构包含两类组件：<strong>核心系统（coresystem）</strong>和<strong>插件模块（plug-inmodules）</strong>。</p>\n<p><img src=\"https://oss.javaguide.cn/source-code/dubbo/%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"img\"></p>\n<p>核心系统提供系统所需核心能力，插件模块可以扩展系统的功能。因此，基于微内核架构的系统，非常易于扩展功能。</p>\n<p>我们常见的一些IDE，都可以看作是基于微内核架构设计的。绝大多数IDE比如IDEA、VSCode都提供了插件来丰富自己的功能。</p>\n<p>正是因为Dubbo基于微内核架构，才使得我们可以随心所欲替换Dubbo的功能点。比如你觉得Dubbo的序列化模块实现的不满足自己要求，没关系,你自己实现一个序列化模块就好了</p>\n<p>通常情况下，微核心都会采用Factory、IoC、OSGi等方式管理插件生命周期。Dubbo不想依赖Spring等IoC容器，也不想自己造一个小的IoC容器（过度设计），因此采用了一种最简单的Factory方式管理插件：<strong>JDK标准的SPI扩展机制</strong>（java.util.ServiceLoader）。</p>\n<h3 id=\"关于Dubbo架构的一些自测小问题\"><a href=\"#关于Dubbo架构的一些自测小问题\" class=\"headerlink\" title=\"关于Dubbo架构的一些自测小问题\"></a>关于Dubbo架构的一些自测小问题</h3><h4 id=\"注册中心的作用了解么？\"><a href=\"#注册中心的作用了解么？\" class=\"headerlink\" title=\"注册中心的作用了解么？\"></a>注册中心的作用了解么？</h4><p>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互。</p>\n<h4 id=\"服务提供者宕机后，注册中心会做什么？\"><a href=\"#服务提供者宕机后，注册中心会做什么？\" class=\"headerlink\" title=\"服务提供者宕机后，注册中心会做什么？\"></a>服务提供者宕机后，注册中心会做什么？</h4><p>注册中心会立即推送事件通知消费者。</p>\n<h4 id=\"监控中心的作用呢？\"><a href=\"#监控中心的作用呢？\" class=\"headerlink\" title=\"监控中心的作用呢？\"></a>监控中心的作用呢？</h4><p>监控中心负责统计各服务调用次数，调用时间等。</p>\n<h4 id=\"注册中心和监控中心都宕机的话，服务都会挂掉吗？\"><a href=\"#注册中心和监控中心都宕机的话，服务都会挂掉吗？\" class=\"headerlink\" title=\"注册中心和监控中心都宕机的话，服务都会挂掉吗？\"></a>注册中心和监控中心都宕机的话，服务都会挂掉吗？</h4><p>不会。两者都宕机也不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。注册中心和监控中心都是可选的，服务消费者可以直连服务提供者。</p>\n<h2 id=\"Dubbo的负载均衡策略\"><a href=\"#Dubbo的负载均衡策略\" class=\"headerlink\" title=\"Dubbo的负载均衡策略\"></a>Dubbo的负载均衡策略</h2><h3 id=\"什么是负载均衡？\"><a href=\"#什么是负载均衡？\" class=\"headerlink\" title=\"什么是负载均衡？\"></a>什么是负载均衡？</h3><p>先来看一下稍微官方点的解释。下面这段话摘自维基百科对负载均衡的定义：</p>\n<blockquote>\n<p>负载均衡改善了跨多个计算资源（例如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动）的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。使用具有负载平衡而不是单个组件的多个组件可以通过冗余提高可靠性和可用性。负载平衡通常涉及专用软件或硬件。</p>\n</blockquote>\n<p><strong>上面讲的大家可能不太好理解，再用通俗的话给大家说一下。</strong></p>\n<p>我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。</p>\n<h3 id=\"Dubbo提供的负载均衡策略有哪些？\"><a href=\"#Dubbo提供的负载均衡策略有哪些？\" class=\"headerlink\" title=\"Dubbo提供的负载均衡策略有哪些？\"></a>Dubbo提供的负载均衡策略有哪些？</h3><p>在集群负载均衡时，Dubbo提供了多种均衡策略，默认为random随机调用。我们还可以自行扩展负载均衡策略（参考DubboSPI机制）。</p>\n<p>在Dubbo中，所有负载均衡实现类均继承自AbstractLoadBalance，该类实现了LoadBalance接口，并封装了一些公共的逻辑。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractLoadBalance</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateWarmupWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> uptime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> warmup<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> invoker<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>AbstractLoadBalance的实现类有下面这些：</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/image-20210326105257812.png\" alt=\"img\"></p>\n<h4 id=\"RandomLoadBalance\"><a href=\"#RandomLoadBalance\" class=\"headerlink\" title=\"RandomLoadBalance\"></a>RandomLoadBalance</h4><p>根据权重随机选择（对加权随机算法的实现）。这是Dubbo默认采用的一种负载均衡策略。</p>\n<p>RandomLoadBalance具体的实现原理非常简单，假如有两个提供相同服务的服务器S1,S2，S1的权重为7，S2的权重为3。</p>\n<p>我们把这些权重值分布在坐标区间会得到：S1-&gt;[0,7)，S2-&gt;[7,10)。我们生成[0,10)之间的随机数，随机数落到对应的区间，我们就选择对应的服务器来处理请求。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/%20RandomLoadBalance.png\" alt=\"RandomLoadBalance\"></p>\n<p>RandomLoadBalance的源码非常简单，简单花几分钟时间看一下。</p>\n<blockquote>\n<p>以下源码来自Dubbomaster分支上的最新的版本2.7.9。</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomLoadBalance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"random\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">int</span> totalWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下面这个for循环的主要作用就是计算所有该服务的提供者的权重之和totalWeight（），</span>\n        <span class=\"token comment\">// 除此之外，还会检测每个服务提供者的权重是否相同</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> weight <span class=\"token operator\">=</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span>invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            totalWeight <span class=\"token operator\">+=</span> weight<span class=\"token punctuation\">;</span>\n            weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> totalWeight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameWeight <span class=\"token operator\">&amp;&amp;</span> totalWeight <span class=\"token operator\">!=</span> weight <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalWeight <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sameWeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 随机生成一个[0,totalWeight)区间内的数字</span>\n            <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>totalWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 判断会落在哪个服务提供者的区间</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n  \n        <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"LeastActiveLoadBalance\"><a href=\"#LeastActiveLoadBalance\" class=\"headerlink\" title=\"LeastActiveLoadBalance\"></a>LeastActiveLoadBalance</h4><p>LeastActiveLoadBalance直译过来就是<strong>最小活跃数负载均衡</strong>。</p>\n<p>这个名字起得有点不直观，不仔细看官方对活跃数的定义，你压根不知道这玩意是干嘛的。</p>\n<p>我这么说吧！初始状态下所有服务提供者的活跃数均为0（每个服务提供者的中特定方法都对应一个活跃数，我在后面的源码中会提到），每收到一个请求后，对应的服务提供者的活跃数+1，当这个请求处理完之后，活跃数-1。</p>\n<p>因此，<strong>Dubbo就认为谁的活跃数越少，谁的处理速度就越快，性能也越好，这样的话，我就优先把请求给活跃数少的服务提供者处理。</strong></p>\n<p><strong>如果有多个服务提供者的活跃数相等怎么办？</strong></p>\n<p>很简单，那就再走一遍RandomLoadBalance。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeastActiveLoadBalance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"leastactive\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leastActive <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leastCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leastIndexes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> firstWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 这个for循环的主要作用是遍历invokers列表，找出活跃数最小的Invoker</span>\n        <span class=\"token comment\">// 如果有多个Invoker具有相同的最小活跃数，还会记录下这些Invoker在invokers集合中的下标，并累加它们的权重，比较它们的权重值是否相等</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> invoker <span class=\"token operator\">=</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取invoker对应的活跃(active)数</span>\n            <span class=\"token keyword\">int</span> active <span class=\"token operator\">=</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span>invoker<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> afterWarmup <span class=\"token operator\">=</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span>invoker<span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> afterWarmup<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leastActive <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> active <span class=\"token operator\">&lt;</span> leastActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leastActive <span class=\"token operator\">=</span> active<span class=\"token punctuation\">;</span>\n                leastCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                leastIndexes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                totalWeight <span class=\"token operator\">=</span> afterWarmup<span class=\"token punctuation\">;</span>\n                firstWeight <span class=\"token operator\">=</span> afterWarmup<span class=\"token punctuation\">;</span>\n                sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>active <span class=\"token operator\">==</span> leastActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leastIndexes<span class=\"token punctuation\">[</span>leastCount<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                totalWeight <span class=\"token operator\">+=</span> afterWarmup<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameWeight <span class=\"token operator\">&amp;&amp;</span> afterWarmup <span class=\"token operator\">!=</span> firstWeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token comment\">// 如果只有一个Invoker具有最小的活跃数，此时直接返回该Invoker即可</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leastCount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leastIndexes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 如果有多个Invoker具有相同的最小活跃数，但它们之间的权重不同</span>\n        <span class=\"token comment\">// 这里的处理方式就和RandomLoadBalance一致了</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sameWeight <span class=\"token operator\">&amp;&amp;</span> totalWeight <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> offsetWeight <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>totalWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> leastCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> leastIndex <span class=\"token operator\">=</span> leastIndexes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                offsetWeight <span class=\"token operator\">-=</span> weights<span class=\"token punctuation\">[</span>leastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offsetWeight <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leastIndexes<span class=\"token punctuation\">[</span><span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>leastCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>活跃数是通过RpcStatus中的一个ConcurrentMap保存的，根据URL以及服务提供者被调用的方法的名称，我们便可以获取到对应的活跃数。也就是说服务提供者中的每一个方法的活跃数都是互相独立的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcStatus</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">METHOD_STATISTICS</span> <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RpcStatus</span> <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> uri <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">toIdentityString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ConcurrentMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token constant\">METHOD_STATISTICS</span><span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> active<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ConsistentHashLoadBalance\"><a href=\"#ConsistentHashLoadBalance\" class=\"headerlink\" title=\"ConsistentHashLoadBalance\"></a>ConsistentHashLoadBalance</h4><p>ConsistentHashLoadBalance小伙伴们应该也不会陌生，在分库分表、各种集群中就经常使用这个负载均衡策略。</p>\n<p>ConsistentHashLoadBalance即<strong>一致性Hash负载均衡策略</strong>。ConsistentHashLoadBalance中没有权重的概念，具体是哪个服务提供者处理请求是由你的请求的参数决定的，也就是说相同参数的请求总是发到同一个服务提供者。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/consistent-hash-data-incline.jpg\" alt=\"img\"></p>\n<p>另外，Dubbo为了避免数据倾斜问题（节点不够分散，大量请求落到同一节点），还引入了虚拟节点的概念。通过虚拟节点可以让节点更加分散，有效均衡各个节点的请求量。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/consistent-hash-invoker.jpg\" alt=\"img\"></p>\n<p>官方有详细的<a href=\"https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#23-consistenthashloadbalance\">源码分析</a>。这里还有一个相关的<a href=\"https://github.com/apache/dubbo/pull/5440\">PR#5440</a>来修复老版本中ConsistentHashLoadBalance存在的一些Bug。感兴趣的小伙伴，可以多花点时间研究一下。</p>\n<h4 id=\"RoundRobinLoadBalance\"><a href=\"#RoundRobinLoadBalance\" class=\"headerlink\" title=\"RoundRobinLoadBalance\"></a>RoundRobinLoadBalance</h4><p>加权轮询负载均衡。</p>\n<p>轮询就是把请求依次分配给每个服务提供者。加权轮询就是在轮询的基础上，让更多的请求落到权重更大的服务提供者上。比如假如有两个提供相同服务的服务器S1,S2，S1的权重为7，S2的权重为3。</p>\n<p>如果我们有10次请求，那么7次会被S1处理，3次被S2处理。</p>\n<p>但是，如果是RandomLoadBalance的话，很可能存在10次请求有9次都被S1处理的情况（概率性问题）。</p>\n<p>Dubbo中的RoundRobinLoadBalance的代码实现被修改重建了好几次，Dubbo-2.6.5版本的RoundRobinLoadBalance为平滑加权轮询算法。</p>\n<h2 id=\"Dubbo序列化协议\"><a href=\"#Dubbo序列化协议\" class=\"headerlink\" title=\"Dubbo序列化协议\"></a>Dubbo序列化协议</h2><h3 id=\"Dubbo支持哪些序列化方式呢？\"><a href=\"#Dubbo支持哪些序列化方式呢？\" class=\"headerlink\" title=\"Dubbo支持哪些序列化方式呢？\"></a>Dubbo支持哪些序列化方式呢？</h3><p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309234143460.png\" alt=\"img\"></p>\n<p>Dubbo支持多种序列化方式：JDK自带的序列化、hessian2、JSON、Kryo、FST、Protostuff，ProtoBuf等等。</p>\n<p>Dubbo默认使用的序列化方式是hessian2。</p>\n<h3 id=\"谈谈你对这些序列化协议了解？\"><a href=\"#谈谈你对这些序列化协议了解？\" class=\"headerlink\" title=\"谈谈你对这些序列化协议了解？\"></a>谈谈你对这些序列化协议了解？</h3><p>一般我们不会直接使用JDK自带的序列化方式。主要原因有两个：</p>\n<ol>\n<li><strong>不支持跨语言调用</strong>:如果调用的是其他语言开发的服务的时候就不支持了。</li>\n<li><strong>性能差</strong>：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。</li>\n</ol>\n<p>JSON序列化由于性能问题，我们一般也不会考虑使用。</p>\n<p>像Protostuff，ProtoBuf、hessian2这些都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。</p>\n<p>Kryo和FST这两种序列化方式是Dubbo后来才引入的，性能非常好。不过，这两者都是专门针对Java语言的。Dubbo官网的一篇文章中提到说推荐使用Kryo作为生产环境的序列化方式。(<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/references/protocol/rest/\">文章地址</a>)</p>\n<p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2020-8/569e541a-22b2-4846-aa07-0ad479f07440.png\" alt=\"img\"></p>\n<p>Dubbo官方文档中还有一个关于这些<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/serialization/#m-zhdocsv27userserialization\">序列化协议的性能对比图</a>可供参考。</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-00c3ce1e5d222e477ed84310239daa2f6b0.png\" alt=\"img\"></p>\n<blockquote>\n<p><a href=\"https://javaguide.cn/distributed-system/rpc/dubbo.html\">原文链接</a></p>\n</blockquote>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"http://dubbo.apache.org/zh-cn/docs/user/quick-start.html\">dubbo官方文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jveqCUAiqKdKRoea9wESbw\">长文图解七种负载均衡策略</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NEfWwnRVOI73_TQurmxk9A\">如果Dubbo还没精通原理，就从这里开始吧</a></li>\n</ul>\n","more":"<h2 id=\"Dubbo基础\"><a href=\"#Dubbo基础\" class=\"headerlink\" title=\"Dubbo基础\"></a>Dubbo基础</h2><h3 id=\"什么是Dubbo\"><a href=\"#什么是Dubbo\" class=\"headerlink\" title=\"什么是Dubbo?\"></a>什么是Dubbo?</h3><p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2020-8/427f2168-1930-4c14-8760-415fac8db1d0-20200802184737978.png\" alt=\"img\"></p>\n<p><a href=\"https://github.com/apache/dubbo\">Apache Dubbo</a>|ˈdʌbəʊ|是一款高性能、轻量级的开源Java RPC框架。</p>\n<p>根据 <a href=\"https://dubbo.apache.org/zh/\">Dubbo官方文档</a>的介绍，Dubbo提供了六大核心能力</p>\n<ol>\n<li>面向接口代理的高性能RPC调用。</li>\n<li>智能容错和负载均衡。</li>\n<li>服务自动注册和发现。</li>\n<li>高度可扩展能力。</li>\n<li>运行期流量调度。</li>\n<li>可视化的服务治理与运维。</li>\n</ol>\n<p><img src=\"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/dubbo%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B.png\" alt=\"Dubbo提供的六大核心能力\"></p>\n<p>简单来说就是：<strong>Dubbo不光可以帮助我们调用远程服务，还提供了一些其他开箱即用的功能比如智能负载均衡。</strong></p>\n<p>Dubbo目前已经有接近34.4k的Star。Dubbo是由阿里开源，后来加入了Apache。正是由于Dubbo的出现，才使得越来越多的公司开始使用以及接受分布式架构。</p>\n<h3 id=\"为什么要用Dubbo\"><a href=\"#为什么要用Dubbo\" class=\"headerlink\" title=\"为什么要用Dubbo?\"></a>为什么要用Dubbo?</h3><p>随着互联网的发展，网站的规模越来越大，用户数量越来越多。单一应用架构、垂直应用架构无法满足我们的需求，这个时候分布式服务架构就诞生了。</p>\n<p>分布式服务架构下，系统被拆分成不同的服务比如短信服务、安全服务，每个服务独立提供系统的某个核心服务。</p>\n<p>我们可以使用Java RMI（Java Remote Method Invocation）、Hessian这种支持远程调用的框架来简单地暴露和引用远程服务。但是！当服务越来越多之后，服务调用关系越来越复杂。当应用访问压力越来越大后，负载均衡以及服务监控的需求也迫在眉睫。我们可以用F5这类硬件来做负载均衡，但这样增加了成本，并且存在单点故障的风险。</p>\n<p>不过，Dubbo的出现让上述问题得到了解决。<strong>Dubbo帮助我们解决了什么问题呢？</strong></p>\n<ol>\n<li><strong>负载均衡</strong>：同一个服务部署在不同的机器时该调用哪一台机器上的服务。</li>\n<li><strong>服务调用链路生成</strong>：随着系统的发展，服务越来越多，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。Dubbo可以为我们解决服务之间互相是如何调用的。</li>\n<li><strong>服务访问压力以及时长统计、资源调度和治理</strong>：基于访问压力实时管理集群容量，提高集群利用率。</li>\n<li>……</li>\n</ol>\n<p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/43050183.jpg\" alt=\"img\"></p>\n<p>另外，Dubbo除了能够应用在分布式系统中，也可以应用在现在比较火的微服务系统中。不过，由于Spring Cloud在微服务中应用更加广泛，所以，我觉得一般我们提Dubbo的话，大部分是分布式系统的情况。</p>\n<p><strong>我们刚刚提到了分布式这个概念，下面再给大家介绍一下什么是分布式？为什么要分布式？</strong></p>\n<h2 id=\"分布式基础\"><a href=\"#分布式基础\" class=\"headerlink\" title=\"分布式基础\"></a>分布式基础</h2><h3 id=\"什么是分布式\"><a href=\"#什么是分布式\" class=\"headerlink\" title=\"什么是分布式?\"></a>什么是分布式?</h3><p>分布式或者说SOA分布式重要的就是面向服务，说简单的分布式就是我们把整个系统拆分成不同的服务然后将这些服务放在不同的服务器上减轻单体服务的压力提高并发量和性能。比如电商系统可以简单地拆分成订单系统、商品系统、登录系统等等，拆分之后的每个服务可以部署在不同的机器上，如果某一个服务的访问量比较大的话也可以将这个服务同时部署在多台机器上。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"分布式事务示意图\"></p>\n<h3 id=\"为什么要分布式\"><a href=\"#为什么要分布式\" class=\"headerlink\" title=\"为什么要分布式?\"></a>为什么要分布式?</h3><p>从开发角度来讲单体应用的代码都集中在一起，而分布式系统的代码根据业务被拆分。所以，每个团队可以负责一个服务的开发，这样提升了开发效率。另外，代码根据业务拆分之后更加便于维护和扩展。</p>\n<p>另外，我觉得将系统拆分成分布式之后不光便于系统扩展和维护，更能提高整个系统的性能。你想一想嘛？把整个系统拆分成不同的服务&#x2F;系统，然后每个服务&#x2F;系统单独部署在一台服务器上，是不是很大程度上提高了系统性能呢？</p>\n<h2 id=\"Dubbo架构\"><a href=\"#Dubbo架构\" class=\"headerlink\" title=\"Dubbo架构\"></a>Dubbo架构</h2><h3 id=\"Dubbo架构中的核心角色有哪些？\"><a href=\"#Dubbo架构中的核心角色有哪些？\" class=\"headerlink\" title=\"Dubbo架构中的核心角色有哪些？\"></a>Dubbo架构中的核心角色有哪些？</h3><p><a href=\"https://dubbo.apache.org/zh/docs/v2.7/dev/design/\">官方文档中的框架设计章节</a>已经介绍的非常详细了，我这里把一些比较重要的点再提一下。</p>\n<p><img src=\"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/dubbo-relation.jpg\" alt=\"dubbo-relation\"></p>\n<p>上述节点简单介绍以及他们之间的关系：</p>\n<ul>\n<li><strong>Container：</strong>服务运行容器，负责加载、运行服务提供者。必须。</li>\n<li><strong>Provider：</strong>暴露服务的服务提供方，会向注册中心注册自己提供的服务。必须。</li>\n<li><strong>Consumer：</strong>调用远程服务的服务消费方，会向注册中心订阅自己所需的服务。必须。</li>\n<li><strong>Registry：</strong>服务注册与发现的注册中心。注册中心会返回服务提供者地址列表给消费者。非必须。</li>\n<li><strong>Monitor：</strong>统计服务的调用次数和调用时间的监控中心。服务消费者和提供者会定时发送统计数据到监控中心。非必须。</li>\n</ul>\n<h3 id=\"Dubbo中的Invoker概念了解么？\"><a href=\"#Dubbo中的Invoker概念了解么？\" class=\"headerlink\" title=\"Dubbo中的Invoker概念了解么？\"></a>Dubbo中的Invoker概念了解么？</h3><p>Invoker是Dubbo领域模型中非常重要的一个概念，你如果阅读过Dubbo源码的话，你会无数次看到这玩意。就比如下面我要说的负载均衡这块的源码中就有大量Invoker的身影。</p>\n<p>简单来说，Invoker就是Dubbo对远程调用的抽象。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/dubbo_rpc_invoke.jpg\" alt=\"dubbo_rpc_invoke.jpg\"></p>\n<p>按照Dubbo官方的话来说，Invoker分为</p>\n<ul>\n<li>服务提供Invoker</li>\n<li>服务消费Invoker</li>\n</ul>\n<p>假如我们需要调用一个远程方法，我们需要动态代理来屏蔽远程调用的细节吧！我们屏蔽掉的这些细节就依赖对应的Invoker实现，Invoker实现了真正的远程服务调用。</p>\n<h3 id=\"Dubbo的工作原理了解么？\"><a href=\"#Dubbo的工作原理了解么？\" class=\"headerlink\" title=\"Dubbo的工作原理了解么？\"></a>Dubbo的工作原理了解么？</h3><p>下图是Dubbo的整体设计，从下至上分为十层，各层均为单向依赖。</p>\n<blockquote>\n<p>左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。</p>\n</blockquote>\n<p><img src=\"https://oss.javaguide.cn/source-code/dubbo/dubbo-framework.jpg\" alt=\"dubbo-framework\"></p>\n<ul>\n<li><strong>config配置层</strong>：Dubbo相关的配置。支持代码配置，同时也支持基于Spring来做配置，以Service Config,Reference Config为中心</li>\n<li><strong>proxy服务代理层</strong>：调用远程方法像调用本地的方法一样简单的一个关键，真实调用过程依赖代理类，以ServiceProxy为中心。</li>\n<li><strong>registry注册中心层</strong>：封装服务地址的注册与发现。</li>\n<li><strong>cluster路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心。</li>\n<li><strong>monitor监控层</strong>：RPC调用次数和调用时间监控，以Statistics为中心。</li>\n<li><strong>protocol远程调用层</strong>：封装RPC调用，以Invocation,Result为中心。</li>\n<li><strong>exchange信息交换层</strong>：封装请求响应模式，同步转异步，以Request,Response为中心。</li>\n<li><strong>transport网络传输层</strong>：抽象mina和netty为统一接口，以Message为中心。</li>\n<li><strong>serialize数据序列化层</strong>：对需要在网络传输的数据进行序列化。</li>\n</ul>\n<h3 id=\"Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？\"><a href=\"#Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？\" class=\"headerlink\" title=\"Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？\"></a>Dubbo的SPI机制了解么？如何扩展Dubbo中的默认实现？</h3><p>SPI（Service Provider Interface）机制被大量用在开源项目中，它可以帮助我们动态寻找服务&#x2F;功能（比如负载均衡策略）的实现。</p>\n<p>SPI的具体原理是这样的：我们将接口的实现类放在配置文件中，我们在程序运行过程中读取配置文件，通过反射加载实现类。这样，我们可以在运行的时候，动态替换接口的实现类。和IoC的解耦思想是类似的。</p>\n<p>Java本身就提供了SPI机制的实现。不过，Dubbo没有直接用，而是对Java原生的SPI机制进行了增强，以便更好满足自己的需求。</p>\n<p><strong>那我们如何扩展Dubbo中的默认实现呢？</strong></p>\n<p>比如说我们想要实现自己的负载均衡策略，我们创建对应的实现类XxxLoadBalance实现LoadBalance接口或者AbstractLoadBalance类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxx</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoadBalance</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Invoker</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Invocation</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RpcException</span></span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XxxLoadBalance</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RpcException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们将这个实现类的路径写入到resources目录下的META-INF&#x2F;dubbo&#x2F;org.apache.dubbo.rpc.cluster.LoadBalance文件中即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">src\n <span class=\"token operator\">|</span><span class=\"token operator\">-</span>main\n    <span class=\"token operator\">|</span><span class=\"token operator\">-</span>java\n        <span class=\"token operator\">|</span><span class=\"token operator\">-</span>com\n            <span class=\"token operator\">|</span><span class=\"token operator\">-</span>xxx\n                <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token class-name\">XxxLoadBalance</span><span class=\"token punctuation\">.</span><span class=\"token function\">java</span><span class=\"token punctuation\">(</span>实现<span class=\"token class-name\">LoadBalance</span>接口<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span><span class=\"token operator\">-</span>resources\n        <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token constant\">META</span><span class=\"token operator\">-</span><span class=\"token constant\">INF</span>\n            <span class=\"token operator\">|</span><span class=\"token operator\">-</span>dubbo\n                <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span></span>LoadBalance</span><span class=\"token punctuation\">(</span>纯文本文件，内容为：xxx<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span></span>XxxLoadBalance</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>org.apache.dubbo.rpc.cluster.LoadBalance</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">xxx=com.xxx.XxxLoadBalance<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其他还有很多可供扩展的选择，你可以在<a href=\"https://cn.dubbo.apache.org/zh-cn/overview/home/\">官方文档</a>中找到。</p>\n<h3 id=\"Dubbo的微内核架构了解吗？\"><a href=\"#Dubbo的微内核架构了解吗？\" class=\"headerlink\" title=\"Dubbo的微内核架构了解吗？\"></a>Dubbo的微内核架构了解吗？</h3><p>Dubbo采用微内核（Microkernel）+插件（Plugin）模式，简单来说就是微内核架构。微内核只负责组装插件。</p>\n<p><strong>何为微内核架构呢？</strong>《软件架构模式》这本书是这样介绍的：</p>\n<blockquote>\n<p>微内核架构模式（有时被称为插件架构模式）是实现基于产品应用程序的一种自然模式。基于产品的应用程序是已经打包好并且拥有不同版本，可作为第三方插件下载的。然后，很多公司也在开发、发布自己内部商业应用像有版本号、说明及可加载插件式的应用软件（这也是这种模式的特征）。微内核系统可让用户添加额外的应用如插件，到核心应用，继而提供了可扩展性和功能分离的用法。</p>\n</blockquote>\n<p>微内核架构包含两类组件：<strong>核心系统（coresystem）</strong>和<strong>插件模块（plug-inmodules）</strong>。</p>\n<p><img src=\"https://oss.javaguide.cn/source-code/dubbo/%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"img\"></p>\n<p>核心系统提供系统所需核心能力，插件模块可以扩展系统的功能。因此，基于微内核架构的系统，非常易于扩展功能。</p>\n<p>我们常见的一些IDE，都可以看作是基于微内核架构设计的。绝大多数IDE比如IDEA、VSCode都提供了插件来丰富自己的功能。</p>\n<p>正是因为Dubbo基于微内核架构，才使得我们可以随心所欲替换Dubbo的功能点。比如你觉得Dubbo的序列化模块实现的不满足自己要求，没关系,你自己实现一个序列化模块就好了</p>\n<p>通常情况下，微核心都会采用Factory、IoC、OSGi等方式管理插件生命周期。Dubbo不想依赖Spring等IoC容器，也不想自己造一个小的IoC容器（过度设计），因此采用了一种最简单的Factory方式管理插件：<strong>JDK标准的SPI扩展机制</strong>（java.util.ServiceLoader）。</p>\n<h3 id=\"关于Dubbo架构的一些自测小问题\"><a href=\"#关于Dubbo架构的一些自测小问题\" class=\"headerlink\" title=\"关于Dubbo架构的一些自测小问题\"></a>关于Dubbo架构的一些自测小问题</h3><h4 id=\"注册中心的作用了解么？\"><a href=\"#注册中心的作用了解么？\" class=\"headerlink\" title=\"注册中心的作用了解么？\"></a>注册中心的作用了解么？</h4><p>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互。</p>\n<h4 id=\"服务提供者宕机后，注册中心会做什么？\"><a href=\"#服务提供者宕机后，注册中心会做什么？\" class=\"headerlink\" title=\"服务提供者宕机后，注册中心会做什么？\"></a>服务提供者宕机后，注册中心会做什么？</h4><p>注册中心会立即推送事件通知消费者。</p>\n<h4 id=\"监控中心的作用呢？\"><a href=\"#监控中心的作用呢？\" class=\"headerlink\" title=\"监控中心的作用呢？\"></a>监控中心的作用呢？</h4><p>监控中心负责统计各服务调用次数，调用时间等。</p>\n<h4 id=\"注册中心和监控中心都宕机的话，服务都会挂掉吗？\"><a href=\"#注册中心和监控中心都宕机的话，服务都会挂掉吗？\" class=\"headerlink\" title=\"注册中心和监控中心都宕机的话，服务都会挂掉吗？\"></a>注册中心和监控中心都宕机的话，服务都会挂掉吗？</h4><p>不会。两者都宕机也不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。注册中心和监控中心都是可选的，服务消费者可以直连服务提供者。</p>\n<h2 id=\"Dubbo的负载均衡策略\"><a href=\"#Dubbo的负载均衡策略\" class=\"headerlink\" title=\"Dubbo的负载均衡策略\"></a>Dubbo的负载均衡策略</h2><h3 id=\"什么是负载均衡？\"><a href=\"#什么是负载均衡？\" class=\"headerlink\" title=\"什么是负载均衡？\"></a>什么是负载均衡？</h3><p>先来看一下稍微官方点的解释。下面这段话摘自维基百科对负载均衡的定义：</p>\n<blockquote>\n<p>负载均衡改善了跨多个计算资源（例如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动）的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。使用具有负载平衡而不是单个组件的多个组件可以通过冗余提高可靠性和可用性。负载平衡通常涉及专用软件或硬件。</p>\n</blockquote>\n<p><strong>上面讲的大家可能不太好理解，再用通俗的话给大家说一下。</strong></p>\n<p>我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。</p>\n<h3 id=\"Dubbo提供的负载均衡策略有哪些？\"><a href=\"#Dubbo提供的负载均衡策略有哪些？\" class=\"headerlink\" title=\"Dubbo提供的负载均衡策略有哪些？\"></a>Dubbo提供的负载均衡策略有哪些？</h3><p>在集群负载均衡时，Dubbo提供了多种均衡策略，默认为random随机调用。我们还可以自行扩展负载均衡策略（参考DubboSPI机制）。</p>\n<p>在Dubbo中，所有负载均衡实现类均继承自AbstractLoadBalance，该类实现了LoadBalance接口，并封装了一些公共的逻辑。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractLoadBalance</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateWarmupWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> uptime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> warmup<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> invoker<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>AbstractLoadBalance的实现类有下面这些：</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/image-20210326105257812.png\" alt=\"img\"></p>\n<h4 id=\"RandomLoadBalance\"><a href=\"#RandomLoadBalance\" class=\"headerlink\" title=\"RandomLoadBalance\"></a>RandomLoadBalance</h4><p>根据权重随机选择（对加权随机算法的实现）。这是Dubbo默认采用的一种负载均衡策略。</p>\n<p>RandomLoadBalance具体的实现原理非常简单，假如有两个提供相同服务的服务器S1,S2，S1的权重为7，S2的权重为3。</p>\n<p>我们把这些权重值分布在坐标区间会得到：S1-&gt;[0,7)，S2-&gt;[7,10)。我们生成[0,10)之间的随机数，随机数落到对应的区间，我们就选择对应的服务器来处理请求。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/%20RandomLoadBalance.png\" alt=\"RandomLoadBalance\"></p>\n<p>RandomLoadBalance的源码非常简单，简单花几分钟时间看一下。</p>\n<blockquote>\n<p>以下源码来自Dubbomaster分支上的最新的版本2.7.9。</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomLoadBalance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"random\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">int</span> totalWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下面这个for循环的主要作用就是计算所有该服务的提供者的权重之和totalWeight（），</span>\n        <span class=\"token comment\">// 除此之外，还会检测每个服务提供者的权重是否相同</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> weight <span class=\"token operator\">=</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span>invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            totalWeight <span class=\"token operator\">+=</span> weight<span class=\"token punctuation\">;</span>\n            weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> totalWeight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameWeight <span class=\"token operator\">&amp;&amp;</span> totalWeight <span class=\"token operator\">!=</span> weight <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalWeight <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sameWeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 随机生成一个[0,totalWeight)区间内的数字</span>\n            <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>totalWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 判断会落在哪个服务提供者的区间</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n  \n        <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"LeastActiveLoadBalance\"><a href=\"#LeastActiveLoadBalance\" class=\"headerlink\" title=\"LeastActiveLoadBalance\"></a>LeastActiveLoadBalance</h4><p>LeastActiveLoadBalance直译过来就是<strong>最小活跃数负载均衡</strong>。</p>\n<p>这个名字起得有点不直观，不仔细看官方对活跃数的定义，你压根不知道这玩意是干嘛的。</p>\n<p>我这么说吧！初始状态下所有服务提供者的活跃数均为0（每个服务提供者的中特定方法都对应一个活跃数，我在后面的源码中会提到），每收到一个请求后，对应的服务提供者的活跃数+1，当这个请求处理完之后，活跃数-1。</p>\n<p>因此，<strong>Dubbo就认为谁的活跃数越少，谁的处理速度就越快，性能也越好，这样的话，我就优先把请求给活跃数少的服务提供者处理。</strong></p>\n<p><strong>如果有多个服务提供者的活跃数相等怎么办？</strong></p>\n<p>很简单，那就再走一遍RandomLoadBalance。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeastActiveLoadBalance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLoadBalance</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"leastactive\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">doSelect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invoker</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> invokers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leastActive <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leastCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leastIndexes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> firstWeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 这个for循环的主要作用是遍历invokers列表，找出活跃数最小的Invoker</span>\n        <span class=\"token comment\">// 如果有多个Invoker具有相同的最小活跃数，还会记录下这些Invoker在invokers集合中的下标，并累加它们的权重，比较它们的权重值是否相等</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Invoker</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> invoker <span class=\"token operator\">=</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取invoker对应的活跃(active)数</span>\n            <span class=\"token keyword\">int</span> active <span class=\"token operator\">=</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span>invoker<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> afterWarmup <span class=\"token operator\">=</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span>invoker<span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> afterWarmup<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leastActive <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> active <span class=\"token operator\">&lt;</span> leastActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leastActive <span class=\"token operator\">=</span> active<span class=\"token punctuation\">;</span>\n                leastCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                leastIndexes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                totalWeight <span class=\"token operator\">=</span> afterWarmup<span class=\"token punctuation\">;</span>\n                firstWeight <span class=\"token operator\">=</span> afterWarmup<span class=\"token punctuation\">;</span>\n                sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>active <span class=\"token operator\">==</span> leastActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leastIndexes<span class=\"token punctuation\">[</span>leastCount<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                totalWeight <span class=\"token operator\">+=</span> afterWarmup<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameWeight <span class=\"token operator\">&amp;&amp;</span> afterWarmup <span class=\"token operator\">!=</span> firstWeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sameWeight <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token comment\">// 如果只有一个Invoker具有最小的活跃数，此时直接返回该Invoker即可</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leastCount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leastIndexes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 如果有多个Invoker具有相同的最小活跃数，但它们之间的权重不同</span>\n        <span class=\"token comment\">// 这里的处理方式就和RandomLoadBalance一致了</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sameWeight <span class=\"token operator\">&amp;&amp;</span> totalWeight <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> offsetWeight <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>totalWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> leastCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> leastIndex <span class=\"token operator\">=</span> leastIndexes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                offsetWeight <span class=\"token operator\">-=</span> weights<span class=\"token punctuation\">[</span>leastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offsetWeight <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> invokers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leastIndexes<span class=\"token punctuation\">[</span><span class=\"token class-name\">ThreadLocalRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>leastCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>活跃数是通过RpcStatus中的一个ConcurrentMap保存的，根据URL以及服务提供者被调用的方法的名称，我们便可以获取到对应的活跃数。也就是说服务提供者中的每一个方法的活跃数都是互相独立的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcStatus</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">METHOD_STATISTICS</span> <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RpcStatus</span> <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> uri <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">toIdentityString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ConcurrentMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token constant\">METHOD_STATISTICS</span><span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> active<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ConsistentHashLoadBalance\"><a href=\"#ConsistentHashLoadBalance\" class=\"headerlink\" title=\"ConsistentHashLoadBalance\"></a>ConsistentHashLoadBalance</h4><p>ConsistentHashLoadBalance小伙伴们应该也不会陌生，在分库分表、各种集群中就经常使用这个负载均衡策略。</p>\n<p>ConsistentHashLoadBalance即<strong>一致性Hash负载均衡策略</strong>。ConsistentHashLoadBalance中没有权重的概念，具体是哪个服务提供者处理请求是由你的请求的参数决定的，也就是说相同参数的请求总是发到同一个服务提供者。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/consistent-hash-data-incline.jpg\" alt=\"img\"></p>\n<p>另外，Dubbo为了避免数据倾斜问题（节点不够分散，大量请求落到同一节点），还引入了虚拟节点的概念。通过虚拟节点可以让节点更加分散，有效均衡各个节点的请求量。</p>\n<p><img src=\"https://oss.javaguide.cn/java-guide-blog/consistent-hash-invoker.jpg\" alt=\"img\"></p>\n<p>官方有详细的<a href=\"https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#23-consistenthashloadbalance\">源码分析</a>。这里还有一个相关的<a href=\"https://github.com/apache/dubbo/pull/5440\">PR#5440</a>来修复老版本中ConsistentHashLoadBalance存在的一些Bug。感兴趣的小伙伴，可以多花点时间研究一下。</p>\n<h4 id=\"RoundRobinLoadBalance\"><a href=\"#RoundRobinLoadBalance\" class=\"headerlink\" title=\"RoundRobinLoadBalance\"></a>RoundRobinLoadBalance</h4><p>加权轮询负载均衡。</p>\n<p>轮询就是把请求依次分配给每个服务提供者。加权轮询就是在轮询的基础上，让更多的请求落到权重更大的服务提供者上。比如假如有两个提供相同服务的服务器S1,S2，S1的权重为7，S2的权重为3。</p>\n<p>如果我们有10次请求，那么7次会被S1处理，3次被S2处理。</p>\n<p>但是，如果是RandomLoadBalance的话，很可能存在10次请求有9次都被S1处理的情况（概率性问题）。</p>\n<p>Dubbo中的RoundRobinLoadBalance的代码实现被修改重建了好几次，Dubbo-2.6.5版本的RoundRobinLoadBalance为平滑加权轮询算法。</p>\n<h2 id=\"Dubbo序列化协议\"><a href=\"#Dubbo序列化协议\" class=\"headerlink\" title=\"Dubbo序列化协议\"></a>Dubbo序列化协议</h2><h3 id=\"Dubbo支持哪些序列化方式呢？\"><a href=\"#Dubbo支持哪些序列化方式呢？\" class=\"headerlink\" title=\"Dubbo支持哪些序列化方式呢？\"></a>Dubbo支持哪些序列化方式呢？</h3><p><img src=\"https://oss.javaguide.cn/github/javaguide/csdn/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309234143460.png\" alt=\"img\"></p>\n<p>Dubbo支持多种序列化方式：JDK自带的序列化、hessian2、JSON、Kryo、FST、Protostuff，ProtoBuf等等。</p>\n<p>Dubbo默认使用的序列化方式是hessian2。</p>\n<h3 id=\"谈谈你对这些序列化协议了解？\"><a href=\"#谈谈你对这些序列化协议了解？\" class=\"headerlink\" title=\"谈谈你对这些序列化协议了解？\"></a>谈谈你对这些序列化协议了解？</h3><p>一般我们不会直接使用JDK自带的序列化方式。主要原因有两个：</p>\n<ol>\n<li><strong>不支持跨语言调用</strong>:如果调用的是其他语言开发的服务的时候就不支持了。</li>\n<li><strong>性能差</strong>：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。</li>\n</ol>\n<p>JSON序列化由于性能问题，我们一般也不会考虑使用。</p>\n<p>像Protostuff，ProtoBuf、hessian2这些都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。</p>\n<p>Kryo和FST这两种序列化方式是Dubbo后来才引入的，性能非常好。不过，这两者都是专门针对Java语言的。Dubbo官网的一篇文章中提到说推荐使用Kryo作为生产环境的序列化方式。(<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/references/protocol/rest/\">文章地址</a>)</p>\n<p><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2020-8/569e541a-22b2-4846-aa07-0ad479f07440.png\" alt=\"img\"></p>\n<p>Dubbo官方文档中还有一个关于这些<a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/serialization/#m-zhdocsv27userserialization\">序列化协议的性能对比图</a>可供参考。</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-00c3ce1e5d222e477ed84310239daa2f6b0.png\" alt=\"img\"></p>\n<blockquote>\n<p><a href=\"https://javaguide.cn/distributed-system/rpc/dubbo.html\">原文链接</a></p>\n</blockquote>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"http://dubbo.apache.org/zh-cn/docs/user/quick-start.html\">dubbo官方文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/jveqCUAiqKdKRoea9wESbw\">长文图解七种负载均衡策略</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/NEfWwnRVOI73_TQurmxk9A\">如果Dubbo还没精通原理，就从这里开始吧</a></li>\n</ul>\n","categories":[{"name":"技术栈","path":"api/categories/技术栈.json"}],"tags":[]}