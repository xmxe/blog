{"title":"Nginx","slug":"Nginx","date":"2022-09-27T07:51:22.667Z","updated":"2023-03-22T07:12:07.636Z","comments":true,"path":"api/articles/Nginx.json","excerpt":null,"covers":"https://picx1.zhimg.com/v2-e68d524210343613129267bd2cb75a0d_1440w.jpg","content":"<h4 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h4><h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 下载nginx:</span>\n<span class=\"token function\">wget</span> http://nginx.org/download/nginx-1.8.1.tar.gz\n<span class=\"token comment\"># 下载openssl:</span>\n<span class=\"token function\">wget</span> https://www.openssl.org/source/openssl-fips-2.0.16.tar.gz\n<span class=\"token comment\"># 下载zlib:</span>\n<span class=\"token function\">wget</span> http://www.zlib.net/zlib-1.2.11.tar.gz\n<span class=\"token comment\"># 下载pcre:</span>\n<span class=\"token function\">wget</span> ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\n<span class=\"token comment\"># 如果没有安装c++编译环境，还得安装，通过```yum install gcc-c++```完成安装</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># openssl：</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token function\">tar</span> zxvf openssl-fips-2.0.16.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> openssl-fips-2.0.16\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> ./config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># pcre:</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token function\">tar</span> zxvf pcre-8.39.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> pcre-8.39\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>  ./configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># zlib:</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>tar zxvf zlib-1.2.11.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> zlib-1.2.11\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>  ./configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># 最后安装nginx</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>tar zxvf nginx-1.8.1.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> nginx-1.8.1\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>  ./configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/usr/local/nginx/sbin/nginx\n/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> stop <span class=\"token comment\"># 立即停止nginx，不保存相关信息</span>\n/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> quit  <span class=\"token comment\"># 正常退出nginx，保存相关信息</span>\n/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> reload <span class=\"token comment\"># 重启</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.cnblogs.com/lovexinyi8/p/5845017.html\">Linux安装Nginx详细图解教程</a></p>\n<h5 id=\"将nginx做成系统服务并且开机自启动\"><a href=\"#将nginx做成系统服务并且开机自启动\" class=\"headerlink\" title=\"将nginx做成系统服务并且开机自启动\"></a>将nginx做成系统服务并且开机自启动</h5><p>由于是源码安装，需要手动创建nginx.service服务</p>\n<blockquote>\n<p>不止nginx，其他源码安装的想要实现开机自启动就在&#x2F;lib&#x2F;systemd&#x2F;system目录下自定义服务即可</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /lib/systemd/system/nginx.service\n<span class=\"token comment\"># 编辑内容</span>\n<span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>nginx.service\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target\n\n<span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>forking\n<span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx\n<span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> reload\n<span class=\"token assign-left variable\">ExecStop</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> quit\n<span class=\"token assign-left variable\">PrivateTmp</span><span class=\"token operator\">=</span>true\n\n<span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target\n\n<span class=\"token comment\"># 参数介绍：</span>\n<span class=\"token comment\"># [Unit]:服务的说明</span>\n<span class=\"token comment\"># Description:描述服务</span>\n<span class=\"token comment\"># After:描述服务类别</span>\n<span class=\"token comment\"># [Service]服务运行参数的设置</span>\n<span class=\"token comment\"># Type=forking是后台运行的形式</span>\n<span class=\"token comment\"># ExecStart为服务的具体运行命令</span>\n<span class=\"token comment\"># ExecReload为重启命令</span>\n<span class=\"token comment\"># ExecStop为停止命令</span>\n<span class=\"token comment\"># PrivateTmp=True表示给服务分配独立的临时空间</span>\n<span class=\"token comment\"># 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span>\n<span class=\"token comment\"># [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>:wq! 保存退出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置开机启动</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> nginx.service\n<span class=\"token comment\"># 其他命令</span>\n<span class=\"token comment\"># 启动nginx服务</span>\nsystemctl start nginx.service　\n<span class=\"token comment\"># 停止开机自启动</span>\nsystemctl disable nginx.service\n<span class=\"token comment\"># 查看服务当前状态</span>\nsystemctl status nginx.service\n<span class=\"token comment\"># 重新启动服务</span>\nsystemctl restart nginx.service　\n<span class=\"token comment\"># 查看所有已启动的服务</span>\nsystemctl list-units <span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Nginx知识点\"><a href=\"#Nginx知识点\" class=\"headerlink\" title=\"Nginx知识点\"></a>Nginx知识点</h4><h5 id=\"nginx判断\"><a href=\"#nginx判断\" class=\"headerlink\" title=\"nginx判断\"></a>nginx判断</h5><p>1、正则表达式匹配：</p>\n<p>&#x3D;&#x3D;:等值比较;<br>~：与指定正则表达式模式匹配时返回“真”，判断匹配与否时区分字符大小写；<br>~*：与指定正则表达式模式匹配时返回“真”，判断匹配与否时不区分字符大小写；<br>!~：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时区分字符大小写；<br>!~*：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时不区分字符大小写；</p>\n<p>2、文件及目录匹配判断：</p>\n<p>-f, !-f：判断指定的路径是否为存在且为文件；<br>-d, !-d：判断指定的路径是否为存在且为目录；<br>-e, !-e：判断指定的路径是否存在，文件或目录均可；<br>-x, !-x：判断指定路径的文件是否存在且可执行；</p>\n<h5 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h5><p>location [&#x3D;|<del>|</del>*|^~] &#x2F;uri&#x2F; { … }</p>\n<p>&#x3D; 表示精确匹配,这个优先级也是最高的<br>^~ 表示uri以某个常规字符串开头，理解为匹配url路径即可。nginx不对url做编码，因此请求为&#x2F;static&#x2F;20%&#x2F;aa，可以被规则^~ &#x2F;static&#x2F; &#x2F;aa匹配到（注意是空格）。<br>~ 表示区分大小写的正则匹配<br>~* 表示不区分大小写的正则匹配(和上面的唯一区别就是大小写)<br>!~和!~*分别为区分大小写不匹配及不区分大小写不匹配的正则<br>&#x2F; 通用匹配，任何请求都会匹配到，默认匹配.</p>\n<p>下面讲讲这些语法的一些规则和优先级</p>\n<p>多个location配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）：<br>优先级 &#x3D; ^~ &#x2F;<br>首先匹配&#x3D;，其次匹配^~,其次是按文件中顺序的正则匹配，最后是交给&#x2F;通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。例子，有如下匹配规则：</p>\n<h5 id=\"ngx-http-core-module模块的变量\"><a href=\"#ngx-http-core-module模块的变量\" class=\"headerlink\" title=\"ngx_http_core_module模块的变量\"></a>ngx_http_core_module模块的变量</h5><p>$arg_PARAMETER HTTP请求中某个参数的值，如&#x2F;index.php?site&#x3D;<a href=\"http://www.domain.com,可以用$arg_site取得www.domain.com这个值./\">www.domain.com，可以用$arg_site取得www.domain.com这个值。</a></p>\n<p>$args HTTP请求中的完整参数。例如，在请求&#x2F;index.php?width&#x3D;400&amp;height&#x3D;200中，$args表示字符串width&#x3D;400&amp;height&#x3D;200.</p>\n<p>$binary_remote_addr 二进制格式的客户端地址。例如：\\x0A\\xE0B\\x0E</p>\n<p>$body_bytes_sent 表示在向客户端发送的http响应中，包体部分的字节数</p>\n<p>$content_length 表示客户端请求头部中的Content-Length字段</p>\n<p>$content_type 表示客户端请求头部中的Content-Type字段</p>\n<p>$cookie_COOKIE 表示在客户端请求头部中的cookie字段</p>\n<p>$document_root 表示当前请求所使用的root配置项的值</p>\n<p>$uri 表示当前请求的URI，不带任何参数</p>\n<p>$document_uri与$uri含义相同</p>\n<p>$request_uri表示客户端发来的原始请求URI，带完整的参数。$uri和$document_uri未必是用户的原始请求，在内部重定向后可能是重定向后的URI，而$request_uri永远不会改变，始终是客户端的原始URI.</p>\n<p>$host 表示客户端请求头部中的Host字段。如果Host字段不存在，则以实际处理的server（虚拟主机）名称代替。如果Host字段中带有端口，如IP:PORT，那么$host是去掉端口的，它的值为IP。$host是全小写的。这些特性与http_HEADER中的http_host不同，http_host只取出Host头部对应的值。</p>\n<p>$hostname 表示Nginx所在机器的名称，与gethostbyname调用返回的值相同</p>\n<p>$http_HEADER 表示当前HTTP请求中相应头部的值。HEADER名称全小写。例如，示请求中Host头部对应的值用$http_host表</p>\n<p>$sent_http_HEADER 表示返回客户端的HTTP响应中相应头部的值。HEADER名称全小写。例如，用$sent_http_content_type表示响应中Content-Type头部对应的值</p>\n<p>$is_args 表示请求中的URI是否带参数，如果带参数，$is_args值为?，如果不带参数，则是空字符串</p>\n<p>$limit_rate 表示当前连接的限速是多少，0表示无限速</p>\n<p>$nginx_version 表示当前Nginx的版本号</p>\n<p>$query_string 请求URI中的参数，与$args相同，然而$query_string是只读的不会改变</p>\n<p>$remote_addr 表示客户端的地址</p>\n<p>$remote_port 表示客户端连接使用的端口</p>\n<p>$remote_user 表示使用Auth Basic Module时定义的用户名</p>\n<p>$request_filename 表示用户请求中的URI经过root或alias转换后的文件路径</p>\n<p>$request_body 表示HTTP请求中的包体，该参数只在proxy_pass或fastcgi_pass中有意义</p>\n<p>$request_body_file 表示HTTP请求中的包体存储的临时文件名</p>\n<p>$request_completion 当请求已经全部完成时，其值为“ok”。若没有完成，就要返回客户端，则其值为空字符串；或者在断点续传等情况下使用HTTP range访问的并不是文件的最后一块，那么其值也是空字符串。</p>\n<p>$request_method 表示HTTP请求的方法名，如GET、PUT、POST等</p>\n<p>$scheme 表示HTTP scheme，如在请求<a href=\"https://nginx.com/%E4%B8%AD%E8%A1%A8%E7%A4%BAhttps\">https://nginx.com/中表示https</a></p>\n<p>$server_addr 表示服务器地址</p>\n<p>$server_name 表示服务器名称</p>\n<p>$server_port 表示服务器端口</p>\n<p>$server_protocol 表示服务器向客户端发送响应的协议，如HTTP&#x2F;1.1或HTTP&#x2F;1.0</p>\n<h5 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h5><p>$remote_addr,$http_x_forwarded_for记录客户端IP地址</p>\n<p>$remote_user 记录客户端用户名称</p>\n<p>$request 记录请求的URL和HTTP协议</p>\n<p>$status 记录请求状态</p>\n<p>$body_bytes_sent 发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块mod_log_config里的“%B”参数兼容。</p>\n<p>$bytes_sent 发送给客户端的总字节数。</p>\n<p>$connection 连接的序列号。</p>\n<p>$connection_requests 当前通过一个连接获得的请求数量。</p>\n<p>$msec 日志写入时间。单位为秒，精度是毫秒。</p>\n<p>$pipe 如果请求是通过HTTP流水线(pipelined)发送，pipe值为“p”，否则为“.”。</p>\n<p>$http_referer 记录从哪个页面链接访问过来的</p>\n<p>$http_user_agent 记录客户端浏览器相关信息</p>\n<p>$request_length 请求的长度（包括请求行，请求头和请求正文）。</p>\n<p>$request_time 请求处理时间，单位为秒，精度毫秒；从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</p>\n<p>$time_iso8601 ISO8601标准格式下的本地时间。</p>\n<p>$time_local 通用日志格式下的本地时间。</p>\n<h5 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h5><p>语法：if (condition) { … }</p>\n<p>默认值：none</p>\n<p>使用字段：server, location</p>\n<p>注意：尽量考虑使用trp_files代替。</p>\n<p>判断的条件可以有以下值：</p>\n<ol>\n<li>一个变量的名称：空字符传”“或者一些“0”开始的字符串为false。</li>\n<li>字符串比较：使用&#x3D;或!&#x3D;运算符</li>\n<li>正则表达式匹配：使用~(区分大小写)和~*(不区分大小写)，取反运算!~和!~*。</li>\n<li>文件是否存在：使用-f和!-f操作符</li>\n<li>目录是否存在：使用-d和!-d操作符</li>\n<li>文件、目录、符号链接是否存在：使用-e和!-e操作符</li>\n<li>文件是否可执行：使用-x和!-x操作符</li>\n</ol>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>语法：return code</p>\n<p>默认值：none</p>\n<p>使用字段：server,location,if</p>\n<p>nginx隐藏版本号</p>\n<p>nginx.conf中修改http zone中的变量值： server_tokens off;</p>\n<p>php-fpm fastcgi.conf中的变量值： fastcgi_param SERVER_SOFTWARE nginx;</p>\n<h5 id=\"nginx正向代理\"><a href=\"#nginx正向代理\" class=\"headerlink\" title=\"nginx正向代理\"></a>nginx正向代理</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nserver &#123;\n\nlisten 8090;\n\nlocation &#x2F; &#123;\n\nresolver 218.85.157.99 218.85.152.99;\n\nresolver_timeout 30s;\n\nproxy_pass http:&#x2F;&#x2F;$host$request_uri;\n\n&#125;\n\naccess_log &#x2F;data&#x2F;httplogs&#x2F;proxy-$host-aceess.log;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>resolver指令</p>\n<p>语法: resolver address … [valid&#x3D;time];</p>\n<p>默认值: —</p>\n<p>配置段: http, server, location</p>\n<p>配置DNS服务器IP地址。可以指定多个，以轮询方式请求。</p>\n<p>nginx会缓存解析的结果。默认情况下，缓存时间是名字解析响应中的TTL字段的值，可以通过valid参数更改。</p>\n<h4 id=\"nginx-conf\"><a href=\"#nginx-conf\" class=\"headerlink\" title=\"nginx.conf\"></a>nginx.conf</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 指定Nginx服务的用户和用户组</span>\n<span class=\"token comment\"># user  nobody nobody;</span>\n\n<span class=\"token comment\"># 工作进程：数目。根据硬件调整,通常等于CPU数量或者2倍于CPU(允许生成的进程数)</span>\nworker_processes  <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nworker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 制定日志路径、级别。这个设置可以放入全局块,http块,server块.级别以此为:debug|info|notice|warn|error|crit|alert|emerg</span>\nerror_log  /usr/local/logs/error.log  notice<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># pid(进程标识符)指定nginx进程运行文件存放位置</span>\npid  /usr/local/logs/nginx.pid<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 用于nginx工作模式的配置</span>\nevents <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 设置网路连接序列化,防止惊群现象发生,默认为on</span>\n    accept_mutex  off<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 设置一个进程是否同时接受多个网络连接,默认为off</span>\n    multi_accept  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 事件驱动模型,select|poll|kqueue|epoll|resig|/dev/poll|eventport</span>\n    use  epoll<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 指定进程可以打开的最大描述符：数目。</span>\n    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 用于进行http协议信息的一些配置</span>\nhttp <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 设定mime类型,类型由mime.type文件定义</span>\n    include  mime.types<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 默认文件类型,默认为text/plain</span>\n    default_type  application/octet-stream<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 日志格式</span>\n    log_format  myformat  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n                          <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span>\n                          <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># access_log  logs/access.log  myformat;  #combined为日志格式的默认值</span>\n\n    <span class=\"token comment\"># 取消访问日志</span>\n    access_log  off<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 设置DNS解析超时时间</span>\n    resolver_timeout  60s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># tcp连接关闭前的延时时间</span>\n    lingering_timeout  5s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 允许sendfile方式传输文件,默认为off,可以在http块,server块,location块,将文件的回写过程交给数据缓冲区完成,提升性能</span>\n    sendfile  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 每个进程每次调用传输数量不能大于设定的值,默认为0,即不设上限。</span>\n    sendfile_max_chunk  100k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 每个TCP连接最多可以保持多长时间,默认为75s,可以在http,server,location块。</span>\n    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 让nginx在一个数据包中发送所有的头文件,而不是一个一个单独发</span>\n    tcp_nopush  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 启动TCP_NODELAY,禁用Nagle算法,允许小包的发送</span>\n    tcp_nodelay  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 请求头设置缓冲区</span>\n    client_header_buffer_size  4k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 指定客户端与服务端建立连接后发送request body的超时时间,如果客户端在指定时间内没有发送任何内容,返回408(Request Timed Out)</span>\n    client_body_timeout  60s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 客户端向服务端发送一个完整的request header的超时时间。如果客户端在指定时间内没有发送一个完整的request header,返回408()</span>\n    client_header_timeout  60s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 上传文件最大限制20兆</span>\n    client_max_body_size  20m<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 缓冲区不足按照这个分配</span>\n    large_client_header_buffers <span class=\"token number\">4</span> 8k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># max指定缓存数量,inactive是指经过多长时间文件没被请求后删除缓存</span>\n    open_file_cache  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token number\">102400</span> <span class=\"token assign-left variable\">inactive</span><span class=\"token operator\">=</span>20s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 多长时间检查一次缓存的有效信息</span>\n    open_file_cache_valid  30s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 指令中的inactive参数时间内文件的最少使用次数,如果超过这个数字,文件更改信息一直是在缓存中打开的</span>\n    open_file_cache_min_uses  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># FastCGI相关参数是为了改善网站的性能:减少资源占用,提高访问速度。</span>\n    fastcgi_connect_timeout <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    fastcgi_send_timeout <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    fastcgi_read_timeout <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    fastcgi_buffer_size 64k<span class=\"token punctuation\">;</span>\n    fastcgi_buffers <span class=\"token number\">8</span> 128k<span class=\"token punctuation\">;</span>\n    fastcgi_busy_buffers_size 128k<span class=\"token punctuation\">;</span>\n    fastcgi_temp_file_write_size 128k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 限制ip访问(限流)</span>\n    <span class=\"token comment\"># 定义一个名为one的内存空间,大小是10M,以$binary_remote_addr($binary_remote_addr 表示通过remote_addr这个标识来做限制,“binary_”的目的是缩写内存占用量,是限制同一客户端ip地址)为key,限制平均每秒的请求为20个,可以有比如rate=30r/m的</span>\n    <span class=\"token comment\"># 1M能存储16000个状态,rete的值必须为整数,rate=20r/s表示允许相同标识的客户端的访问频次</span>\n    <span class=\"token comment\"># 在Server块中通过limit_req使用</span>\n    limit_req_zone <span class=\"token variable\">$binary_remote_addr</span> <span class=\"token assign-left variable\">zone</span><span class=\"token operator\">=</span>one:10m <span class=\"token assign-left variable\">rate</span><span class=\"token operator\">=</span>20r/s<span class=\"token punctuation\">;</span>\n\n    proxy_buffering  on<span class=\"token punctuation\">;</span>\n    proxy_cache_valid  any  10m<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># proxy_cache_path:本地路径,缓存文件存放地址；</span>\n    <span class=\"token comment\"># levels:默认所有缓存文件都放在同一个/path/to/cache下,从而影响缓存的性能,大部分场景推荐使用2级目录来存储缓存文件；</span>\n    <span class=\"token comment\"># key_zone:在共享内存中设置一块存储区域来存放缓存的key和metadata(类似使用次数),这样nginx可以快速判断一个request是否命中或者未命#中缓存,1m可以存储8000个key,10m可以存储80000个key</span>\n    <span class=\"token comment\"># max_size:最大cache空间,如果不指定,会使用掉所有disk space,当达到配额后,会删除最少使用的cache文件</span>\n    <span class=\"token comment\"># inactive:未被访问文件在缓存中保留时间,本配置中如果60分钟未被访问则不论状态是否为expired,缓存控制程序会删掉文件,默认为10分钟,需要注意的是,inactive和expired配置项的含义是不同的,expired只是缓存过期,但不会被删除,inactive是删除指定时间内未被访问的缓存文件</span>\n    <span class=\"token comment\"># use_temp_path如果为off,则nginx会将缓存文件直接写入指定的cache文件中,而不是使用temp_path存储,official建议为off,避免文件在不同文件系统中不必要的拷贝</span>\n    proxy_cache_path  /path/to/cache <span class=\"token assign-left variable\">levels</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>:2 <span class=\"token assign-left variable\">keys_zone</span><span class=\"token operator\">=</span>my_cache:10m <span class=\"token assign-left variable\">max_size</span><span class=\"token operator\">=</span>10g <span class=\"token assign-left variable\">inactive</span><span class=\"token operator\">=</span>60m <span class=\"token assign-left variable\">use_temp_path</span><span class=\"token operator\">=</span>off<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 为存储承载从代理服务器接收到的数据的临时文件定义目录</span>\n    proxy_temp_path /data/temp<span class=\"token punctuation\">;</span>\n    \n    proxy_buffer_size  4k<span class=\"token punctuation\">;</span>\n    proxy_buffers <span class=\"token number\">100</span>  8k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 采用gzip压缩的形式发送数据。这将会减少我们发送的数据量</span>\n    <span class=\"token function\">gzip</span>  on<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 最小压缩文件大小</span>\n    gzip_min_length  1k<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩缓冲区</span>\n    gzip_buffers <span class=\"token number\">4</span> 16k<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩版本(默认1.1,前端如果是squid2.5请使用1.0)</span>\n    gzip_http_version <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩等级</span>\n    gzip_comp_level <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩类型,默认就已经包含text/html</span>\n    gzip_types text/plain application/x-javascript text/css application/xml<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 给CDN和代理服务器使用,针对相同url,可以根据头信息返回压缩和非压缩副本</span>\n    gzip_vary on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 配置段: http,server,location 服务端向客户端传输数据的超时时间。</span>\n    send_timeout 30s<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 默认off,nginx默认request的header的中包含'_'时，会自动忽略掉。</span>\n    underscores_in_headers on<span class=\"token punctuation\">;</span>\n\n    upstream wypt2 <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># least_conn,ip_hash,weight,fair等根据实际情况选择一个即可</span>\n\n        <span class=\"token comment\"># 把请求分配到连接数最少的server</span>\n        least_conn<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session的问题。</span>\n        ip_hash<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># weight=1 指定轮询几率,weight和访问比率成正比,用于后端服务器性能不均的情况。</span>\n        <span class=\"token comment\"># fail_timeout：max_fails次失败后，暂停的时间,当该时间内服务器没响应,则认为服务器失效,默认10s</span>\n        <span class=\"token comment\"># max_fails：允许连接失败次数,默认为1</span>\n        <span class=\"token comment\"># 这2个参数一起配合,来控制nginx怎样认为upstream中的某个server是失效的,当在fail_timeout的时间内,某个server连接失败了max_fails次,则nginx会认为该server不工作了。同时,在接下来的fail_timeout时间内,nginx不再将请求分发给失效的server。</span>\n        <span class=\"token comment\"># down 表示当前的server暂时不参与负载</span>\n        <span class=\"token comment\"># backup 备用服务器,其它所有的非backup机器down或者忙的时候，请求backup机器，所以这台机器压力会最轻</span>\n        server <span class=\"token number\">127.0</span>.0.1:8080 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span>2s <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        server <span class=\"token number\">127.0</span>.0.1:8080 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> backup<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">#按后端服务器的响应时间来分配请求,响应时间短的优先分配(第三方插件实现)</span>\n        fair<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 与ip_hash类似，但是按照访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下(第三方插件实现)</span>\n        <span class=\"token builtin class-name\">hash</span> <span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span>\n        hash_method crc32<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    upstream wypt3 <span class=\"token punctuation\">&#123;</span>\n        server <span class=\"token number\">127.0</span>.0.1:9090 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span>2s <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        server <span class=\"token number\">127.0</span>.0.1:9090 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> down<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n   \n\n    <span class=\"token comment\"># server:用于进行服务器访问信息的配置</span>\n    server <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># 单连接请求上限次数。</span>\n        keepalive_requests <span class=\"token number\">120</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 配置监听端口</span>\n        listen  <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        server_name  <span class=\"token number\">192.168</span>.7.135<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">#index  index.html index.html;</span>\n\n        charset  utf8<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">#access_log  logs/host.access.log  main;</span>\n        \n        location / <span class=\"token punctuation\">&#123;</span>\n            root html<span class=\"token punctuation\">;</span>\n            index  index.html index.htm<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 限制ip访问,与上面的limit_req_zone配置联动</span>\n            <span class=\"token comment\"># 限制每ip每秒不超过1个请求,漏桶数burst为5,也就是队列．</span>\n            <span class=\"token comment\"># nodelay,如果不设置该选项,严格使用平均速率限制请求数,超过的请求被延时处理．</span>\n            <span class=\"token comment\"># brust这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。举个栗子：设置rate=20r/s每秒请求数为２０个,漏桶数burst为5个,如果第1秒、2,3,4秒请求为19个,第5秒的请求为25个是被允许的,可以理解为20+5,但是如果你第1秒就25个请求,第2秒超过20的请求返回503错误,如果区域存储空间不足,服务器将返回503（服务临时不可用）错误,速率在每秒请求中指定（r/s）。如果需要每秒少于一个请求的速率,则以每分钟的请求（r/m）指定。</span>\n            <span class=\"token comment\"># zone=one 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。</span>\n            limit_req <span class=\"token assign-left variable\">zone</span><span class=\"token operator\">=</span>one <span class=\"token assign-left variable\">burst</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> nodelay<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 下面配置可以限制特定UA（比如搜索引擎）的访问：具体可以搜索nginx限流文章</span>\n            <span class=\"token comment\"># limit_req_zone  $anti_spider  zone=one:10m   rate=10r/s;  上面配置</span>\n            <span class=\"token comment\"># limit_req zone=one burst=100 nodelay;  </span>\n            <span class=\"token comment\"># if ($http_user_agent ~* \"googlebot|bingbot|Feedfetcher-Google\") &#123;</span>\n                <span class=\"token comment\"># set $anti_spider $http_user_agent;  </span>\n            <span class=\"token comment\"># &#125;</span>\n\n　　　　　　　\n            <span class=\"token comment\"># response header添加响应内容,可查看请求被转发到哪台服务器</span>\n            add_header upstreamIP <span class=\"token variable\">$upstream_addr</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># response header添加响应内容,可查看状态码</span>\n　　　　　　  add_header upstreamCode <span class=\"token variable\">$upstream_status</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 允许客户端请求的最大单文件字节数</span>\n            client_max_body_size 10m<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 缓冲区代理缓冲用户端请求的最大字节数</span>\n            client_body_buffer_size 128k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 后面加'/'和不加'/'的区别,比如我们现在客户端请求 http://ip/gsipV3/xxx,当location块使用了'/'作为uri变量的值来匹配的,加不加'/'没有区别,当匹配location /gsipV3/时,如果不加'/',那么它会指向内部服务器的地址为：http://wypt3/gsipV3/xxx,如果加'/'的话，那么它会指向内部服务器的地址为：http://wypt3/xxx</span>\n            proxy_pass   http://wypt3<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 启用proxy cache,指定key_zone;</span>\n            proxy_cache  my-cache<span class=\"token punctuation\">;</span>\n            proxy_cache_valid  <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n            proxy_redirect  off<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># proxy_set_header 重新设置往服务器发送的请求头</span>\n            proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># $remote_addr 获取到上一级代理的IP</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\"># 后端的Web服务器可以通过request.getAttribute(\"X-Forwarded-For\")获取用户真实IP,$proxy_add_x_forwarded_for 获取到结果例如：(223.104.6.125, 10.10.10.45),第一个是用户的真实IP,第二个是一级代理的IP,依此类推。</span>\n            proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 如果客户端发过来的请求头中没有HOST这个字段时建议使用$host 这表示请求中的server name</span>\n            proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\"># nginx反向代理连接超时时间</span>\n            proxy_connect_timeout  <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 后端服务器数据回传时间,就是在规定时间之内后端服务器必须传完所有的数据(代理发送超时)</span>\n            proxy_send_timeout <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 连接成功后等候后端服务器响应时间(也可以说是后端服务器处理请求的时间)</span>\n            proxy_read_timeout  <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n\n            proxy_buffering  on<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\n            proxy_buffer_size  4k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># proxy_buffers缓冲区,网页平均在32k以下的设置</span>\n            proxy_buffers <span class=\"token number\">4</span> 32k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 高负荷下缓冲大小（proxy_buffers*2）</span>\n            proxy_busy_buffers_size 64k<span class=\"token punctuation\">;</span>\n            proxy_temp_file_write_size 64k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~* ^/gsipV3/ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://wypt3<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~* gsipV3$ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://wypt3<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token comment\"># nginx代理两个tomcat（两个项目）,不带项目名访问9090端口,带项目名访问8080端口,并且访问路径(/gsipV3)需要和proxy_pass代理的项目名一致,因为只有url中带有/gsipV3才会代理到这个模块,否则默认转到location /&#123;&#125;模块</span>\n        location /gsipV3/ <span class=\"token punctuation\">&#123;</span>\n            root html<span class=\"token punctuation\">;</span>\n            index  index.html index.htm<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#response header添加响应内容,可查看请求被转发到哪台服务器</span>\n            add_header proxyIP <span class=\"token variable\">$upstream_addr</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">#response header添加响应内容,可查看状态码</span>\n　　　　　　  add_header proxyCode <span class=\"token variable\">$upstream_status</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\"># 要加后面的'/',不加的话最终路径会变成http://wypt2/gsipV3/gsipV3</span>\n            proxy_pass   http://wypt2/gsipV3/<span class=\"token punctuation\">;</span>\n\n            proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n            proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#如果客户端发过来的请求头中没有HOST这个字段时建议使用$host 这表示请求中的server name</span>\n            proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span> \n                      \n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 解决/usr/local/nginx/html/favicon.ico\" failed (2: No such file or directory)报错问题</span>\n        location /favicon.ico <span class=\"token punctuation\">&#123;</span>\n            log_not_found off<span class=\"token punctuation\">;</span>\n            access_log off<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 所有的jsp页面均由tomcat处理</span>\n        location ~ <span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>jsp<span class=\"token operator\">|</span>jspx<span class=\"token operator\">|</span>dp<span class=\"token punctuation\">)</span>?$\n        <span class=\"token punctuation\">&#123;</span>\n            proxy_set_header Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            proxy_pass http://zh<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 假如请求包括svgs,并且以.svg结尾时（~*不区分大小写,~区分大小写）</span>\n        location ~* .*/svgs/.*<span class=\"token punctuation\">\\</span>.svg$ <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\"># 假如$request_uri不以gsipV3开头时（不区分大小写）</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> <span class=\"token operator\">!</span>~* ^/gsipV3/ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://10.37.169.201:805/gsipV3<span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\"># 假如$request_uri以gsipV3开头时（不区分大小写）</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~* ^/gsipV3/ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://10.37.169.201:805<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        location ~ .*<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>bmp<span class=\"token operator\">|</span>swf<span class=\"token operator\">|</span>js<span class=\"token operator\">|</span>css<span class=\"token punctuation\">)</span>$\n        <span class=\"token punctuation\">&#123;</span>\n            root /usr/local/tomcat/tomcat-80/webapps/ifm<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>-f <span class=\"token variable\">$request_filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                expires 1d<span class=\"token punctuation\">;</span>\n                <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># fastdfs+nginx配置</span>\n        location /group1/M00/ <span class=\"token punctuation\">&#123;</span>\n           root  /home/fdfs_storage/data<span class=\"token punctuation\">;</span>\n           \n           <span class=\"token comment\"># 安装ngx_fastdfs_module模块后引入</span>\n           ngx_fastdfs_module<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 前端项目部署(例如vue项目打包成dist文件夹，使用nginx部署)使用此配置</span>\n        <span class=\"token comment\"># location / &#123;</span>\n        location /images/ <span class=\"token punctuation\">&#123;</span>\n            root /opt/html/<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\"># 依次寻找,找到即返回</span>\n            index index.html index.htm<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 比如请求127.0.0.1/images/test.gif 会依次查找 1.文件/opt/html/images/test.gif 2.文件夹 /opt/html/images/test.gif/下的index文件 3.请求127.0.0.1/index.html</span>\n            <span class=\"token comment\"># try_files 如果不写上$uri/当直接访问一个目录路径时,并不会去匹配目录下的索引页即访问127.0.0.1/images/不会去访问127.0.0.1/images/index.html</span>\n            try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \n\n        <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n        error_page   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html<span class=\"token punctuation\">;</span>\n        location <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">&#123;</span>\n            root   html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    root           html;</span>\n        <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"token comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"token comment\">#    include        fastcgi_params;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span>\n        <span class=\"token comment\"># concurs with nginx's one</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ /\\.ht &#123;</span>\n        <span class=\"token comment\">#    deny  all;</span>\n        <span class=\"token comment\">#&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       8000;</span>\n    <span class=\"token comment\">#    listen       somename:8080;</span>\n    <span class=\"token comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n\n    <span class=\"token comment\"># HTTPS server</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       443 ssl;</span>\n    <span class=\"token comment\">#    server_name  localhost;</span>\n\n    <span class=\"token comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"token comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"token comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"token comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"token comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"token comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h4><ul>\n<li><a href=\"https://github.com/dunwu/nginx-tutorial\">这是一个Nginx极简教程，目的在于帮助新手快速入门Nginx。</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/5Q_VQoQY6kJiMwMHHDIijA\">就是要让你搞懂Nginx，这篇就够了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/e7r2Jt1DlF_4HpZU_IKZkQ\">Nginx为什么快到根本停不下来？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&amp;mid=2247490879&amp;idx=1&amp;sn=bd93bc46cdfb7919b9a304c176927dd8&amp;source=41#wechat_redirect\">手把手教你在CentOS7上搭建Nginx</a></li>\n<li><a href=\"https://www.cnblogs.com/sz-jack/p/5206159.html\">nginx实现动态分离,解决css和js等图片加载问题</a></li>\n<li><a href=\"https://blog.csdn.net/white1114579650/article/details/120151335\">nginx反向代理tomcat，js，css静态资源不加载问题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/v6j2HStMHBDlak6UGTF0Hw\">彻底搞懂Nginx的五大应用场景</a></li>\n<li><a href=\"https://blog.51cto.com/ting2junshui/2066268\">nginx配置参数</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/clSjaLJSht5J8woIaiH4gA\">Nginx轻松搞定跨域问题！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YXJ1jcr7XLKTbzf9kyjiEg\">如何使用Nginx优雅地限流？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/R6GajrvNphXfgKWDsFWzFw\">Nginx如何限流？</a></li>\n<li><a href=\"https://nginxconfig.io/\">nginxconfig.io</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/pPV5s3uO1sjPTAhz_BDcJg\">为什么Nginx比Apache更牛叉？</a></li>\n</ul>\n","more":"<h4 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h4><h5 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 下载nginx:</span>\n<span class=\"token function\">wget</span> http://nginx.org/download/nginx-1.8.1.tar.gz\n<span class=\"token comment\"># 下载openssl:</span>\n<span class=\"token function\">wget</span> https://www.openssl.org/source/openssl-fips-2.0.16.tar.gz\n<span class=\"token comment\"># 下载zlib:</span>\n<span class=\"token function\">wget</span> http://www.zlib.net/zlib-1.2.11.tar.gz\n<span class=\"token comment\"># 下载pcre:</span>\n<span class=\"token function\">wget</span> ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\n<span class=\"token comment\"># 如果没有安装c++编译环境，还得安装，通过```yum install gcc-c++```完成安装</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># openssl：</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token function\">tar</span> zxvf openssl-fips-2.0.16.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> openssl-fips-2.0.16\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> ./config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># pcre:</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token function\">tar</span> zxvf pcre-8.39.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> pcre-8.39\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>  ./configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># zlib:</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>tar zxvf zlib-1.2.11.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> zlib-1.2.11\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>  ./configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># 最后安装nginx</span>\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>tar zxvf nginx-1.8.1.tar.gz\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">cd</span> nginx-1.8.1\n<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span>  ./configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/usr/local/nginx/sbin/nginx\n/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> stop <span class=\"token comment\"># 立即停止nginx，不保存相关信息</span>\n/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> quit  <span class=\"token comment\"># 正常退出nginx，保存相关信息</span>\n/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> reload <span class=\"token comment\"># 重启</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.cnblogs.com/lovexinyi8/p/5845017.html\">Linux安装Nginx详细图解教程</a></p>\n<h5 id=\"将nginx做成系统服务并且开机自启动\"><a href=\"#将nginx做成系统服务并且开机自启动\" class=\"headerlink\" title=\"将nginx做成系统服务并且开机自启动\"></a>将nginx做成系统服务并且开机自启动</h5><p>由于是源码安装，需要手动创建nginx.service服务</p>\n<blockquote>\n<p>不止nginx，其他源码安装的想要实现开机自启动就在&#x2F;lib&#x2F;systemd&#x2F;system目录下自定义服务即可</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /lib/systemd/system/nginx.service\n<span class=\"token comment\"># 编辑内容</span>\n<span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>nginx.service\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target\n\n<span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>forking\n<span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx\n<span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> reload\n<span class=\"token assign-left variable\">ExecStop</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> quit\n<span class=\"token assign-left variable\">PrivateTmp</span><span class=\"token operator\">=</span>true\n\n<span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target\n\n<span class=\"token comment\"># 参数介绍：</span>\n<span class=\"token comment\"># [Unit]:服务的说明</span>\n<span class=\"token comment\"># Description:描述服务</span>\n<span class=\"token comment\"># After:描述服务类别</span>\n<span class=\"token comment\"># [Service]服务运行参数的设置</span>\n<span class=\"token comment\"># Type=forking是后台运行的形式</span>\n<span class=\"token comment\"># ExecStart为服务的具体运行命令</span>\n<span class=\"token comment\"># ExecReload为重启命令</span>\n<span class=\"token comment\"># ExecStop为停止命令</span>\n<span class=\"token comment\"># PrivateTmp=True表示给服务分配独立的临时空间</span>\n<span class=\"token comment\"># 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span>\n<span class=\"token comment\"># [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>:wq! 保存退出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置开机启动</span>\nsystemctl <span class=\"token builtin class-name\">enable</span> nginx.service\n<span class=\"token comment\"># 其他命令</span>\n<span class=\"token comment\"># 启动nginx服务</span>\nsystemctl start nginx.service　\n<span class=\"token comment\"># 停止开机自启动</span>\nsystemctl disable nginx.service\n<span class=\"token comment\"># 查看服务当前状态</span>\nsystemctl status nginx.service\n<span class=\"token comment\"># 重新启动服务</span>\nsystemctl restart nginx.service　\n<span class=\"token comment\"># 查看所有已启动的服务</span>\nsystemctl list-units <span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Nginx知识点\"><a href=\"#Nginx知识点\" class=\"headerlink\" title=\"Nginx知识点\"></a>Nginx知识点</h4><h5 id=\"nginx判断\"><a href=\"#nginx判断\" class=\"headerlink\" title=\"nginx判断\"></a>nginx判断</h5><p>1、正则表达式匹配：</p>\n<p>&#x3D;&#x3D;:等值比较;<br>~：与指定正则表达式模式匹配时返回“真”，判断匹配与否时区分字符大小写；<br>~*：与指定正则表达式模式匹配时返回“真”，判断匹配与否时不区分字符大小写；<br>!~：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时区分字符大小写；<br>!~*：与指定正则表达式模式不匹配时返回“真”，判断匹配与否时不区分字符大小写；</p>\n<p>2、文件及目录匹配判断：</p>\n<p>-f, !-f：判断指定的路径是否为存在且为文件；<br>-d, !-d：判断指定的路径是否为存在且为目录；<br>-e, !-e：判断指定的路径是否存在，文件或目录均可；<br>-x, !-x：判断指定路径的文件是否存在且可执行；</p>\n<h5 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h5><p>location [&#x3D;|<del>|</del>*|^~] &#x2F;uri&#x2F; { … }</p>\n<p>&#x3D; 表示精确匹配,这个优先级也是最高的<br>^~ 表示uri以某个常规字符串开头，理解为匹配url路径即可。nginx不对url做编码，因此请求为&#x2F;static&#x2F;20%&#x2F;aa，可以被规则^~ &#x2F;static&#x2F; &#x2F;aa匹配到（注意是空格）。<br>~ 表示区分大小写的正则匹配<br>~* 表示不区分大小写的正则匹配(和上面的唯一区别就是大小写)<br>!~和!~*分别为区分大小写不匹配及不区分大小写不匹配的正则<br>&#x2F; 通用匹配，任何请求都会匹配到，默认匹配.</p>\n<p>下面讲讲这些语法的一些规则和优先级</p>\n<p>多个location配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）：<br>优先级 &#x3D; ^~ &#x2F;<br>首先匹配&#x3D;，其次匹配^~,其次是按文件中顺序的正则匹配，最后是交给&#x2F;通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。例子，有如下匹配规则：</p>\n<h5 id=\"ngx-http-core-module模块的变量\"><a href=\"#ngx-http-core-module模块的变量\" class=\"headerlink\" title=\"ngx_http_core_module模块的变量\"></a>ngx_http_core_module模块的变量</h5><p>$arg_PARAMETER HTTP请求中某个参数的值，如&#x2F;index.php?site&#x3D;<a href=\"http://www.domain.com,可以用$arg_site取得www.domain.com这个值./\">www.domain.com，可以用$arg_site取得www.domain.com这个值。</a></p>\n<p>$args HTTP请求中的完整参数。例如，在请求&#x2F;index.php?width&#x3D;400&amp;height&#x3D;200中，$args表示字符串width&#x3D;400&amp;height&#x3D;200.</p>\n<p>$binary_remote_addr 二进制格式的客户端地址。例如：\\x0A\\xE0B\\x0E</p>\n<p>$body_bytes_sent 表示在向客户端发送的http响应中，包体部分的字节数</p>\n<p>$content_length 表示客户端请求头部中的Content-Length字段</p>\n<p>$content_type 表示客户端请求头部中的Content-Type字段</p>\n<p>$cookie_COOKIE 表示在客户端请求头部中的cookie字段</p>\n<p>$document_root 表示当前请求所使用的root配置项的值</p>\n<p>$uri 表示当前请求的URI，不带任何参数</p>\n<p>$document_uri与$uri含义相同</p>\n<p>$request_uri表示客户端发来的原始请求URI，带完整的参数。$uri和$document_uri未必是用户的原始请求，在内部重定向后可能是重定向后的URI，而$request_uri永远不会改变，始终是客户端的原始URI.</p>\n<p>$host 表示客户端请求头部中的Host字段。如果Host字段不存在，则以实际处理的server（虚拟主机）名称代替。如果Host字段中带有端口，如IP:PORT，那么$host是去掉端口的，它的值为IP。$host是全小写的。这些特性与http_HEADER中的http_host不同，http_host只取出Host头部对应的值。</p>\n<p>$hostname 表示Nginx所在机器的名称，与gethostbyname调用返回的值相同</p>\n<p>$http_HEADER 表示当前HTTP请求中相应头部的值。HEADER名称全小写。例如，示请求中Host头部对应的值用$http_host表</p>\n<p>$sent_http_HEADER 表示返回客户端的HTTP响应中相应头部的值。HEADER名称全小写。例如，用$sent_http_content_type表示响应中Content-Type头部对应的值</p>\n<p>$is_args 表示请求中的URI是否带参数，如果带参数，$is_args值为?，如果不带参数，则是空字符串</p>\n<p>$limit_rate 表示当前连接的限速是多少，0表示无限速</p>\n<p>$nginx_version 表示当前Nginx的版本号</p>\n<p>$query_string 请求URI中的参数，与$args相同，然而$query_string是只读的不会改变</p>\n<p>$remote_addr 表示客户端的地址</p>\n<p>$remote_port 表示客户端连接使用的端口</p>\n<p>$remote_user 表示使用Auth Basic Module时定义的用户名</p>\n<p>$request_filename 表示用户请求中的URI经过root或alias转换后的文件路径</p>\n<p>$request_body 表示HTTP请求中的包体，该参数只在proxy_pass或fastcgi_pass中有意义</p>\n<p>$request_body_file 表示HTTP请求中的包体存储的临时文件名</p>\n<p>$request_completion 当请求已经全部完成时，其值为“ok”。若没有完成，就要返回客户端，则其值为空字符串；或者在断点续传等情况下使用HTTP range访问的并不是文件的最后一块，那么其值也是空字符串。</p>\n<p>$request_method 表示HTTP请求的方法名，如GET、PUT、POST等</p>\n<p>$scheme 表示HTTP scheme，如在请求<a href=\"https://nginx.com/%E4%B8%AD%E8%A1%A8%E7%A4%BAhttps\">https://nginx.com/中表示https</a></p>\n<p>$server_addr 表示服务器地址</p>\n<p>$server_name 表示服务器名称</p>\n<p>$server_port 表示服务器端口</p>\n<p>$server_protocol 表示服务器向客户端发送响应的协议，如HTTP&#x2F;1.1或HTTP&#x2F;1.0</p>\n<h5 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h5><p>$remote_addr,$http_x_forwarded_for记录客户端IP地址</p>\n<p>$remote_user 记录客户端用户名称</p>\n<p>$request 记录请求的URL和HTTP协议</p>\n<p>$status 记录请求状态</p>\n<p>$body_bytes_sent 发送给客户端的字节数，不包括响应头的大小；该变量与Apache模块mod_log_config里的“%B”参数兼容。</p>\n<p>$bytes_sent 发送给客户端的总字节数。</p>\n<p>$connection 连接的序列号。</p>\n<p>$connection_requests 当前通过一个连接获得的请求数量。</p>\n<p>$msec 日志写入时间。单位为秒，精度是毫秒。</p>\n<p>$pipe 如果请求是通过HTTP流水线(pipelined)发送，pipe值为“p”，否则为“.”。</p>\n<p>$http_referer 记录从哪个页面链接访问过来的</p>\n<p>$http_user_agent 记录客户端浏览器相关信息</p>\n<p>$request_length 请求的长度（包括请求行，请求头和请求正文）。</p>\n<p>$request_time 请求处理时间，单位为秒，精度毫秒；从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</p>\n<p>$time_iso8601 ISO8601标准格式下的本地时间。</p>\n<p>$time_local 通用日志格式下的本地时间。</p>\n<h5 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h5><p>语法：if (condition) { … }</p>\n<p>默认值：none</p>\n<p>使用字段：server, location</p>\n<p>注意：尽量考虑使用trp_files代替。</p>\n<p>判断的条件可以有以下值：</p>\n<ol>\n<li>一个变量的名称：空字符传”“或者一些“0”开始的字符串为false。</li>\n<li>字符串比较：使用&#x3D;或!&#x3D;运算符</li>\n<li>正则表达式匹配：使用~(区分大小写)和~*(不区分大小写)，取反运算!~和!~*。</li>\n<li>文件是否存在：使用-f和!-f操作符</li>\n<li>目录是否存在：使用-d和!-d操作符</li>\n<li>文件、目录、符号链接是否存在：使用-e和!-e操作符</li>\n<li>文件是否可执行：使用-x和!-x操作符</li>\n</ol>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>语法：return code</p>\n<p>默认值：none</p>\n<p>使用字段：server,location,if</p>\n<p>nginx隐藏版本号</p>\n<p>nginx.conf中修改http zone中的变量值： server_tokens off;</p>\n<p>php-fpm fastcgi.conf中的变量值： fastcgi_param SERVER_SOFTWARE nginx;</p>\n<h5 id=\"nginx正向代理\"><a href=\"#nginx正向代理\" class=\"headerlink\" title=\"nginx正向代理\"></a>nginx正向代理</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nserver &#123;\n\nlisten 8090;\n\nlocation &#x2F; &#123;\n\nresolver 218.85.157.99 218.85.152.99;\n\nresolver_timeout 30s;\n\nproxy_pass http:&#x2F;&#x2F;$host$request_uri;\n\n&#125;\n\naccess_log &#x2F;data&#x2F;httplogs&#x2F;proxy-$host-aceess.log;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>resolver指令</p>\n<p>语法: resolver address … [valid&#x3D;time];</p>\n<p>默认值: —</p>\n<p>配置段: http, server, location</p>\n<p>配置DNS服务器IP地址。可以指定多个，以轮询方式请求。</p>\n<p>nginx会缓存解析的结果。默认情况下，缓存时间是名字解析响应中的TTL字段的值，可以通过valid参数更改。</p>\n<h4 id=\"nginx-conf\"><a href=\"#nginx-conf\" class=\"headerlink\" title=\"nginx.conf\"></a>nginx.conf</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 指定Nginx服务的用户和用户组</span>\n<span class=\"token comment\"># user  nobody nobody;</span>\n\n<span class=\"token comment\"># 工作进程：数目。根据硬件调整,通常等于CPU数量或者2倍于CPU(允许生成的进程数)</span>\nworker_processes  <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nworker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 制定日志路径、级别。这个设置可以放入全局块,http块,server块.级别以此为:debug|info|notice|warn|error|crit|alert|emerg</span>\nerror_log  /usr/local/logs/error.log  notice<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># pid(进程标识符)指定nginx进程运行文件存放位置</span>\npid  /usr/local/logs/nginx.pid<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 用于nginx工作模式的配置</span>\nevents <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 设置网路连接序列化,防止惊群现象发生,默认为on</span>\n    accept_mutex  off<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 设置一个进程是否同时接受多个网络连接,默认为off</span>\n    multi_accept  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 事件驱动模型,select|poll|kqueue|epoll|resig|/dev/poll|eventport</span>\n    use  epoll<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 指定进程可以打开的最大描述符：数目。</span>\n    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 用于进行http协议信息的一些配置</span>\nhttp <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 设定mime类型,类型由mime.type文件定义</span>\n    include  mime.types<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 默认文件类型,默认为text/plain</span>\n    default_type  application/octet-stream<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 日志格式</span>\n    log_format  myformat  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n                          <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span>\n                          <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># access_log  logs/access.log  myformat;  #combined为日志格式的默认值</span>\n\n    <span class=\"token comment\"># 取消访问日志</span>\n    access_log  off<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 设置DNS解析超时时间</span>\n    resolver_timeout  60s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># tcp连接关闭前的延时时间</span>\n    lingering_timeout  5s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 允许sendfile方式传输文件,默认为off,可以在http块,server块,location块,将文件的回写过程交给数据缓冲区完成,提升性能</span>\n    sendfile  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 每个进程每次调用传输数量不能大于设定的值,默认为0,即不设上限。</span>\n    sendfile_max_chunk  100k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 每个TCP连接最多可以保持多长时间,默认为75s,可以在http,server,location块。</span>\n    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 让nginx在一个数据包中发送所有的头文件,而不是一个一个单独发</span>\n    tcp_nopush  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 启动TCP_NODELAY,禁用Nagle算法,允许小包的发送</span>\n    tcp_nodelay  on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 请求头设置缓冲区</span>\n    client_header_buffer_size  4k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 指定客户端与服务端建立连接后发送request body的超时时间,如果客户端在指定时间内没有发送任何内容,返回408(Request Timed Out)</span>\n    client_body_timeout  60s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 客户端向服务端发送一个完整的request header的超时时间。如果客户端在指定时间内没有发送一个完整的request header,返回408()</span>\n    client_header_timeout  60s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 上传文件最大限制20兆</span>\n    client_max_body_size  20m<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 缓冲区不足按照这个分配</span>\n    large_client_header_buffers <span class=\"token number\">4</span> 8k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># max指定缓存数量,inactive是指经过多长时间文件没被请求后删除缓存</span>\n    open_file_cache  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token number\">102400</span> <span class=\"token assign-left variable\">inactive</span><span class=\"token operator\">=</span>20s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 多长时间检查一次缓存的有效信息</span>\n    open_file_cache_valid  30s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 指令中的inactive参数时间内文件的最少使用次数,如果超过这个数字,文件更改信息一直是在缓存中打开的</span>\n    open_file_cache_min_uses  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># FastCGI相关参数是为了改善网站的性能:减少资源占用,提高访问速度。</span>\n    fastcgi_connect_timeout <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    fastcgi_send_timeout <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    fastcgi_read_timeout <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    fastcgi_buffer_size 64k<span class=\"token punctuation\">;</span>\n    fastcgi_buffers <span class=\"token number\">8</span> 128k<span class=\"token punctuation\">;</span>\n    fastcgi_busy_buffers_size 128k<span class=\"token punctuation\">;</span>\n    fastcgi_temp_file_write_size 128k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 限制ip访问(限流)</span>\n    <span class=\"token comment\"># 定义一个名为one的内存空间,大小是10M,以$binary_remote_addr($binary_remote_addr 表示通过remote_addr这个标识来做限制,“binary_”的目的是缩写内存占用量,是限制同一客户端ip地址)为key,限制平均每秒的请求为20个,可以有比如rate=30r/m的</span>\n    <span class=\"token comment\"># 1M能存储16000个状态,rete的值必须为整数,rate=20r/s表示允许相同标识的客户端的访问频次</span>\n    <span class=\"token comment\"># 在Server块中通过limit_req使用</span>\n    limit_req_zone <span class=\"token variable\">$binary_remote_addr</span> <span class=\"token assign-left variable\">zone</span><span class=\"token operator\">=</span>one:10m <span class=\"token assign-left variable\">rate</span><span class=\"token operator\">=</span>20r/s<span class=\"token punctuation\">;</span>\n\n    proxy_buffering  on<span class=\"token punctuation\">;</span>\n    proxy_cache_valid  any  10m<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># proxy_cache_path:本地路径,缓存文件存放地址；</span>\n    <span class=\"token comment\"># levels:默认所有缓存文件都放在同一个/path/to/cache下,从而影响缓存的性能,大部分场景推荐使用2级目录来存储缓存文件；</span>\n    <span class=\"token comment\"># key_zone:在共享内存中设置一块存储区域来存放缓存的key和metadata(类似使用次数),这样nginx可以快速判断一个request是否命中或者未命#中缓存,1m可以存储8000个key,10m可以存储80000个key</span>\n    <span class=\"token comment\"># max_size:最大cache空间,如果不指定,会使用掉所有disk space,当达到配额后,会删除最少使用的cache文件</span>\n    <span class=\"token comment\"># inactive:未被访问文件在缓存中保留时间,本配置中如果60分钟未被访问则不论状态是否为expired,缓存控制程序会删掉文件,默认为10分钟,需要注意的是,inactive和expired配置项的含义是不同的,expired只是缓存过期,但不会被删除,inactive是删除指定时间内未被访问的缓存文件</span>\n    <span class=\"token comment\"># use_temp_path如果为off,则nginx会将缓存文件直接写入指定的cache文件中,而不是使用temp_path存储,official建议为off,避免文件在不同文件系统中不必要的拷贝</span>\n    proxy_cache_path  /path/to/cache <span class=\"token assign-left variable\">levels</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>:2 <span class=\"token assign-left variable\">keys_zone</span><span class=\"token operator\">=</span>my_cache:10m <span class=\"token assign-left variable\">max_size</span><span class=\"token operator\">=</span>10g <span class=\"token assign-left variable\">inactive</span><span class=\"token operator\">=</span>60m <span class=\"token assign-left variable\">use_temp_path</span><span class=\"token operator\">=</span>off<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 为存储承载从代理服务器接收到的数据的临时文件定义目录</span>\n    proxy_temp_path /data/temp<span class=\"token punctuation\">;</span>\n    \n    proxy_buffer_size  4k<span class=\"token punctuation\">;</span>\n    proxy_buffers <span class=\"token number\">100</span>  8k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 采用gzip压缩的形式发送数据。这将会减少我们发送的数据量</span>\n    <span class=\"token function\">gzip</span>  on<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 最小压缩文件大小</span>\n    gzip_min_length  1k<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩缓冲区</span>\n    gzip_buffers <span class=\"token number\">4</span> 16k<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩版本(默认1.1,前端如果是squid2.5请使用1.0)</span>\n    gzip_http_version <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩等级</span>\n    gzip_comp_level <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 压缩类型,默认就已经包含text/html</span>\n    gzip_types text/plain application/x-javascript text/css application/xml<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 给CDN和代理服务器使用,针对相同url,可以根据头信息返回压缩和非压缩副本</span>\n    gzip_vary on<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 配置段: http,server,location 服务端向客户端传输数据的超时时间。</span>\n    send_timeout 30s<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 默认off,nginx默认request的header的中包含'_'时，会自动忽略掉。</span>\n    underscores_in_headers on<span class=\"token punctuation\">;</span>\n\n    upstream wypt2 <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># least_conn,ip_hash,weight,fair等根据实际情况选择一个即可</span>\n\n        <span class=\"token comment\"># 把请求分配到连接数最少的server</span>\n        least_conn<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session的问题。</span>\n        ip_hash<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># weight=1 指定轮询几率,weight和访问比率成正比,用于后端服务器性能不均的情况。</span>\n        <span class=\"token comment\"># fail_timeout：max_fails次失败后，暂停的时间,当该时间内服务器没响应,则认为服务器失效,默认10s</span>\n        <span class=\"token comment\"># max_fails：允许连接失败次数,默认为1</span>\n        <span class=\"token comment\"># 这2个参数一起配合,来控制nginx怎样认为upstream中的某个server是失效的,当在fail_timeout的时间内,某个server连接失败了max_fails次,则nginx会认为该server不工作了。同时,在接下来的fail_timeout时间内,nginx不再将请求分发给失效的server。</span>\n        <span class=\"token comment\"># down 表示当前的server暂时不参与负载</span>\n        <span class=\"token comment\"># backup 备用服务器,其它所有的非backup机器down或者忙的时候，请求backup机器，所以这台机器压力会最轻</span>\n        server <span class=\"token number\">127.0</span>.0.1:8080 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span>2s <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        server <span class=\"token number\">127.0</span>.0.1:8080 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> backup<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">#按后端服务器的响应时间来分配请求,响应时间短的优先分配(第三方插件实现)</span>\n        fair<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 与ip_hash类似，但是按照访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下(第三方插件实现)</span>\n        <span class=\"token builtin class-name\">hash</span> <span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span>\n        hash_method crc32<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    upstream wypt3 <span class=\"token punctuation\">&#123;</span>\n        server <span class=\"token number\">127.0</span>.0.1:9090 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">fail_timeout</span><span class=\"token operator\">=</span>2s <span class=\"token assign-left variable\">max_fails</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        server <span class=\"token number\">127.0</span>.0.1:9090 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> down<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n   \n\n    <span class=\"token comment\"># server:用于进行服务器访问信息的配置</span>\n    server <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># 单连接请求上限次数。</span>\n        keepalive_requests <span class=\"token number\">120</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 配置监听端口</span>\n        listen  <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        server_name  <span class=\"token number\">192.168</span>.7.135<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">#index  index.html index.html;</span>\n\n        charset  utf8<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">#access_log  logs/host.access.log  main;</span>\n        \n        location / <span class=\"token punctuation\">&#123;</span>\n            root html<span class=\"token punctuation\">;</span>\n            index  index.html index.htm<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 限制ip访问,与上面的limit_req_zone配置联动</span>\n            <span class=\"token comment\"># 限制每ip每秒不超过1个请求,漏桶数burst为5,也就是队列．</span>\n            <span class=\"token comment\"># nodelay,如果不设置该选项,严格使用平均速率限制请求数,超过的请求被延时处理．</span>\n            <span class=\"token comment\"># brust这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。举个栗子：设置rate=20r/s每秒请求数为２０个,漏桶数burst为5个,如果第1秒、2,3,4秒请求为19个,第5秒的请求为25个是被允许的,可以理解为20+5,但是如果你第1秒就25个请求,第2秒超过20的请求返回503错误,如果区域存储空间不足,服务器将返回503（服务临时不可用）错误,速率在每秒请求中指定（r/s）。如果需要每秒少于一个请求的速率,则以每分钟的请求（r/m）指定。</span>\n            <span class=\"token comment\"># zone=one 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。</span>\n            limit_req <span class=\"token assign-left variable\">zone</span><span class=\"token operator\">=</span>one <span class=\"token assign-left variable\">burst</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> nodelay<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 下面配置可以限制特定UA（比如搜索引擎）的访问：具体可以搜索nginx限流文章</span>\n            <span class=\"token comment\"># limit_req_zone  $anti_spider  zone=one:10m   rate=10r/s;  上面配置</span>\n            <span class=\"token comment\"># limit_req zone=one burst=100 nodelay;  </span>\n            <span class=\"token comment\"># if ($http_user_agent ~* \"googlebot|bingbot|Feedfetcher-Google\") &#123;</span>\n                <span class=\"token comment\"># set $anti_spider $http_user_agent;  </span>\n            <span class=\"token comment\"># &#125;</span>\n\n　　　　　　　\n            <span class=\"token comment\"># response header添加响应内容,可查看请求被转发到哪台服务器</span>\n            add_header upstreamIP <span class=\"token variable\">$upstream_addr</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># response header添加响应内容,可查看状态码</span>\n　　　　　　  add_header upstreamCode <span class=\"token variable\">$upstream_status</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 允许客户端请求的最大单文件字节数</span>\n            client_max_body_size 10m<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 缓冲区代理缓冲用户端请求的最大字节数</span>\n            client_body_buffer_size 128k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 后面加'/'和不加'/'的区别,比如我们现在客户端请求 http://ip/gsipV3/xxx,当location块使用了'/'作为uri变量的值来匹配的,加不加'/'没有区别,当匹配location /gsipV3/时,如果不加'/',那么它会指向内部服务器的地址为：http://wypt3/gsipV3/xxx,如果加'/'的话，那么它会指向内部服务器的地址为：http://wypt3/xxx</span>\n            proxy_pass   http://wypt3<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 启用proxy cache,指定key_zone;</span>\n            proxy_cache  my-cache<span class=\"token punctuation\">;</span>\n            proxy_cache_valid  <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n            proxy_redirect  off<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># proxy_set_header 重新设置往服务器发送的请求头</span>\n            proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># $remote_addr 获取到上一级代理的IP</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\"># 后端的Web服务器可以通过request.getAttribute(\"X-Forwarded-For\")获取用户真实IP,$proxy_add_x_forwarded_for 获取到结果例如：(223.104.6.125, 10.10.10.45),第一个是用户的真实IP,第二个是一级代理的IP,依此类推。</span>\n            proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 如果客户端发过来的请求头中没有HOST这个字段时建议使用$host 这表示请求中的server name</span>\n            proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\"># nginx反向代理连接超时时间</span>\n            proxy_connect_timeout  <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 后端服务器数据回传时间,就是在规定时间之内后端服务器必须传完所有的数据(代理发送超时)</span>\n            proxy_send_timeout <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 连接成功后等候后端服务器响应时间(也可以说是后端服务器处理请求的时间)</span>\n            proxy_read_timeout  <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n\n            proxy_buffering  on<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\n            proxy_buffer_size  4k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># proxy_buffers缓冲区,网页平均在32k以下的设置</span>\n            proxy_buffers <span class=\"token number\">4</span> 32k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 高负荷下缓冲大小（proxy_buffers*2）</span>\n            proxy_busy_buffers_size 64k<span class=\"token punctuation\">;</span>\n            proxy_temp_file_write_size 64k<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~* ^/gsipV3/ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://wypt3<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~* gsipV3$ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://wypt3<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token comment\"># nginx代理两个tomcat（两个项目）,不带项目名访问9090端口,带项目名访问8080端口,并且访问路径(/gsipV3)需要和proxy_pass代理的项目名一致,因为只有url中带有/gsipV3才会代理到这个模块,否则默认转到location /&#123;&#125;模块</span>\n        location /gsipV3/ <span class=\"token punctuation\">&#123;</span>\n            root html<span class=\"token punctuation\">;</span>\n            index  index.html index.htm<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#response header添加响应内容,可查看请求被转发到哪台服务器</span>\n            add_header proxyIP <span class=\"token variable\">$upstream_addr</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">#response header添加响应内容,可查看状态码</span>\n　　　　　　  add_header proxyCode <span class=\"token variable\">$upstream_status</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\"># 要加后面的'/',不加的话最终路径会变成http://wypt2/gsipV3/gsipV3</span>\n            proxy_pass   http://wypt2/gsipV3/<span class=\"token punctuation\">;</span>\n\n            proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n            proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#如果客户端发过来的请求头中没有HOST这个字段时建议使用$host 这表示请求中的server name</span>\n            proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span> \n                      \n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 解决/usr/local/nginx/html/favicon.ico\" failed (2: No such file or directory)报错问题</span>\n        location /favicon.ico <span class=\"token punctuation\">&#123;</span>\n            log_not_found off<span class=\"token punctuation\">;</span>\n            access_log off<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 所有的jsp页面均由tomcat处理</span>\n        location ~ <span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>jsp<span class=\"token operator\">|</span>jspx<span class=\"token operator\">|</span>dp<span class=\"token punctuation\">)</span>?$\n        <span class=\"token punctuation\">&#123;</span>\n            proxy_set_header Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            proxy_pass http://zh<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 假如请求包括svgs,并且以.svg结尾时（~*不区分大小写,~区分大小写）</span>\n        location ~* .*/svgs/.*<span class=\"token punctuation\">\\</span>.svg$ <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\"># 假如$request_uri不以gsipV3开头时（不区分大小写）</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> <span class=\"token operator\">!</span>~* ^/gsipV3/ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://10.37.169.201:805/gsipV3<span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\"># 假如$request_uri以gsipV3开头时（不区分大小写）</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~* ^/gsipV3/ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                proxy_pass http://10.37.169.201:805<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        location ~ .*<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>bmp<span class=\"token operator\">|</span>swf<span class=\"token operator\">|</span>js<span class=\"token operator\">|</span>css<span class=\"token punctuation\">)</span>$\n        <span class=\"token punctuation\">&#123;</span>\n            root /usr/local/tomcat/tomcat-80/webapps/ifm<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>-f <span class=\"token variable\">$request_filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                expires 1d<span class=\"token punctuation\">;</span>\n                <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># fastdfs+nginx配置</span>\n        location /group1/M00/ <span class=\"token punctuation\">&#123;</span>\n           root  /home/fdfs_storage/data<span class=\"token punctuation\">;</span>\n           \n           <span class=\"token comment\"># 安装ngx_fastdfs_module模块后引入</span>\n           ngx_fastdfs_module<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 前端项目部署(例如vue项目打包成dist文件夹，使用nginx部署)使用此配置</span>\n        <span class=\"token comment\"># location / &#123;</span>\n        location /images/ <span class=\"token punctuation\">&#123;</span>\n            root /opt/html/<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\"># 依次寻找,找到即返回</span>\n            index index.html index.htm<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\"># 比如请求127.0.0.1/images/test.gif 会依次查找 1.文件/opt/html/images/test.gif 2.文件夹 /opt/html/images/test.gif/下的index文件 3.请求127.0.0.1/index.html</span>\n            <span class=\"token comment\"># try_files 如果不写上$uri/当直接访问一个目录路径时,并不会去匹配目录下的索引页即访问127.0.0.1/images/不会去访问127.0.0.1/images/index.html</span>\n            try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ /index.html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \n\n        <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n        error_page   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html<span class=\"token punctuation\">;</span>\n        location <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">&#123;</span>\n            root   html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    root           html;</span>\n        <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"token comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"token comment\">#    include        fastcgi_params;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span>\n        <span class=\"token comment\"># concurs with nginx's one</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ /\\.ht &#123;</span>\n        <span class=\"token comment\">#    deny  all;</span>\n        <span class=\"token comment\">#&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       8000;</span>\n    <span class=\"token comment\">#    listen       somename:8080;</span>\n    <span class=\"token comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n\n    <span class=\"token comment\"># HTTPS server</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       443 ssl;</span>\n    <span class=\"token comment\">#    server_name  localhost;</span>\n\n    <span class=\"token comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"token comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"token comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"token comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"token comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"token comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h4><ul>\n<li><a href=\"https://github.com/dunwu/nginx-tutorial\">这是一个Nginx极简教程，目的在于帮助新手快速入门Nginx。</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/5Q_VQoQY6kJiMwMHHDIijA\">就是要让你搞懂Nginx，这篇就够了！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/e7r2Jt1DlF_4HpZU_IKZkQ\">Nginx为什么快到根本停不下来？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&amp;mid=2247490879&amp;idx=1&amp;sn=bd93bc46cdfb7919b9a304c176927dd8&amp;source=41#wechat_redirect\">手把手教你在CentOS7上搭建Nginx</a></li>\n<li><a href=\"https://www.cnblogs.com/sz-jack/p/5206159.html\">nginx实现动态分离,解决css和js等图片加载问题</a></li>\n<li><a href=\"https://blog.csdn.net/white1114579650/article/details/120151335\">nginx反向代理tomcat，js，css静态资源不加载问题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/v6j2HStMHBDlak6UGTF0Hw\">彻底搞懂Nginx的五大应用场景</a></li>\n<li><a href=\"https://blog.51cto.com/ting2junshui/2066268\">nginx配置参数</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/clSjaLJSht5J8woIaiH4gA\">Nginx轻松搞定跨域问题！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/YXJ1jcr7XLKTbzf9kyjiEg\">如何使用Nginx优雅地限流？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/R6GajrvNphXfgKWDsFWzFw\">Nginx如何限流？</a></li>\n<li><a href=\"https://nginxconfig.io/\">nginxconfig.io</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/pPV5s3uO1sjPTAhz_BDcJg\">为什么Nginx比Apache更牛叉？</a></li>\n</ul>\n","categories":[],"tags":[{"name":"安装","path":"api/tags/安装.json"}]}