{"title":"分布式ID","slug":"分布式ID","date":"2023-03-24T02:36:13.015Z","updated":"2023-05-17T06:21:59.149Z","comments":true,"path":"api/articles/分布式ID.json","excerpt":null,"covers":"https://pic1.zhimg.com/v2-a813d6ce08aea23e86f1f269a1760810_1440w.jpg","content":"<h2 id=\"分布式ID介绍\"><a href=\"#分布式ID介绍\" class=\"headerlink\" title=\"分布式ID介绍\"></a>分布式ID介绍</h2><h3 id=\"什么是ID？\"><a href=\"#什么是ID？\" class=\"headerlink\" title=\"什么是ID？\"></a>什么是ID？</h3><p>日常开发中，我们需要对系统中的各种数据使用ID唯一表示，比如用户ID对应且仅对应一个人，商品ID对应且仅对应一件商品，订单ID对应且仅对应一个订单。</p>\n<p>我们现实生活中也有各种ID，比如身份证ID对应且仅对应一个人、地址ID对应且仅对应</p>\n<p>简单来说，<strong>ID就是数据的唯一标识</strong>。</p>\n<h3 id=\"什么是分布式ID？\"><a href=\"#什么是分布式ID？\" class=\"headerlink\" title=\"什么是分布式ID？\"></a>什么是分布式ID？</h3><p>分布式ID是分布式系统下的ID。分布式ID不存在与现实生活中，属于计算机系统中的一个概念。</p>\n<p>我简单举一个分库分表的例子。</p>\n<p>我司的一个项目，使用的是单机MySQL。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机MySQL已经没办法支撑了，需要进行分库分表（推荐Sharding-JDBC）。</p>\n<p>在分库之后，数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p>\n<p>这个时候就需要生成<strong>分布式ID</strong>了。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png\" alt=\"img\"></p>\n<h3 id=\"分布式ID需要满足哪些要求\"><a href=\"#分布式ID需要满足哪些要求\" class=\"headerlink\" title=\"分布式ID需要满足哪些要求?\"></a>分布式ID需要满足哪些要求?</h3><p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-requirements.png\" alt=\"img\"></p>\n<p>分布式ID作为分布式系统中必不可少的一环，很多地方都要用到分布式ID。</p>\n<p>一个最基本的分布式ID需要满足下面这些要求：</p>\n<ul>\n<li><strong>全局唯一</strong>：ID的全局唯一性肯定是首先要满足的！</li>\n<li><strong>高性能</strong>：分布式ID的生成速度要快，对本地资源消耗要小。</li>\n<li><strong>高可用</strong>：生成分布式ID的服务要保证可用性无限接近于100%。</li>\n<li><strong>方便易用</strong>：拿来即用，使用方便，快速接入！</li>\n</ul>\n<p>除了这些之外，一个比较好的分布式ID还应保证：</p>\n<ul>\n<li><strong>安全</strong>：ID中不包含敏感信息。</li>\n<li><strong>有序递增</strong>：如果要把ID存放在数据库的话，ID的有序性可以提升数据库写入速度。并且，很多时候，我们还很有可能会直接通过ID来进行排序。</li>\n<li><strong>有具体的业务含义</strong>：生成的ID如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过ID就能确定是哪个业务）。</li>\n<li><strong>独立部署</strong>：也就是分布式系统单独有一个发号器服务，专门用来生成分布式ID。这样就生成ID的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式ID的场景比较多的话，独立部署的发号器服务还是很有必要的。</li>\n</ul>\n<h2 id=\"分布式ID常见解决方案\"><a href=\"#分布式ID常见解决方案\" class=\"headerlink\" title=\"分布式ID常见解决方案\"></a>分布式ID常见解决方案</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"数据库主键自增\"><a href=\"#数据库主键自增\" class=\"headerlink\" title=\"数据库主键自增\"></a>数据库主键自增</h4><p>这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的ID。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/the-primary-key-of-the-database-increases-automatically.png\" alt=\"数据库主键自增\"></p>\n<p>以MySQL举例，我们通过下面的方式即可。</p>\n<p><strong>1.创建一个数据库表。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sequence_id <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  stub <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> stub <span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>stub字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给stub字段创建了唯一索引，保证其唯一性。</p>\n<p><strong>2.通过replace into来插入数据。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token constant\">BEGIN</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">REPLACE</span> <span class=\"token class-name\">INTO</span> sequence_id <span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">)</span> <span class=\"token constant\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'stub'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SELECT</span> <span class=\"token function\">LAST_INSERT_ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">COMMIT</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>插入数据这里，我们没有使用insert into而是使用replace into来插入数据，具体步骤是这样的：</p>\n<ol>\n<li><p>第一步：尝试把数据插入到表中。</p>\n</li>\n<li><p>第二步：如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。</p>\n</li>\n</ol>\n<p>这种方式的优缺点也比较明显：</p>\n<ul>\n<li><strong>优点</strong>：实现起来比较简单、ID有序递增、存储消耗空间小</li>\n<li><strong>缺点</strong>：支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID没有具体业务含义、安全问题（比如根据订单ID的递增规律就能推算出每天的订单量，商业机密啊！）、每次获取ID都要访问一次数据库（增加了对数据库的压力，获取速度也慢）</li>\n</ul>\n<h4 id=\"数据库号段模式\"><a href=\"#数据库号段模式\" class=\"headerlink\" title=\"数据库号段模式\"></a>数据库号段模式</h4><p>数据库主键自增这种模式，每次获取ID都要访问一次数据库，ID需求比较大的时候，肯定是不行的。</p>\n<p>如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的<strong>基于数据库的号段模式来生成分布式ID。</strong></p>\n<p>数据库的号段模式也是目前比较主流的一种分布式ID生成方式。像滴滴开源的<a href=\"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\">Tinyid</a>就是基于这种方式来做的。不过，TinyId使用了双号段缓存、增加多db支持等方式来进一步优化。</p>\n<p>以MySQL举例，我们通过下面的方式即可。</p>\n<p><strong>1.创建一个数据库表。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sequence_id_generator <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  current_max_id <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'当前最大id'</span><span class=\"token punctuation\">,</span>\n  step <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'号段的长度'</span><span class=\"token punctuation\">,</span>\n  version <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'版本号'</span><span class=\"token punctuation\">,</span>\n  biz_type <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'业务类型'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>current_max_id字段和step字段主要用于获取批量ID，获取的批量id为：current_max_id~current_max_id+step。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/database-number-segment-mode.png\" alt=\"数据库号段模式\"></p>\n<p>version字段主要用于解决并发问题（乐观锁）,biz_type主要用于表示业务类型。</p>\n<p><strong>2.先插入一行数据。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sequence_id_generator <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> current_max_id<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">,</span> biz_type<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>3.通过SELECT获取指定业务下的批量唯一ID</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> current_max_id<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span>version <span class=\"token keyword\">FROM</span> sequence_id_generator <span class=\"token keyword\">where</span> biz_type <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t0\t100\t0\t101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>4.不够用的话，更新之后重新SELECT即可。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> sequence_id_generator <span class=\"token keyword\">SET</span> current_max_id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">=</span>version<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">WHERE</span> version <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token operator\">AND</span> biz_type <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\n<span class=\"token keyword\">SELECT</span> current_max_id<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span>version <span class=\"token keyword\">FROM</span> sequence_id_generator <span class=\"token keyword\">where</span> biz_type <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t100\t100\t1\t101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>相比于数据库主键自增的方式，<strong>数据库的号段模式对于数据库的访问次数更少，数据库压力更小。</strong></p>\n<p>另外，为了避免单点问题，你可以从使用主从模式来提高可用性。</p>\n<p><strong>数据库号段模式的优缺点:</strong></p>\n<ul>\n<li><strong>优点</strong>：ID有序递增、存储消耗空间小</li>\n<li><strong>缺点</strong>：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID没有具体业务含义、安全问题（比如根据订单ID的递增规律就能推算出每天的订单量，商业机密啊！）</li>\n</ul>\n<h4 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h4><p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/nosql-distributed-id.png\" alt=\"img\"></p>\n<p>一般情况下，NoSQL方案使用Redis多一些。我们通过Redis的incr命令即可实现对id原子顺序递增。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> sequence_id_biz_type <span class=\"token number\">1</span>\nOK\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incr sequence_id_biz_type\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get sequence_id_biz_type\n<span class=\"token string\">\"2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了提高可用性和并发，我们可以使用Redis Cluster。Redis Cluster是Redis官方提供的Redis集群解决方案（3.0+版本）。</p>\n<p>除了Redis Cluster之外，你也可以使用开源的Redis集群方案<a href=\"https://github.com/CodisLabs/codis\">Codis</a>（大规模集群比如上百个节点的时候比较推荐）。</p>\n<p>除了高可用和并发之外，我们知道Redis基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis支持两种不同的持久化方式：<strong>快照（snapshotting，RDB）</strong>、<strong>只追加文件（append-onlyfile,AOF）</strong>。并且，Redis4.0开始支持<strong>RDB和AOF的混合持久化</strong>（默认关闭，可以通过配置项aof-use-rdb-preamble开启）。</p>\n<p><strong>Redis方案的优缺点：</strong></p>\n<ul>\n<li><strong>优点</strong>：性能不错并且生成的ID是有序递增的</li>\n<li><strong>缺点</strong>：和数据库主键自增方案的缺点类似</li>\n</ul>\n<p>除了Redis之外，MongoDB ObjectId经常也会被拿来当做分布式ID的解决方案。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/mongodb9-objectId-distributed-id.png\" alt=\"img\"></p>\n<p>MongoDB ObjectId一共需要12个字节存储：</p>\n<ul>\n<li>0~3：时间戳</li>\n<li>3~6：代表机器ID</li>\n<li>7~8：机器进程ID</li>\n<li>9~11：自增值</li>\n</ul>\n<p><strong>MongoDB方案的优缺点：</strong></p>\n<ul>\n<li><strong>优点</strong>：性能不错并且生成的ID是有序递增的</li>\n<li><strong>缺点</strong>：需要解决重复ID问题（当机器时间不对的情况下，可能导致会产生重复ID）、有安全性问题（ID生成有规律性）</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><h4 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h4><p>UUID是Universally Unique Identifier（通用唯一标识符）的缩写。UUID包含32个16进制数字（8-4-4-4-12）。</p>\n<p>JDK就提供了现成的生成UUID的方法，一行代码就行了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa</span>\n<span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://tools.ietf.org/html/rfc4122\">RFC 4122</a>中关于UUID的示例是这样的：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rfc-4122-uuid.png\" alt=\"img\"></p>\n<p>我们这里重点关注一下这个Version(版本)，不同的版本对应的UUID的生成规则是不同的。</p>\n<p>5种不同的Version(版本)值分别对应的含义（参考<a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\">维基百科对于UUID的介绍</a>）：</p>\n<ul>\n<li><strong>版本1</strong>:UUID是根据时间和节点ID（通常是MAC地址）生成；</li>\n<li><strong>版本2</strong>:UUID是根据标识符（通常是组或用户ID）、时间和节点ID生成；</li>\n<li><strong>版本3、版本5</strong>:版本5-确定性UUID通过散列（hashing）名字空间（namespace）标识符和名称生成；</li>\n<li><strong>版本4</strong>:UUID使用<a href=\"https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%80%A7\">随机性</a>或<a href=\"https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7\">伪随机性</a>生成。</li>\n</ul>\n<p>下面是Version1版本下生成的UUID的示例：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/version1-uuid.png\" alt=\"Version1版本下生成的UUID的示例\"></p>\n<p>JDK中通过UUID的randomUUID()方法生成的UUID的版本默认为4。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">UUID</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> version <span class=\"token operator\">=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外，Variant(变体)也有4种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。</p>\n<p>需要用到的时候，去看看维基百科对于UUID的Variant(变体)相关的介绍即可。</p>\n<p>从上面的介绍中可以看出，UUID可以保证唯一性，因为其生成规则包括MAC地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的UUID是肯定不会重复的。</p>\n<p>虽然，UUID可以做到全局唯一性，但是，我们一般很少会使用它。</p>\n<p>比如使用UUID作为MySQL数据库主键的时候就非常不合适：</p>\n<ul>\n<li>数据库主键要尽量越短越好，而UUID的消耗的存储空间比较大（32个字符串，128位）。</li>\n<li>UUID是无顺序的，InnoDB引擎下，数据库主键的无序性会严重影响数据库性能。</li>\n</ul>\n<p>最后，我们再简单分析一下<strong>UUID的优缺点</strong>（面试的时候可能会被问到的哦！）:</p>\n<ul>\n<li><strong>优点</strong>：生成速度比较快、简单易用</li>\n<li><strong>缺点</strong>：存储消耗空间大（32个字符串，128位）、不安全(基于MAC地址生成UUID的算法会造成MAC地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复ID问题（当机器时间不对的情况下，可能导致会产生重复ID）</li>\n</ul>\n<h4 id=\"Snowflake-雪花算法\"><a href=\"#Snowflake-雪花算法\" class=\"headerlink\" title=\"Snowflake(雪花算法)\"></a>Snowflake(雪花算法)</h4><p>Snowflake是Twitter开源的分布式ID生成算法。Snowflake由64bit的二进制数字组成，这64bit的二进制被分成了几部分，每一部分存储的数据都有特定的含义：</p>\n<ul>\n<li><strong>第0位</strong>：符号位（标识正负），始终为0，没有用，不用管。</li>\n<li><strong>第1~41位</strong>：一共41位，用来表示时间戳，单位是毫秒，可以支撑2^41毫秒（约69年）</li>\n<li><strong>第42~52位</strong>：一共10位，一般来说，前5位表示机房ID，后5位表示机器ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群&#x2F;机房的节点。</li>\n<li><strong>第53~64位</strong>：一共12位，用来表示序列号。序列号为自增值，代表单台机器每毫秒能够产生的最大ID数(2^12&#x3D;4096),也就是说单台机器每毫秒最多可以生成4096个唯一ID。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/snowflake-distributed-id-schematic-diagram.png\" alt=\"Snowflake示意图\"></p>\n<p>如果你想要使用Snowflake算法的话，一般不需要你自己再造轮子。有很多基于Snowflake算法的开源实现比如美团的Leaf、百度的UidGenerator，并且这些开源实现对原有的Snowflake算法进行了优化。</p>\n<p>另外，在实际项目中，我们一般也会对Snowflake算法进行改造，最常见的就是在Snowflake算法生成的ID中加入业务类型信息。</p>\n<p>我们再来看看Snowflake算法的优缺点：</p>\n<ul>\n<li><strong>优点</strong>：生成速度比较快、生成的ID有序递增、比较灵活（可以对Snowflake算法进行简单的改造比如加入业务ID）</li>\n<li><strong>缺点</strong>：需要解决重复ID问题（依赖时间，当机器时间不对的情况下，可能导致会产生重复ID）。</li>\n</ul>\n<h5 id=\"雪花算法生成分布式ID\"><a href=\"#雪花算法生成分布式ID\" class=\"headerlink\" title=\"雪花算法生成分布式ID\"></a>雪花算法生成分布式ID</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlake</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 起始的时间戳\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">START_STMP</span> <span class=\"token operator\">=</span> <span class=\"token number\">1480166465631L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 每一部分占用的位数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">SEQUENCE_BIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 序列号占用的位数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MACHINE_BIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器标识占用的位数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">DATACENTER_BIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 数据中心占用的位数</span>\n\n    <span class=\"token comment\">/**\n     * 每一部分的最大值\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_DATACENTER_NUM</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">DATACENTER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_MACHINE_NUM</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">MACHINE_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_SEQUENCE</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">SEQUENCE_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 每一部分向左的位移\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MACHINE_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">SEQUENCE_BIT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">DATACENTER_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">SEQUENCE_BIT</span> <span class=\"token operator\">+</span> <span class=\"token constant\">MACHINE_BIT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">TIMESTMP_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DATACENTER_LEFT</span> <span class=\"token operator\">+</span> <span class=\"token constant\">DATACENTER_BIT</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> datacenterId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据中心</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> machineId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器标识</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 序列号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastStmp <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一次时间戳</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> datacenterId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> machineId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datacenterId <span class=\"token operator\">></span> <span class=\"token constant\">MAX_DATACENTER_NUM</span> <span class=\"token operator\">||</span> datacenterId <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>machineId <span class=\"token operator\">></span> <span class=\"token constant\">MAX_MACHINE_NUM</span> <span class=\"token operator\">||</span> machineId <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>datacenterId <span class=\"token operator\">=</span> datacenterId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machineId <span class=\"token operator\">=</span> machineId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 产生下一个ID\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">long</span> <span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> currStmp <span class=\"token operator\">=</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currStmp <span class=\"token operator\">&lt;</span> lastStmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clock moved backwards.  Refusing to generate id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currStmp <span class=\"token operator\">==</span> lastStmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 相同毫秒内，序列号自增</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">MAX_SEQUENCE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 同一毫秒的序列数已经达到最大</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">==</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                currStmp <span class=\"token operator\">=</span> <span class=\"token function\">getNextMill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不同毫秒内，序列号置为0</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        lastStmp <span class=\"token operator\">=</span> currStmp<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currStmp <span class=\"token operator\">-</span> <span class=\"token constant\">START_STMP</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">TIMESTMP_LEFT</span> <span class=\"token comment\">// 时间戳部分</span>\n                <span class=\"token operator\">|</span> datacenterId <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">DATACENTER_LEFT</span> <span class=\"token comment\">// 数据中心部分</span>\n                <span class=\"token operator\">|</span> machineId <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">MACHINE_LEFT</span> <span class=\"token comment\">// 机器标识部分</span>\n                <span class=\"token operator\">|</span> sequence<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 序列号部分</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getNextMill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> mill <span class=\"token operator\">=</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mill <span class=\"token operator\">&lt;=</span> lastStmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mill <span class=\"token operator\">=</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> mill<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SnowFlake</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>snowFlake<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 饿汉式单例模式实现雪花算法\n **/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlakeSingleE</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleE</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlakeSingleE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SnowFlakeSingleE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleE</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> snowFlake<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 序列号，同一毫秒内用此参数来控制并发</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 上一次生成编号的时间串，格式：yyMMddHHmmssSSS</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastTime <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前时间串，格式：yyMMddHHmmssSSS</span>\n        <span class=\"token class-name\">String</span> machineId <span class=\"token operator\">=</span> <span class=\"token string\">\"01\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器编号，这里假装获取到的机器编号是2。实际项目中可从配置文件中读取</span>\n        <span class=\"token comment\">// 本次和上次不是同一毫秒，直接生成编号返回</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n            lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 本次和上次在同一个毫秒内，需要用序列号控制并发</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 序列号没有达到最大值，直接生成编号返回</span>\n            sequence <span class=\"token operator\">=</span> sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 序列号达到最大值，需要等待下一毫秒的到来</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n        lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyMMddHHmmssSSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">/**\n * 懒汉式单例模式实现雪花算法\n **/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlakeSingleL</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleL</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SnowFlakeSingleL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleL</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snowFlake <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SnowFlakeSingleL</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snowFlake <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlakeSingleL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> snowFlake<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> snowFlake<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 序列号，同一毫秒内用此参数来控制并发</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 上一次生成编号的时间串，格式：yyMMddHHmmssSSS</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastTime <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前时间串，格式：yyMMddHHmmssSSS</span>\n        <span class=\"token class-name\">String</span> machineId <span class=\"token operator\">=</span> <span class=\"token string\">\"01\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器编号，这里假装获取到的机器编号是2。实际项目中可从配置文件中读取</span>\n        <span class=\"token comment\">// 本次和上次不是同一毫秒，直接生成编号返回</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n            lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 本次和上次在同一个毫秒内，需要用序列号控制并发</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 序列号没有达到最大值，直接生成编号返回</span>\n            sequence <span class=\"token operator\">=</span> sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 序列号达到最大值，需要等待下一毫秒的到来</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n        lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyMMddHHmmssSSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h3><h4 id=\"UidGenerator-百度\"><a href=\"#UidGenerator-百度\" class=\"headerlink\" title=\"UidGenerator(百度)\"></a>UidGenerator(百度)</h4><p><a href=\"https://github.com/baidu/uid-generator\">UidGenerator</a>是百度开源的一款基于Snowflake(雪花算法)的唯一ID生成器。</p>\n<p>不过，UidGenerator对Snowflake(雪花算法)进行了改进，生成的唯一ID组成如下。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-distributed-id-schematic-diagram.png\" alt=\"img\"></p>\n<p>可以看出，和原始Snowflake(雪花算法)生成的唯一ID的组成不太一样。并且，上面这些参数我们都可以自定义。</p>\n<p>UidGenerator官方文档中的介绍如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-introduction-official-documents.png\" alt=\"img\"></p>\n<p>自18年后，UidGenerator就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看<a href=\"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md\">UidGenerator的官方介绍</a>。</p>\n<h4 id=\"Leaf-美团\"><a href=\"#Leaf-美团\" class=\"headerlink\" title=\"Leaf(美团)\"></a>Leaf(美团)</h4><p>**<a href=\"https://github.com/Meituan-Dianping/Leaf\">Leaf</a>**是美团开源的一个分布式ID解决方案。这个项目的名字Leaf（树叶）起源于德国哲学家、数学家莱布尼茨的一句话：“There are no two identical leaves in the world”（世界上没有两片相同的树叶）。这名字起得真心挺不错的，有点文艺青年那味了！</p>\n<p>Leaf提供了<strong>号段模式</strong>和**Snowflake(雪花算法)**这两种模式来生成分布式ID。并且，它支持双号段，还解决了雪花ID系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于Zookeeper。</p>\n<p>Leaf的诞生主要是为了解决美团各个业务线生成分布式ID的方法多种多样以及不可靠的问题。</p>\n<p>Leaf对原有的号段模式进行改进，比如它这里增加了双号段避免获取DB在获取号段的时候阻塞请求获取ID的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章：<a href=\"https://tech.meituan.com/2017/04/21/mt-leaf.html\">《Leaf—美团点评分布式ID生成系统》openinnewwindow</a>）。</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-5c152efed042a8fe7e13692e0339d577f5c.png\" alt=\"img\"></p>\n<p>根据项目README介绍，在4C8GVM基础上，通过公司RPC方式调用，QPS压测结果近5w&#x2F;s，TP9991ms。</p>\n<h4 id=\"Tinyid-滴滴\"><a href=\"#Tinyid-滴滴\" class=\"headerlink\" title=\"Tinyid(滴滴)\"></a>Tinyid(滴滴)</h4><p><a href=\"https://github.com/didi/tinyid\">Tinyid</a>是滴滴开源的一款基于数据库号段模式的唯一ID生成器。</p>\n<p>数据库号段模式的原理我们在上面已经介绍过了。<strong>Tinyid有哪些亮点呢？</strong></p>\n<p>为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于Tinyid的官方wiki:<a href=\"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\">《Tinyid原理介绍》</a>）</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-4afc0e45c0c86ba5ad645d023dce11e53c2.png\" alt=\"img\"></p>\n<p>在这种架构模式下，我们通过HTTP请求向发号器服务申请唯一ID。负载均衡router会把我们的请求送往其中的一台tinyid-server。</p>\n<p>这种方案有什么问题呢？在我看来（Tinyid官方wiki也有介绍到），主要由下面这2个问题：</p>\n<ul>\n<li>获取新号段的情况下，程序获取唯一ID的速度比较慢。</li>\n<li>需要保证DB高可用，这个是比较麻烦且耗费资源的。</li>\n</ul>\n<p>除此之外，HTTP调用也存在网络开销。</p>\n<p>Tinyid的原理比较简单，其架构如下图所示：</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-53f74cd615178046d6c04fe50513fee74ce.png\" alt=\"img\"></p>\n<p>相比于基于数据库号段模式的简单架构方案，Tinyid方案主要做了下面这些优化：</p>\n<ul>\n<li><strong>双号段缓存</strong>：为了避免在获取新号段的情况下，程序获取唯一ID的速度比较慢。Tinyid中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。</li>\n<li><strong>增加多db支持</strong>：支持多个DB，并且，每个DB都能生成唯一ID，提高了可用性。</li>\n<li><strong>增加tinyid-client</strong>：纯本地操作，无HTTP请求消耗，性能和可用性都有很大提升。</li>\n</ul>\n<p>Tinyid的优缺点这里就不分析了，结合数据库号段模式的优缺点和Tinyid的原理就能知道。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这篇文章，我基本上已经把最常见的分布式ID生成方案都总结了一波。</p>\n<p>除了上面介绍的方式之外，像ZooKeeper这类中间件也可以帮助我们生成唯一ID。<strong>没有银弹，一定要结合实际项目来选择最适合自己的方案。</strong></p>\n<blockquote>\n<p><a href=\"https://javaguide.cn/distributed-system/distributed-id.html\">原文链接</a></p>\n</blockquote>\n<h4 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h4><p><a href=\"https://mp.weixin.qq.com/s/-30WmwoYHg0oWZSWedE5MQ\">深度介绍分布式系统原理与设计</a><br><a href=\"https://mp.weixin.qq.com/s/zXchd2SEjLkHftCe9-2_-Q\">一口气说出9种分布式ID生成方式</a><br><a href=\"https://mp.weixin.qq.com/s/jGq7SvVggZ7gNqM2SZ320Q\">七种分布式全局ID生成策略，你更爱哪种</a><br><a href=\"https://mp.weixin.qq.com/s/dEkkSCbQzfhH3NuXsbbY0w\">一起学习下一线大厂的分布式唯一ID生成方案</a></p>\n","more":"<h2 id=\"分布式ID介绍\"><a href=\"#分布式ID介绍\" class=\"headerlink\" title=\"分布式ID介绍\"></a>分布式ID介绍</h2><h3 id=\"什么是ID？\"><a href=\"#什么是ID？\" class=\"headerlink\" title=\"什么是ID？\"></a>什么是ID？</h3><p>日常开发中，我们需要对系统中的各种数据使用ID唯一表示，比如用户ID对应且仅对应一个人，商品ID对应且仅对应一件商品，订单ID对应且仅对应一个订单。</p>\n<p>我们现实生活中也有各种ID，比如身份证ID对应且仅对应一个人、地址ID对应且仅对应</p>\n<p>简单来说，<strong>ID就是数据的唯一标识</strong>。</p>\n<h3 id=\"什么是分布式ID？\"><a href=\"#什么是分布式ID？\" class=\"headerlink\" title=\"什么是分布式ID？\"></a>什么是分布式ID？</h3><p>分布式ID是分布式系统下的ID。分布式ID不存在与现实生活中，属于计算机系统中的一个概念。</p>\n<p>我简单举一个分库分表的例子。</p>\n<p>我司的一个项目，使用的是单机MySQL。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机MySQL已经没办法支撑了，需要进行分库分表（推荐Sharding-JDBC）。</p>\n<p>在分库之后，数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p>\n<p>这个时候就需要生成<strong>分布式ID</strong>了。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png\" alt=\"img\"></p>\n<h3 id=\"分布式ID需要满足哪些要求\"><a href=\"#分布式ID需要满足哪些要求\" class=\"headerlink\" title=\"分布式ID需要满足哪些要求?\"></a>分布式ID需要满足哪些要求?</h3><p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-requirements.png\" alt=\"img\"></p>\n<p>分布式ID作为分布式系统中必不可少的一环，很多地方都要用到分布式ID。</p>\n<p>一个最基本的分布式ID需要满足下面这些要求：</p>\n<ul>\n<li><strong>全局唯一</strong>：ID的全局唯一性肯定是首先要满足的！</li>\n<li><strong>高性能</strong>：分布式ID的生成速度要快，对本地资源消耗要小。</li>\n<li><strong>高可用</strong>：生成分布式ID的服务要保证可用性无限接近于100%。</li>\n<li><strong>方便易用</strong>：拿来即用，使用方便，快速接入！</li>\n</ul>\n<p>除了这些之外，一个比较好的分布式ID还应保证：</p>\n<ul>\n<li><strong>安全</strong>：ID中不包含敏感信息。</li>\n<li><strong>有序递增</strong>：如果要把ID存放在数据库的话，ID的有序性可以提升数据库写入速度。并且，很多时候，我们还很有可能会直接通过ID来进行排序。</li>\n<li><strong>有具体的业务含义</strong>：生成的ID如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过ID就能确定是哪个业务）。</li>\n<li><strong>独立部署</strong>：也就是分布式系统单独有一个发号器服务，专门用来生成分布式ID。这样就生成ID的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式ID的场景比较多的话，独立部署的发号器服务还是很有必要的。</li>\n</ul>\n<h2 id=\"分布式ID常见解决方案\"><a href=\"#分布式ID常见解决方案\" class=\"headerlink\" title=\"分布式ID常见解决方案\"></a>分布式ID常见解决方案</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"数据库主键自增\"><a href=\"#数据库主键自增\" class=\"headerlink\" title=\"数据库主键自增\"></a>数据库主键自增</h4><p>这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的ID。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/the-primary-key-of-the-database-increases-automatically.png\" alt=\"数据库主键自增\"></p>\n<p>以MySQL举例，我们通过下面的方式即可。</p>\n<p><strong>1.创建一个数据库表。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sequence_id <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  stub <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> stub <span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>stub字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给stub字段创建了唯一索引，保证其唯一性。</p>\n<p><strong>2.通过replace into来插入数据。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token constant\">BEGIN</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">REPLACE</span> <span class=\"token class-name\">INTO</span> sequence_id <span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">)</span> <span class=\"token constant\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'stub'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SELECT</span> <span class=\"token function\">LAST_INSERT_ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">COMMIT</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>插入数据这里，我们没有使用insert into而是使用replace into来插入数据，具体步骤是这样的：</p>\n<ol>\n<li><p>第一步：尝试把数据插入到表中。</p>\n</li>\n<li><p>第二步：如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。</p>\n</li>\n</ol>\n<p>这种方式的优缺点也比较明显：</p>\n<ul>\n<li><strong>优点</strong>：实现起来比较简单、ID有序递增、存储消耗空间小</li>\n<li><strong>缺点</strong>：支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID没有具体业务含义、安全问题（比如根据订单ID的递增规律就能推算出每天的订单量，商业机密啊！）、每次获取ID都要访问一次数据库（增加了对数据库的压力，获取速度也慢）</li>\n</ul>\n<h4 id=\"数据库号段模式\"><a href=\"#数据库号段模式\" class=\"headerlink\" title=\"数据库号段模式\"></a>数据库号段模式</h4><p>数据库主键自增这种模式，每次获取ID都要访问一次数据库，ID需求比较大的时候，肯定是不行的。</p>\n<p>如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的<strong>基于数据库的号段模式来生成分布式ID。</strong></p>\n<p>数据库的号段模式也是目前比较主流的一种分布式ID生成方式。像滴滴开源的<a href=\"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\">Tinyid</a>就是基于这种方式来做的。不过，TinyId使用了双号段缓存、增加多db支持等方式来进一步优化。</p>\n<p>以MySQL举例，我们通过下面的方式即可。</p>\n<p><strong>1.创建一个数据库表。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sequence_id_generator <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  current_max_id <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'当前最大id'</span><span class=\"token punctuation\">,</span>\n  step <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'号段的长度'</span><span class=\"token punctuation\">,</span>\n  version <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'版本号'</span><span class=\"token punctuation\">,</span>\n  biz_type <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'业务类型'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>current_max_id字段和step字段主要用于获取批量ID，获取的批量id为：current_max_id~current_max_id+step。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/database-number-segment-mode.png\" alt=\"数据库号段模式\"></p>\n<p>version字段主要用于解决并发问题（乐观锁）,biz_type主要用于表示业务类型。</p>\n<p><strong>2.先插入一行数据。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sequence_id_generator <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> current_max_id<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">,</span> biz_type<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>3.通过SELECT获取指定业务下的批量唯一ID</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> current_max_id<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span>version <span class=\"token keyword\">FROM</span> sequence_id_generator <span class=\"token keyword\">where</span> biz_type <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t0\t100\t0\t101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>4.不够用的话，更新之后重新SELECT即可。</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> sequence_id_generator <span class=\"token keyword\">SET</span> current_max_id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">=</span>version<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">WHERE</span> version <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token operator\">AND</span> biz_type <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\n<span class=\"token keyword\">SELECT</span> current_max_id<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span>version <span class=\"token keyword\">FROM</span> sequence_id_generator <span class=\"token keyword\">where</span> biz_type <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t100\t100\t1\t101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>相比于数据库主键自增的方式，<strong>数据库的号段模式对于数据库的访问次数更少，数据库压力更小。</strong></p>\n<p>另外，为了避免单点问题，你可以从使用主从模式来提高可用性。</p>\n<p><strong>数据库号段模式的优缺点:</strong></p>\n<ul>\n<li><strong>优点</strong>：ID有序递增、存储消耗空间小</li>\n<li><strong>缺点</strong>：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID没有具体业务含义、安全问题（比如根据订单ID的递增规律就能推算出每天的订单量，商业机密啊！）</li>\n</ul>\n<h4 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h4><p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/nosql-distributed-id.png\" alt=\"img\"></p>\n<p>一般情况下，NoSQL方案使用Redis多一些。我们通过Redis的incr命令即可实现对id原子顺序递增。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> sequence_id_biz_type <span class=\"token number\">1</span>\nOK\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incr sequence_id_biz_type\n<span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span>\n<span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get sequence_id_biz_type\n<span class=\"token string\">\"2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了提高可用性和并发，我们可以使用Redis Cluster。Redis Cluster是Redis官方提供的Redis集群解决方案（3.0+版本）。</p>\n<p>除了Redis Cluster之外，你也可以使用开源的Redis集群方案<a href=\"https://github.com/CodisLabs/codis\">Codis</a>（大规模集群比如上百个节点的时候比较推荐）。</p>\n<p>除了高可用和并发之外，我们知道Redis基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis支持两种不同的持久化方式：<strong>快照（snapshotting，RDB）</strong>、<strong>只追加文件（append-onlyfile,AOF）</strong>。并且，Redis4.0开始支持<strong>RDB和AOF的混合持久化</strong>（默认关闭，可以通过配置项aof-use-rdb-preamble开启）。</p>\n<p><strong>Redis方案的优缺点：</strong></p>\n<ul>\n<li><strong>优点</strong>：性能不错并且生成的ID是有序递增的</li>\n<li><strong>缺点</strong>：和数据库主键自增方案的缺点类似</li>\n</ul>\n<p>除了Redis之外，MongoDB ObjectId经常也会被拿来当做分布式ID的解决方案。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/mongodb9-objectId-distributed-id.png\" alt=\"img\"></p>\n<p>MongoDB ObjectId一共需要12个字节存储：</p>\n<ul>\n<li>0~3：时间戳</li>\n<li>3~6：代表机器ID</li>\n<li>7~8：机器进程ID</li>\n<li>9~11：自增值</li>\n</ul>\n<p><strong>MongoDB方案的优缺点：</strong></p>\n<ul>\n<li><strong>优点</strong>：性能不错并且生成的ID是有序递增的</li>\n<li><strong>缺点</strong>：需要解决重复ID问题（当机器时间不对的情况下，可能导致会产生重复ID）、有安全性问题（ID生成有规律性）</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><h4 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h4><p>UUID是Universally Unique Identifier（通用唯一标识符）的缩写。UUID包含32个16进制数字（8-4-4-4-12）。</p>\n<p>JDK就提供了现成的生成UUID的方法，一行代码就行了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa</span>\n<span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://tools.ietf.org/html/rfc4122\">RFC 4122</a>中关于UUID的示例是这样的：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rfc-4122-uuid.png\" alt=\"img\"></p>\n<p>我们这里重点关注一下这个Version(版本)，不同的版本对应的UUID的生成规则是不同的。</p>\n<p>5种不同的Version(版本)值分别对应的含义（参考<a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\">维基百科对于UUID的介绍</a>）：</p>\n<ul>\n<li><strong>版本1</strong>:UUID是根据时间和节点ID（通常是MAC地址）生成；</li>\n<li><strong>版本2</strong>:UUID是根据标识符（通常是组或用户ID）、时间和节点ID生成；</li>\n<li><strong>版本3、版本5</strong>:版本5-确定性UUID通过散列（hashing）名字空间（namespace）标识符和名称生成；</li>\n<li><strong>版本4</strong>:UUID使用<a href=\"https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%80%A7\">随机性</a>或<a href=\"https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7\">伪随机性</a>生成。</li>\n</ul>\n<p>下面是Version1版本下生成的UUID的示例：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/version1-uuid.png\" alt=\"Version1版本下生成的UUID的示例\"></p>\n<p>JDK中通过UUID的randomUUID()方法生成的UUID的版本默认为4。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">UUID</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> version <span class=\"token operator\">=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外，Variant(变体)也有4种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。</p>\n<p>需要用到的时候，去看看维基百科对于UUID的Variant(变体)相关的介绍即可。</p>\n<p>从上面的介绍中可以看出，UUID可以保证唯一性，因为其生成规则包括MAC地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的UUID是肯定不会重复的。</p>\n<p>虽然，UUID可以做到全局唯一性，但是，我们一般很少会使用它。</p>\n<p>比如使用UUID作为MySQL数据库主键的时候就非常不合适：</p>\n<ul>\n<li>数据库主键要尽量越短越好，而UUID的消耗的存储空间比较大（32个字符串，128位）。</li>\n<li>UUID是无顺序的，InnoDB引擎下，数据库主键的无序性会严重影响数据库性能。</li>\n</ul>\n<p>最后，我们再简单分析一下<strong>UUID的优缺点</strong>（面试的时候可能会被问到的哦！）:</p>\n<ul>\n<li><strong>优点</strong>：生成速度比较快、简单易用</li>\n<li><strong>缺点</strong>：存储消耗空间大（32个字符串，128位）、不安全(基于MAC地址生成UUID的算法会造成MAC地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复ID问题（当机器时间不对的情况下，可能导致会产生重复ID）</li>\n</ul>\n<h4 id=\"Snowflake-雪花算法\"><a href=\"#Snowflake-雪花算法\" class=\"headerlink\" title=\"Snowflake(雪花算法)\"></a>Snowflake(雪花算法)</h4><p>Snowflake是Twitter开源的分布式ID生成算法。Snowflake由64bit的二进制数字组成，这64bit的二进制被分成了几部分，每一部分存储的数据都有特定的含义：</p>\n<ul>\n<li><strong>第0位</strong>：符号位（标识正负），始终为0，没有用，不用管。</li>\n<li><strong>第1~41位</strong>：一共41位，用来表示时间戳，单位是毫秒，可以支撑2^41毫秒（约69年）</li>\n<li><strong>第42~52位</strong>：一共10位，一般来说，前5位表示机房ID，后5位表示机器ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群&#x2F;机房的节点。</li>\n<li><strong>第53~64位</strong>：一共12位，用来表示序列号。序列号为自增值，代表单台机器每毫秒能够产生的最大ID数(2^12&#x3D;4096),也就是说单台机器每毫秒最多可以生成4096个唯一ID。</li>\n</ul>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/snowflake-distributed-id-schematic-diagram.png\" alt=\"Snowflake示意图\"></p>\n<p>如果你想要使用Snowflake算法的话，一般不需要你自己再造轮子。有很多基于Snowflake算法的开源实现比如美团的Leaf、百度的UidGenerator，并且这些开源实现对原有的Snowflake算法进行了优化。</p>\n<p>另外，在实际项目中，我们一般也会对Snowflake算法进行改造，最常见的就是在Snowflake算法生成的ID中加入业务类型信息。</p>\n<p>我们再来看看Snowflake算法的优缺点：</p>\n<ul>\n<li><strong>优点</strong>：生成速度比较快、生成的ID有序递增、比较灵活（可以对Snowflake算法进行简单的改造比如加入业务ID）</li>\n<li><strong>缺点</strong>：需要解决重复ID问题（依赖时间，当机器时间不对的情况下，可能导致会产生重复ID）。</li>\n</ul>\n<h5 id=\"雪花算法生成分布式ID\"><a href=\"#雪花算法生成分布式ID\" class=\"headerlink\" title=\"雪花算法生成分布式ID\"></a>雪花算法生成分布式ID</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlake</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 起始的时间戳\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">START_STMP</span> <span class=\"token operator\">=</span> <span class=\"token number\">1480166465631L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 每一部分占用的位数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">SEQUENCE_BIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 序列号占用的位数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MACHINE_BIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器标识占用的位数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">DATACENTER_BIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 数据中心占用的位数</span>\n\n    <span class=\"token comment\">/**\n     * 每一部分的最大值\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_DATACENTER_NUM</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">DATACENTER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_MACHINE_NUM</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">MACHINE_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MAX_SEQUENCE</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">SEQUENCE_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 每一部分向左的位移\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">MACHINE_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">SEQUENCE_BIT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">DATACENTER_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">SEQUENCE_BIT</span> <span class=\"token operator\">+</span> <span class=\"token constant\">MACHINE_BIT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">TIMESTMP_LEFT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DATACENTER_LEFT</span> <span class=\"token operator\">+</span> <span class=\"token constant\">DATACENTER_BIT</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> datacenterId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据中心</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> machineId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器标识</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 序列号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastStmp <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一次时间戳</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> datacenterId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> machineId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datacenterId <span class=\"token operator\">></span> <span class=\"token constant\">MAX_DATACENTER_NUM</span> <span class=\"token operator\">||</span> datacenterId <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>machineId <span class=\"token operator\">></span> <span class=\"token constant\">MAX_MACHINE_NUM</span> <span class=\"token operator\">||</span> machineId <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>datacenterId <span class=\"token operator\">=</span> datacenterId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>machineId <span class=\"token operator\">=</span> machineId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 产生下一个ID\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">long</span> <span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> currStmp <span class=\"token operator\">=</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currStmp <span class=\"token operator\">&lt;</span> lastStmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clock moved backwards.  Refusing to generate id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currStmp <span class=\"token operator\">==</span> lastStmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 相同毫秒内，序列号自增</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">MAX_SEQUENCE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 同一毫秒的序列数已经达到最大</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">==</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                currStmp <span class=\"token operator\">=</span> <span class=\"token function\">getNextMill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不同毫秒内，序列号置为0</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        lastStmp <span class=\"token operator\">=</span> currStmp<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currStmp <span class=\"token operator\">-</span> <span class=\"token constant\">START_STMP</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">TIMESTMP_LEFT</span> <span class=\"token comment\">// 时间戳部分</span>\n                <span class=\"token operator\">|</span> datacenterId <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">DATACENTER_LEFT</span> <span class=\"token comment\">// 数据中心部分</span>\n                <span class=\"token operator\">|</span> machineId <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">MACHINE_LEFT</span> <span class=\"token comment\">// 机器标识部分</span>\n                <span class=\"token operator\">|</span> sequence<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 序列号部分</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getNextMill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> mill <span class=\"token operator\">=</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mill <span class=\"token operator\">&lt;=</span> lastStmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mill <span class=\"token operator\">=</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> mill<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getNewstmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SnowFlake</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>snowFlake<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * 饿汉式单例模式实现雪花算法\n **/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlakeSingleE</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleE</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlakeSingleE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SnowFlakeSingleE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleE</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> snowFlake<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 序列号，同一毫秒内用此参数来控制并发</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 上一次生成编号的时间串，格式：yyMMddHHmmssSSS</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastTime <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前时间串，格式：yyMMddHHmmssSSS</span>\n        <span class=\"token class-name\">String</span> machineId <span class=\"token operator\">=</span> <span class=\"token string\">\"01\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器编号，这里假装获取到的机器编号是2。实际项目中可从配置文件中读取</span>\n        <span class=\"token comment\">// 本次和上次不是同一毫秒，直接生成编号返回</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n            lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 本次和上次在同一个毫秒内，需要用序列号控制并发</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 序列号没有达到最大值，直接生成编号返回</span>\n            sequence <span class=\"token operator\">=</span> sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 序列号达到最大值，需要等待下一毫秒的到来</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n        lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyMMddHHmmssSSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">/**\n * 懒汉式单例模式实现雪花算法\n **/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlakeSingleL</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleL</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SnowFlakeSingleL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SnowFlakeSingleL</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snowFlake <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SnowFlakeSingleL</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snowFlake <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlakeSingleL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> snowFlake<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> snowFlake<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 序列号，同一毫秒内用此参数来控制并发</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 上一次生成编号的时间串，格式：yyMMddHHmmssSSS</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastTime <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前时间串，格式：yyMMddHHmmssSSS</span>\n        <span class=\"token class-name\">String</span> machineId <span class=\"token operator\">=</span> <span class=\"token string\">\"01\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 机器编号，这里假装获取到的机器编号是2。实际项目中可从配置文件中读取</span>\n        <span class=\"token comment\">// 本次和上次不是同一毫秒，直接生成编号返回</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n            lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 本次和上次在同一个毫秒内，需要用序列号控制并发</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">&lt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 序列号没有达到最大值，直接生成编号返回</span>\n            sequence <span class=\"token operator\">=</span> sequence <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 序列号达到最大值，需要等待下一毫秒的到来</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lastTime<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sequence <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重置序列号，方便下次使用</span>\n        lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间串，方便下次使用</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>machineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyMMddHHmmssSSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h3><h4 id=\"UidGenerator-百度\"><a href=\"#UidGenerator-百度\" class=\"headerlink\" title=\"UidGenerator(百度)\"></a>UidGenerator(百度)</h4><p><a href=\"https://github.com/baidu/uid-generator\">UidGenerator</a>是百度开源的一款基于Snowflake(雪花算法)的唯一ID生成器。</p>\n<p>不过，UidGenerator对Snowflake(雪花算法)进行了改进，生成的唯一ID组成如下。</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-distributed-id-schematic-diagram.png\" alt=\"img\"></p>\n<p>可以看出，和原始Snowflake(雪花算法)生成的唯一ID的组成不太一样。并且，上面这些参数我们都可以自定义。</p>\n<p>UidGenerator官方文档中的介绍如下：</p>\n<p><img src=\"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-introduction-official-documents.png\" alt=\"img\"></p>\n<p>自18年后，UidGenerator就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看<a href=\"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md\">UidGenerator的官方介绍</a>。</p>\n<h4 id=\"Leaf-美团\"><a href=\"#Leaf-美团\" class=\"headerlink\" title=\"Leaf(美团)\"></a>Leaf(美团)</h4><p>**<a href=\"https://github.com/Meituan-Dianping/Leaf\">Leaf</a>**是美团开源的一个分布式ID解决方案。这个项目的名字Leaf（树叶）起源于德国哲学家、数学家莱布尼茨的一句话：“There are no two identical leaves in the world”（世界上没有两片相同的树叶）。这名字起得真心挺不错的，有点文艺青年那味了！</p>\n<p>Leaf提供了<strong>号段模式</strong>和**Snowflake(雪花算法)**这两种模式来生成分布式ID。并且，它支持双号段，还解决了雪花ID系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于Zookeeper。</p>\n<p>Leaf的诞生主要是为了解决美团各个业务线生成分布式ID的方法多种多样以及不可靠的问题。</p>\n<p>Leaf对原有的号段模式进行改进，比如它这里增加了双号段避免获取DB在获取号段的时候阻塞请求获取ID的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章：<a href=\"https://tech.meituan.com/2017/04/21/mt-leaf.html\">《Leaf—美团点评分布式ID生成系统》openinnewwindow</a>）。</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-5c152efed042a8fe7e13692e0339d577f5c.png\" alt=\"img\"></p>\n<p>根据项目README介绍，在4C8GVM基础上，通过公司RPC方式调用，QPS压测结果近5w&#x2F;s，TP9991ms。</p>\n<h4 id=\"Tinyid-滴滴\"><a href=\"#Tinyid-滴滴\" class=\"headerlink\" title=\"Tinyid(滴滴)\"></a>Tinyid(滴滴)</h4><p><a href=\"https://github.com/didi/tinyid\">Tinyid</a>是滴滴开源的一款基于数据库号段模式的唯一ID生成器。</p>\n<p>数据库号段模式的原理我们在上面已经介绍过了。<strong>Tinyid有哪些亮点呢？</strong></p>\n<p>为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于Tinyid的官方wiki:<a href=\"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\">《Tinyid原理介绍》</a>）</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-4afc0e45c0c86ba5ad645d023dce11e53c2.png\" alt=\"img\"></p>\n<p>在这种架构模式下，我们通过HTTP请求向发号器服务申请唯一ID。负载均衡router会把我们的请求送往其中的一台tinyid-server。</p>\n<p>这种方案有什么问题呢？在我看来（Tinyid官方wiki也有介绍到），主要由下面这2个问题：</p>\n<ul>\n<li>获取新号段的情况下，程序获取唯一ID的速度比较慢。</li>\n<li>需要保证DB高可用，这个是比较麻烦且耗费资源的。</li>\n</ul>\n<p>除此之外，HTTP调用也存在网络开销。</p>\n<p>Tinyid的原理比较简单，其架构如下图所示：</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/up-53f74cd615178046d6c04fe50513fee74ce.png\" alt=\"img\"></p>\n<p>相比于基于数据库号段模式的简单架构方案，Tinyid方案主要做了下面这些优化：</p>\n<ul>\n<li><strong>双号段缓存</strong>：为了避免在获取新号段的情况下，程序获取唯一ID的速度比较慢。Tinyid中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。</li>\n<li><strong>增加多db支持</strong>：支持多个DB，并且，每个DB都能生成唯一ID，提高了可用性。</li>\n<li><strong>增加tinyid-client</strong>：纯本地操作，无HTTP请求消耗，性能和可用性都有很大提升。</li>\n</ul>\n<p>Tinyid的优缺点这里就不分析了，结合数据库号段模式的优缺点和Tinyid的原理就能知道。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这篇文章，我基本上已经把最常见的分布式ID生成方案都总结了一波。</p>\n<p>除了上面介绍的方式之外，像ZooKeeper这类中间件也可以帮助我们生成唯一ID。<strong>没有银弹，一定要结合实际项目来选择最适合自己的方案。</strong></p>\n<blockquote>\n<p><a href=\"https://javaguide.cn/distributed-system/distributed-id.html\">原文链接</a></p>\n</blockquote>\n<h4 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h4><p><a href=\"https://mp.weixin.qq.com/s/-30WmwoYHg0oWZSWedE5MQ\">深度介绍分布式系统原理与设计</a><br><a href=\"https://mp.weixin.qq.com/s/zXchd2SEjLkHftCe9-2_-Q\">一口气说出9种分布式ID生成方式</a><br><a href=\"https://mp.weixin.qq.com/s/jGq7SvVggZ7gNqM2SZ320Q\">七种分布式全局ID生成策略，你更爱哪种</a><br><a href=\"https://mp.weixin.qq.com/s/dEkkSCbQzfhH3NuXsbbY0w\">一起学习下一线大厂的分布式唯一ID生成方案</a></p>\n","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[]}