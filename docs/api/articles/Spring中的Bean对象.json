{"title":"Spring中的Bean对象","slug":"Spring中的Bean对象","date":"2023-03-03T08:37:59.487Z","updated":"2023-05-17T06:14:54.283Z","comments":true,"path":"api/articles/Spring中的Bean对象.json","excerpt":null,"covers":"https://picx.zhimg.com/v2-5668c094310c3d27b25ea3df98b9e43c_1440w.jpg","content":"<h2 id=\"Spring-IoC\"><a href=\"#Spring-IoC\" class=\"headerlink\" title=\"Spring IoC\"></a>Spring IoC</h2><h3 id=\"谈谈自己对于Spring-IoC的了解\"><a href=\"#谈谈自己对于Spring-IoC的了解\" class=\"headerlink\" title=\"谈谈自己对于Spring IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3><p><strong>IoC（InversionofControl:控制反转）</strong>是一种设计思想，而不是一个具体的技术实现。IoC的思想就是将原本在程序中手动创建对象的控制权，交由Spring框架来管理。不过，IoC并非Spring特有，在其他语言中也有应用。</p>\n<p><strong>为什么叫控制反转？</strong></p>\n<ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权力</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/frc-365faceb5697f04f31399937c059c162.png\" alt=\"img\"></p>\n<p>将对象之间的相互依赖关系交给IoC容器来管理，并由IoC容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IoC容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件&#x2F;注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<p>在实际项目中一个Service类可能依赖了很多其他的类，假如我们需要实例化这个Service，你可能要每次都要搞清这个Service所有底层类的构造函数，这可能会把人逼疯。如果利用IoC的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p>\n<p>在Spring中，IoC容器是Spring用来实现IoC的载体，IoC容器实际上就是个Map（key，value），Map中存放的是各种对象。</p>\n<p>Spring时代我们一般通过XML文件来配置Bean，后来开发人员觉得XML文件来配置不太好，于是SpringBoot注解配置就慢慢开始流行起来。</p>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"https://javadoop.com/post/spring-ioc\">IoC源码阅读</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486938&idx=1&sn=c99ef0233f39a5ffc1b98c81e02dfcd4&chksm=cea24211f9d5cb07fa901183ba4d96187820713a72387788408040822ffb2ed575d28e953ce7&token=1736772241&lang=zh_CN#rd\">面试被问了几百遍的IoC和AOP，还在傻傻搞不清楚？</a></li>\n</ul>\n<h3 id=\"什么是Spring-Bean？\"><a href=\"#什么是Spring-Bean？\" class=\"headerlink\" title=\"什么是Spring Bean？\"></a>什么是Spring Bean？</h3><p>简单来说，Bean代指的就是那些被IoC容器所管理的对象。</p>\n<p>我们需要告诉IoC容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是XML文件、注解或者Java配置类。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- Constructor-arg with 'value' attribute --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下图简单地展示了IoC容器如何使用配置元数据来管理对象。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/062b422bd7ac4d53afd28fb74b2bc94d.png\" alt=\"img\"></p>\n<p><strong>org.springframework.beans</strong>和<strong>org.springframework.context</strong>这两个包是IoC实现的基础，如果想要研究IoC相关的源码的话，可以去看看</p>\n<h3 id=\"将一个类声明为Bean的注解有哪些\"><a href=\"#将一个类声明为Bean的注解有哪些\" class=\"headerlink\" title=\"将一个类声明为Bean的注解有哪些?\"></a>将一个类声明为Bean的注解有哪些?</h3><ul>\n<li>@Component：通用的注解，可标注任意类为Spring组件。如果一个Bean不知道属于哪个层，可以使用@Component注解标注。</li>\n<li>@Repository:对应持久层即Dao层，主要用于数据库相关操作。</li>\n<li>@Service:对应服务层，主要涉及一些复杂的逻辑，需要用到Dao层。</li>\n<li>@Controller:对应SpringMVC控制层，主要用于接受用户请求并调用Service层返回数据给前端页面。</li>\n</ul>\n<h3 id=\"Component和-Bean的区别是什么？\"><a href=\"#Component和-Bean的区别是什么？\" class=\"headerlink\" title=\"@Component和@Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3><ul>\n<li>@Component注解作用于类，而@Bean注解作用于方法。</li>\n<li>@Component通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中（我们可以使用@ComponentScan注解定义要扫描的路径从中找出标识了需要装配的类自动装配到Spring的bean容器中）。@Bean注解通常是我们在标有该注解的方法中定义产生这个bean,@Bean告诉了Spring这是某个类的实例，当我需要用它的时候还给我。</li>\n<li>@Bean注解比@Component注解的自定义性更强，而且很多地方我们只能通过@Bean注解来注册bean。比如当我们引用第三方库中的类需要装配到Spring容器时，则只能通过@Bean来实现。</li>\n</ul>\n<p>@Bean注解使用示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TransferService</span> <span class=\"token function\">transferService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransferServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码相当于下面的xml配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transferService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.acme.TransferServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面这个例子是通过@Component无法实现的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">OneService</span> <span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n        when <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">serviceImpl1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        when <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">serviceImpl2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        when <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">serviceImpl3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注入Bean的注解有哪些？\"><a href=\"#注入Bean的注解有哪些？\" class=\"headerlink\" title=\"注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3><p>Spring内置的@Autowired以及JDK内置的@Resource和@Inject都可以用于注入Bean。</p>\n<table>\n<thead>\n<tr>\n<th>Annotaion</th>\n<th>Package</th>\n<th>Source</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Autowired</td>\n<td>org.springframework.bean.factory</td>\n<td>Spring 2.5+</td>\n</tr>\n<tr>\n<td>@Resource</td>\n<td>javax.annotation</td>\n<td>Java JSR-250</td>\n</tr>\n<tr>\n<td>@Inject</td>\n<td>javax.inject</td>\n<td>Java JSR-330</td>\n</tr>\n</tbody></table>\n<p>@Autowired和@Resource使用的比较多一些。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a href=\"#Autowired和-Resource的区别是什么？\" class=\"headerlink\" title=\"@Autowired和@Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3><p>Autowired属于Spring内置的注解，默认的注入方式为byType（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入Bean（接口的实现类）。</p>\n<p><strong>这会有什么问题呢？</strong>当一个接口存在多个实现类的话，byType这种方式就无法正确注入对象了,因为这个时候Spring会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。</p>\n<p>这种情况下，注入方式会变为byName（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的smsService就是我这里所说的名称，这样应该比较好理解了吧。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// smsService就是我们上面所说的名称</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>举个例子，SmsService接口有两个实现类:SmsServiceImpl1和SmsServiceImpl2，且它们都已经被Spring容器所管理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 报错，byName和byType都无法匹配到bean</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsServiceImpl1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean</span>\n<span class=\"token comment\">// smsServiceImpl1就是我们上面所说的名称</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"smsServiceImpl1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们还是建议通过@Qualifier注解来显式指定名称而不是依赖变量的名称。</p>\n<p>@Resource属于JDK提供的注解，默认注入方式为byName。如果无法通过名称匹配到对应的Bean的话，注入方式会变为byType。</p>\n<p>@Resource有两个比较重要且日常开发常用的属性：name（名称）、type（类型）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Resource</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果仅指定<code>name</code>属性则注入方式为<code>byName</code>，如果仅指定<code>type</code>属性则注入方式为<code>byType</code>，如果同时指定<code>name</code>和<code>type</code>属性（不建议这么做）则注入方式为<code>byType</code>+<code>byName</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 报错，byName和byType都无法匹配到bean</span>\n<span class=\"token annotation punctuation\">@Resource</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean</span>\n<span class=\"token annotation punctuation\">@Resource</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsServiceImpl1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean（比较推荐这种方式）</span>\n<span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"smsServiceImpl1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单总结一下：</p>\n<ul>\n<li>@Autowired是Spring提供的注解，@Resource是JDK提供的注解。</li>\n<li>Autowired默认的注入方式为byType（根据类型进行匹配），@Resource默认注入方式为byName（根据名称进行匹配）。</li>\n<li>当一个接口存在多个实现类的情况下，@Autowired和@Resource都需要通过名称才能正确匹配到对应的Bean。Autowired可以通过@Qualifier注解来显式指定名称，@Resource可以通过name属性来显式指定名称。</li>\n</ul>\n<p><strong>@Autowired和@Resource区别</strong>😊</p>\n<ol>\n<li>@Autowired与@Resource都可以用来装配bean,都可以写在字段上,或写在setter方法上。</li>\n<li>@Autowired默认按类型装配（这个注解是属于spring的）,默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required&#x3D;false)，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Qualifier</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"baseDao\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BaseDao</span> baseDao<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</li>\n<li>@Autowired只按照byType注入,由Spring提供，@Resource默认按byName自动注入，也提供按照byType注入</li>\n</ol>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/MZX97YKKmjuj7FxrjBQ1hg\">Spring探索｜既生@Resource，何生@Autowired？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/gRqZwUV791RtCI1xCoV3Qw\">@Autowired注解是如何实现的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/n_syhEFrXykI7ySRtahEmg\">你所不知道的Spring中@Autowired那些实现细节</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2X5xv8I0b6TcXWVH-SC8Ug\">@Autowired的这些骚操作，你都知道吗？</a></li>\n</ul>\n<p><strong>@Inject</strong></p>\n<ol>\n<li>@Inject是JSR330(Dependency Injection for Java)中的规范，需要导入javax.inject.Inject,实现注入。</li>\n<li>@Inject是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合@Named</li>\n<li>@Inject可以作用在变量、setter方法、构造函数上。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Abc</span> abc<span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Inject</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAbc</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Named</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beanName\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Abc</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://mp.weixin.qq.com/s/YLIsRBSiIjz3dCtSA9onDQ\">@Autowired,@Resource,@Inject三个注解的区别</a></p>\n<ol>\n<li>@Autowired是Spring自带的，@Inject和@Resource都是JDK提供的，其中@Inject是JSR330规范实现的，@Resource是JSR250规范实现的，而Spring通过BeanPostProcessor来提供对JDK规范的支持。</li>\n<li>@Autowired、@Inject用法基本一样，不同之处为@Autowired有一个required属性，表示该注入是否是必须的，即如果为必须的，则如果找不到对应的bean，就无法注入，无法创建当前bean。</li>\n<li>@Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的。如在spring-boot-data项目中自动生成的redisTemplate的bean，是需要通过byName来注入的。如果需要注入该默认的，则需要使用@Resource来注入，而不是@Autowired。</li>\n<li>对于@Autowire和@Inject，如果同一类型存在多个bean实例，则需要指定注入的beanName。@Autowired和@Qualifier一起使用，@Inject和@Named一起使用。</li>\n</ol>\n<h3 id=\"Bean的作用域有哪些\"><a href=\"#Bean的作用域有哪些\" class=\"headerlink\" title=\"Bean的作用域有哪些?\"></a>Bean的作用域有哪些?</h3><p>Spring中Bean的作用域通常有下面几种：</p>\n<ul>\n<li><strong>singleton</strong>:IoC容器中只有唯一的bean实例。Spring中的bean默认都是单例的，是对单例设计模式的应用。</li>\n<li><strong>prototype</strong>:每次获取都会创建一个新的bean实例。也就是说，连续<code>getBean()</code>两次，得到的是不同的Bean实例。</li>\n<li><strong>request</strong>（仅Web应用可用）:每一次HTTP请求都会产生一个新的bean（请求bean），该bean仅在当前HTTPrequest内有效。</li>\n<li><strong>session</strong>（仅Web应用可用）:每一次来自新session的HTTP请求都会产生一个新的bean（会话bean），该bean仅在当前HTTPsession内有效。</li>\n<li><strong>application&#x2F;global-session</strong>（仅Web应用可用）：每个Web应用在启动时创建一个Bean（应用Bean），该bean仅在当前应用启动时间内有效。</li>\n<li><strong>websocket</strong>（仅Web应用可用）：每一次WebSocket会话产生一个新的bean。</li>\n</ul>\n<p><strong>如何配置bean的作用域呢？</strong></p>\n<p>xml方式：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>singleton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注解方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_PROTOTYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">personPrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"单例Bean的线程安全问题了解吗？\"><a href=\"#单例Bean的线程安全问题了解吗？\" class=\"headerlink\" title=\"单例Bean的线程安全问题了解吗？\"></a>单例Bean的线程安全问题了解吗？</h3><p>大部分时候我们并没有在项目中使用多线程，所以很少有人会关注这个问题。单例Bean存在线程问题，主要是因为当多个线程操作同一个对象的时候是存在资源竞争的。</p>\n<p>常见的有两种解决办法：</p>\n<ol>\n<li>在Bean中尽量避免定义可变的成员变量。</li>\n<li>在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal中（推荐的一种方式）。</li>\n</ol>\n<p>不过，大部分Bean实际都是无状态（没有实例变量）的（比如Dao、Service），这种情况下，Bean是线程安全的。</p>\n<h3 id=\"Bean的生命周期-详细介绍见下章\"><a href=\"#Bean的生命周期-详细介绍见下章\" class=\"headerlink\" title=\"Bean的生命周期(详细介绍见下章)\"></a>Bean的生命周期(详细介绍见下章)</h3><blockquote>\n<p>下面的内容整理自：<a href=\"https://yemengying.com/2016/07/14/spring-bean-life-cycle/\">https://yemengying.com/2016/07/14/spring-bean-life-cycle/</a>，除了这篇文章，再推荐一篇很不错的文章：<a href=\"https://www.cnblogs.com/zrtqsk/p/3735273.html\">https://www.cnblogs.com/zrtqsk/p/3735273.html</a>。</p>\n</blockquote>\n<ul>\n<li>Bean容器找到配置文件中Spring Bean的定义。</li>\n<li>Bean容器利用Java Reflection API创建一个Bean的实例。</li>\n<li>如果涉及到一些属性值利用set()方法设置一些属性值。</li>\n<li>如果Bean实现了BeanNameAware接口，调用setBeanName()方法，传入Bean的名字。</li>\n<li>如果Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。</li>\n<li>如果Bean实现了BeanFactoryAware接口，调用setBeanFactory()方法，传入BeanFactory对象的实例。</li>\n<li>与上面的类似，如果实现了其他*.Aware接口，就调用相应的方法。</li>\n<li>如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessBeforeInitialization()方法</li>\n<li>如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。</li>\n<li>如果Bean在配置文件中的定义包含init-method属性，执行指定的方法。</li>\n<li>如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessAfterInitialization()方法</li>\n<li>当要销毁Bean的时候，如果Bean实现了DisposableBean接口，执行destroy()方法。</li>\n<li>当要销毁Bean的时候，如果Bean在配置文件中的定义包含destroy-method属性，执行指定的方法。</li>\n</ul>\n<p>图示：<br><img src=\"https://images.xiaozhuanlan.com/photo/2019/24bc2bad3ce28144d60d9e0a2edf6c7f.jpg\" alt=\"Spring Bean生命周期\"></p>\n<p>与之比较类似的中文版本:</p>\n<p><img src=\"https://images.xiaozhuanlan.com/photo/2019/b5d264565657a5395c2781081a7483e1.jpg\" alt=\"Spring Bean生命周期\"></p>\n<h2 id=\"Spring-Bean生命周期\"><a href=\"#Spring-Bean生命周期\" class=\"headerlink\" title=\"Spring Bean生命周期\"></a>Spring Bean生命周期</h2><h3 id=\"一、获取Bean\"><a href=\"#一、获取Bean\" class=\"headerlink\" title=\"一、获取Bean\"></a>一、获取Bean</h3><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPYhVDaaP8cNKOLWfufL5rQXaMa7xPp4N8NAI2162lm2Rrwvl8sibVCjg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h4 id=\"第一阶段获取Bean\"><a href=\"#第一阶段获取Bean\" class=\"headerlink\" title=\"第一阶段获取Bean\"></a>第一阶段获取Bean</h4><p>这里的流程图的入口在<code>AbstractBeanFactory</code>类的<code>doGetBean</code>方法，这里可以配合前面的getBean方法分析文章进行阅读。主要流程就是<br><strong>1、</strong>先处理Bean的名称，因为如果以“&amp;”开头的Bean名称表示获取的是对应的FactoryBean对象<br><strong>2、</strong>从缓存中获取单例Bean，有则进一步判断这个Bean是不是在创建中，如果是的就等待创建完毕，否则直接返回这个Bean对象<br><strong>3、</strong>如果不存在单例Bean缓存，则先进行循环依赖的解析<br><strong>4、</strong>解析完毕之后先获取父类BeanFactory，获取到了则调用父类的getBean方法，不存在则先合并然后创建Bean</p>\n<h3 id=\"二、创建Bean\"><a href=\"#二、创建Bean\" class=\"headerlink\" title=\"二、创建Bean\"></a>二、创建Bean</h3><h4 id=\"2-1-创建Bean之前\"><a href=\"#2-1-创建Bean之前\" class=\"headerlink\" title=\"2.1 创建Bean之前\"></a>2.1 创建Bean之前</h4><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPicgybuOPvUicWBAxrM1rT0PhJeZ1ftRibJGWGYM7P0f5XMga9QCrSlFFQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>在真正创建Bean之前逻辑</strong><br>这个流程图对应的代码在<code>AbstractAutowireCapableBeanFactory</code>类的<code>createBean</code>方法中。<br><strong>1、</strong>这里会先获取<code>RootBeanDefinition</code>对象中的Class对象并确保已经关联了要创建的Bean的Class。<br><strong>2、</strong>这里会检查3个条件<br>（1）Bean的属性中的<code>beforeInstantiationResolved</code>字段是否为true，默认是false。<br>（2）Bean是原生的Bean<br>（3）Bean的<code>hasInstantiationAwareBeanPostProcessors</code>属性为true，这个属性在Spring准备刷新容器BeanPostProcessors的时候会设置，如果当前Bean实现了<code>InstantiationAwareBeanPostProcessor</code>则这个就会是true。</p>\n<p>当三个条件都存在的时候，就会调用实现的<code>InstantiationAwareBeanPostProcessor</code>接口的<code>postProcessBeforeInstantiation</code>方法，然后获取返回的Bean，如果返回的Bean不是null还会调用实现的<code>BeanPostProcessor</code>接口的<code>postProcessAfterInitialization</code>方法，这里用代码说明</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveBeforeInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Object</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//条件1</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>beforeInstantiationResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//条件2跟条件3</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetType <span class=\"token operator\">=</span> <span class=\"token function\">determineTargetType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//调用实现的postProcessBeforeInstantiation方法</span>\n                    bean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsBeforeInstantiation</span><span class=\"token punctuation\">(</span>targetType<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                       <span class=\"token comment\">//调用实现的postProcessAfterInitialization方法</span>\n                        bean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsAfterInitialization</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//不满足2或者3的时候就会设置为false</span>\n            mbd<span class=\"token punctuation\">.</span>beforeInstantiationResolved <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3、</strong>如果上面3个条件其中一个不满足就不会调用实现的方法。默认这里都不会调用的这些<code>BeanPostProcessors</code>的实现方法。然后继续执行后面的<code>doCreateBean</code>方法。</p>\n<h4 id=\"2-2-真正的创建Bean，doCreateBean\"><a href=\"#2-2-真正的创建Bean，doCreateBean\" class=\"headerlink\" title=\"2.2 真正的创建Bean，doCreateBean\"></a>2.2 真正的创建Bean，doCreateBean</h4><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPIhTibribNrjwS7O5fH8doMAibkvl5icWLeq16ibP52JcxspfB8nDtyMhKQA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p><strong>doCreateBean方法逻辑</strong><br>这个代码的实现还是在<code>AbstractAutowireCapableBeanFactory</code>方法中。流程是<br><strong>1、</strong>先检查<code>instanceWrapper</code>变量是不是null，这里一般是null，除非当前正在创建的Bean在<code>factoryBeanInstanceCache</code>中存在这个是保存还没创建完成的FactoryBean的集合。<br><strong>2、</strong>调用createBeanInstance方法实例化Bean，这个方法在后面会讲解<br><strong>3、</strong>如果当前<code>RootBeanDefinition</code>对象还没有调用过实现了的<code>MergedBeanDefinitionPostProcessor</code>接口的方法，则会进行调用。<br><strong>4</strong>、当满足以下三点<br>（1）是单例Bean<br>（2）尝试解析bean之间的循环引用<br>（3）bean目前正在创建中<br>则会进一步检查是否实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口如果实现了则调用是实现的<code>getEarlyBeanReference</code>方法<br><strong>5、</strong>调用<code>populateBean</code>方法进行属性填充，这里后面会讲解<br><strong>6、</strong>调用<code>initializeBean</code>方法对Bean进行初始化，这里后面会讲解</p>\n<h5 id=\"2-2-1-实例化Bean，createBeanInstance\"><a href=\"#2-2-1-实例化Bean，createBeanInstance\" class=\"headerlink\" title=\"2.2.1 实例化Bean，createBeanInstance\"></a>2.2.1 实例化Bean，createBeanInstance</h5><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpP4WkTkskaiaq1XKqJAEKWhLeNicuTJSsicuK7licC9doicxAbdr01YF0taQg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>实例化Bean</strong></p>\n<p>这里的逻辑稍微有一点复杂，这个流程图已经是简化过后的了。简要根据代码说明一下流程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">BeanWrapper</span> <span class=\"token function\">createBeanInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//步骤1</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass <span class=\"token operator\">=</span> <span class=\"token function\">resolveBeanClass</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanClass <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isNonPublicAccessAllowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCreationException</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Bean class isn't public, and non-public access not allowed: \"</span> <span class=\"token operator\">+</span> beanClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤2</span>\n    <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> instanceSupplier <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getInstanceSupplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instanceSupplier <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">obtainFromSupplier</span><span class=\"token punctuation\">(</span>instanceSupplier<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤3</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getFactoryMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">instantiateUsingFactoryMethod</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">boolean</span> resolved <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> autowireNecessary <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>constructorArgumentLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>resolvedConstructorOrFactoryMethod <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resolved <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                autowireNecessary <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span>constructorArgumentsResolved<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤4.1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>autowireNecessary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">autowireConstructor</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">instantiateBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">//步骤4.2</span>\n    <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ctors <span class=\"token operator\">=</span> <span class=\"token function\">determineConstructorsFromBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctors <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_CONSTRUCTOR</span> <span class=\"token operator\">||</span>\n            mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">autowireConstructor</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> ctors<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤5</span>\n    ctors <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPreferredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctors <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">autowireConstructor</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> ctors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">instantiateBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、</strong>先检查Class是否已经关联了，并且对应的修饰符是否是public的<br><strong>2、</strong>如果用户定义了Bean实例化的函数，则调用并返回<br><strong>3、</strong>如果当前Bean实现了<code>FactoryBean</code>接口则调用对应的<code>FactoryBean</code>接口的<code>getObject</code>方法<br><strong>4、</strong>根据getBean时候是否传入构造参数进行处理<br><strong>4.1</strong>如果没有传入构造参数，则检查是否存在已经缓存的无参构造器，有则使用构造器直接创建，没有就会调用<code>instantiateBean</code>方法先获取实例化的策略默认是<code>CglibSubclassingInstantiationStrategy</code>，然后实例化Bean。最后返回<br><strong>4.2</strong>如果传入了构造参数，则会先检查是否实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口，如果实现了会调用<code>determineCandidateConstructors</code>获取返回的候选构造器。<br><strong>4.3</strong>检查4个条件是否满足一个<br>（1）构造器不为null，<br>（2）从RootBeanDefinition中获取到的关联的注入方式是构造器注入（没有构造参数就是setter注入，有则是构造器注入）<br>（3）含有构造参数<br>（4）getBean方法传入构造参数不是空<br>满足其中一个则会调用返回的候选构造器实例化Bean并返回，如果都不满足，则会根据构造参数选则合适的有参构造器然后实例化Bean并返回<br><strong>5、</strong>如果上面都没有合适的构造器，则直接使用无参构造器创建并返回Bean。</p>\n<h5 id=\"2-2-2-填充Bean，populateBean\"><a href=\"#2-2-2-填充Bean，populateBean\" class=\"headerlink\" title=\"2.2.2 填充Bean，populateBean\"></a>2.2.2 填充Bean，populateBean</h5><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPRaNrWofKRqgPdvMFQn03uicb2NmqJCHcRzncyuoobJ7alPiaOpVPGR8g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>填充Bean</strong><br>这里还是根据代码来说一下流程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">populateBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">BeanWrapper</span> bw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bw <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCreationException</span><span class=\"token punctuation\">(</span>\n                    mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cannot apply property values to null instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Skip property population phase for null instance.</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">boolean</span> continueWithPropertyPopulation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//步骤1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    continueWithPropertyPopulation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>continueWithPropertyPopulation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤2--------------------</span>\n    <span class=\"token class-name\">PropertyValues</span> pvs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> resolvedAutowireMode <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_NAME</span> <span class=\"token operator\">||</span> resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_TYPE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">MutablePropertyValues</span> newPvs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Add property values based on autowire by name if applicable.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_NAME</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autowireByName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> newPvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Add property values based on autowire by type if applicable.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_TYPE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autowireByType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> newPvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        pvs <span class=\"token operator\">=</span> newPvs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">boolean</span> hasInstAwareBpps <span class=\"token operator\">=</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> needsDepCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getDependencyCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">AbstractBeanDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEPENDENCY_CHECK_NONE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">PropertyDescriptor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filteredPds <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//步骤3</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasInstAwareBpps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pvs <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">PropertyValues</span> pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        filteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessPropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                pvs <span class=\"token operator\">=</span> pvsToUse<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needsDepCheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            filteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">checkDependencies</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span> pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤4</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvs <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">applyPropertyValues</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、</strong>检查当前Bean是否实现了<code>InstantiationAwareBeanPostProcessor</code>的<code>postProcessAfterInstantiation</code>方法则调用，并结束Bean的填充。<br><strong>2、</strong>将按照类型跟按照名称注入的Bean分开，如果注入的Bean还没有实例化的这里会实例化，然后放到<code>PropertyValues</code>对象中。<br><strong>3、</strong>如果实现了<code>InstantiationAwareBeanPostProcessor</code>类的<code>postProcessProperties</code>则调用这个方法并获取返回值，如果返回值是null，则有可能是实现了过期的<code>postProcessPropertyValues</code>方法，这里需要进一步调用<code>postProcessPropertyValues</code>方法<br><strong>4、</strong>进行参数填充</p>\n<h5 id=\"2-2-3-初始化Bean，initializeBean\"><a href=\"#2-2-3-初始化Bean，initializeBean\" class=\"headerlink\" title=\"2.2.3 初始化Bean，initializeBean\"></a>2.2.3 初始化Bean，initializeBean</h5><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPZjJibwdUibfEibHoFzlWI6yFbIlaG2EvckACOCY5mneiaibpOZfZrtQICibw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>初始化Bean</strong><br>同时这里根据代码跟流程图来说明</p>\n<p><strong>1、</strong>如果Bean实现了<code>BeanNameAware</code>,<code>BeanClassLoaderAware</code>,<code>BeanFactoryAware</code>则调用对应实现的方法。<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization</code>则会调用实现的<code>postProcessBeforeInitialization</code>方法。在<code>ApplicationContextAwareProcessor</code>类中实现了<code>postProcessBeforeInitialization</code>方法。而这个类会在Spring刷新容器准备<code>beanFactory</code>的时候会加进去，这里就会被调用，而调用里面会检查Bean是不是<code>EnvironmentAware</code>,<code>EmbeddedValueResolverAware</code>,<code>ResourceLoaderAware</code>,<code>ApplicationEventPublisherAware</code>,<code>MessageSourceAware</code>,<code>ApplicationContextAware</code>的实现类。这里就会调用对应的实现方法。代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationContextAwareProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EnvironmentAware</span> <span class=\"token operator\">||</span> bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EmbeddedValueResolverAware</span> <span class=\"token operator\">||</span>\n            bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ResourceLoaderAware</span> <span class=\"token operator\">||</span> bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ApplicationEventPublisherAware</span> <span class=\"token operator\">||</span>\n            bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageSourceAware</span> <span class=\"token operator\">||</span> bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">AccessControlContext</span> acc <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        acc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">invokeAwareInterfaces</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">invokeAwareInterfaces</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、</strong>实例化Bean然后，检查是否实现了<code>InitializingBean</code>的<code>afterPropertiesSet</code>方法，如果实现了就会调用<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization</code>则会调用实现的<code>postProcessAfterInitialization</code>方法。</p>\n<p>到此创建Bean的流程就没了，剩下的就是容器销毁的时候的了</p>\n<h3 id=\"三、destory方法跟销毁Bean\"><a href=\"#三、destory方法跟销毁Bean\" class=\"headerlink\" title=\"三、destory方法跟销毁Bean\"></a>三、destory方法跟销毁Bean</h3><p>Bean在创建完毕之后会检查用户是否指定了<code>destroyMethodName</code>以及是否实现了<code>DestructionAwareBeanPostProcessor</code>接口的<code>requiresDestruction</code>方法，如果指定了会记录下来保存在<code>DisposableBeanAdapter</code>对象中并保存在bean的<code>disposableBeans</code>属性中。代码在<code>AbstractBeanFactory</code>的<code>registerDisposableBeanIfNecessary</code>中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDisposableBeanIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n                <span class=\"token function\">registerDisposableBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> postProcessors<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">AccessControlContext</span> acc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token class-name\">String</span> destroyMethodName <span class=\"token operator\">=</span> <span class=\"token function\">inferDestroyMethodIfNecessary</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>destroyMethodName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>destroyMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token operator\">!</span>beanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedDestroyMethod</span><span class=\"token punctuation\">(</span>destroyMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroyMethod <span class=\"token operator\">=</span> destroyMethod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors <span class=\"token operator\">=</span> <span class=\"token function\">filterPostProcessors</span><span class=\"token punctuation\">(</span>postProcessors<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在销毁Bean的时候最后都会调用<code>AbstractAutowireCapableBeanFactory</code>的<code>destroyBean</code>方法。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroyBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> existingBean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span>existingBean<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里是创建一个<code>DisposableBeanAdapter</code>对象，这个对象实现了Runnable接口，在实现的<code>run</code>方法中会调用实现的<code>DisposableBean</code>接口的<code>destroy</code>方法。并且在创建<code>DisposableBeanAdapter</code>对象的时候会根据传入的bean是否实现了<code>DisposableBean</code>接口来设置<code>invokeDisposableBean</code>变量，这个变量表实有没有实现<code>DisposableBean</code>接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> postProcessors<span class=\"token punctuation\">,</span><span class=\"token class-name\">AccessControlContext</span> acc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Disposable bean must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//根据传入的bean是否实现了`DisposableBean`接口来设置`invokeDisposableBean`变量</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nonPublicAccessAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors <span class=\"token operator\">=</span> <span class=\"token function\">filterPostProcessors</span><span class=\"token punctuation\">(</span>postProcessors<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">//根据invokeDisposableBean决定是否调用destroy方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoking destroy() on bean with name '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedExceptionAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Invocation of destroy method failed on bean with name '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"四、Bean的初始化和销毁的几种方式\"><a href=\"#四、Bean的初始化和销毁的几种方式\" class=\"headerlink\" title=\"四、Bean的初始化和销毁的几种方式\"></a>四、Bean的初始化和销毁的几种方式</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ul>\n<li>实现InitializingBean接口,覆盖其中的afterPropertiesSet()方法</li>\n<li>增加@PostConstruct注解</li>\n<li>自定义init方法(@Bean(initMethod &#x3D; “initMethod”))<br>执行的顺序依次是postConstruct,afterPropertiesSet,initMethod</li>\n</ul>\n<h4 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h4><ul>\n<li>实现org.springframework.beans.factory.DisposableBean接口，覆盖destroy()方法</li>\n<li>自定义一个方法，在方法上面增加@PreDestroy注解</li>\n<li>在InitServiceImpl中增加一个自定义销毁方法，然后在配置类中增加Bean的destoryMethod<br>执行的顺序依次是preDestroy,destroy,destroyMethod</li>\n</ul>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>最后来一个大的流程</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPQu4pzSyprviaBic07GicVGPvAUdAibkFqybnvOfgdzdw1M1iaMtm9qfBLDQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>实例化前的准备阶段</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPic9W1CbpBia73nS2WJAGKRMdW9LtwbxG30IqbNT8ibvH5DfqcHO2IueBw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>实例化前</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPp3ia71rKnC0FeypESdhAFYAqGicz9KP9LeBxaJHKmvMPUDIGrBdBkBiag/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>实例化后</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPjfQ5qaic2Ro6hoqhCdoicgiabmkibR518z7vSpXxmibq91FH1XxgHvdet8Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>初始化前</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPABU277ApFU3EVr8iaHxtFEVvsawgghYyJd7WlJQFwEkQvXoDW2sQEYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>初始化后&amp;销毁</p>\n<h2 id=\"Bean的扩展接口\"><a href=\"#Bean的扩展接口\" class=\"headerlink\" title=\"Bean的扩展接口\"></a>Bean的扩展接口</h2><h3 id=\"初始化bean的顺序\"><a href=\"#初始化bean的顺序\" class=\"headerlink\" title=\"初始化bean的顺序\"></a>初始化bean的顺序</h3><p>在将一个Bean对象配置在IOC容器中之后，这个Bean的生命周期就会交由IOC容器进行管理。一般担当管理者的角色是BeanFactory或ApplicationContext。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. Bean的创建\n在解析IOC容器时，根据解析容器的工厂，决定bean的初始化时间\nBeanFactory-getBean()方法调用时初始化bean\nApplicationContext-解析ioc容器时初始化bean\n2. 注入\n根据Bean子元素的配置实现Bean之间的被动注入\n3. BeanNameAware\n如果Bean实现了该接口，执行其setBeanName(String name)方法.参数name是Bean在容器中的名称,即XML里面Bean的id名称\n4. BeanFactoryAware\n如果实现了该接口，执行其setBeanFactory(BeanFactory factory)方法，参数是创建Bean的BeanFactory本身\n5. ApplicationContextAware\n如果这个Bean已经实现了该接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）\nimport org.springframework.beans.context.ApplicationContextAware\n&#x2F;&#x2F; 当需要从Spring容器中获取Bean时一般使用这种方式获取\nApplicationContext appContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext-common.xml&quot;);\nAbcService abcService &#x3D; (AbcService)appContext.getBean(&quot;abcService&quot;);\n&#x2F;&#x2F; 但是这样就会存在一个问题：因为它会重新装载applicationContext-common.xml并实例化上下文Bean，如果有些线程配置类也是在这个配置文件中，那么会造成做相同工作的的线程会被启两次。一次是web容器初始化时启动，另一次是上述代码显示的实例化了一次。当于重新初始化一遍！这样就产生了冗余,所以可以通过实现ApplicationContextAware接口获取Bean,当一个类实现了这个接口（ApplicationContextAware）之后，这个类就可以方便获得ApplicationContext中的所有Bean。换句话说，就是这个类可以直接获取Spring配置文件中，所有有引用到的Bean对象\n\nprivate static ApplicationContext applicationContext;\n \t@Override\n    public void setApplicationContext(ApplicationContext arg0) throws BeansException &#123;\n        applicationContext &#x3D; arg0;\n    &#125;\n&#125;\n&#x2F;&#x2F; 注意：从ApplicationContextAware获取ApplicationContext上下文的情况，仅仅适用于当前运行的代码和已启动的Spring代码处于同一个Spring上下文，否则获取到的ApplicationContext是空的\n\n6. BeanPostProcessor (前置方法)\nIOC容器中如果有Bean实现了该接口，那所有的Bean在初始化之前都会执行其实例的postProcessBeforeInitialization(Object bean, String beanName)前置方法，BeanPostProcessor经常被用作是Bean内容的更改,该方法最后返回Bean\n7. @PostConstruct修饰的非静态方法\n8. InitializingBean\n如果实现了该接口，则允许一个Bean在它的所有必须属性被BeanFactory设置后，来执行初始化的工作，会自动调用afterPropertiesSet()方法对Bean进行初始化，实现此接口的话正常情况下配置文件就不用指定init-method属性了。\n9. 如果Bean在Spring中配置了init-method属性，调用init-method属性指向的方法,此时完成Bean的初始化\n10. BeanPostProcessor(后置方法)\nIOC容器中如果有Bean实现了接口，那所有的Bean在初始化之后都会执行其实例的postProcessAfterInitialization(Object bean, String beanName)后置方法\n11. 实现SmartInitializingSingleton的接口后，当所有单例Bean都初始化完成以后，Spring的IOC容器会回调该接口的afterSingletonsInstantiated()方法,主要应用场合就是在所有单例Bean创建完成之后，可以在该回调中做一些事情。执行时机在ApplicationContextAware执行之后\n12. @PreDestroy修饰的方法\n13. IOC容器关闭时，如果Bean实现了DisposableBean接口，则执行其destory()方法，在Bean生命周期结束前调用destory()方法做一些收尾工作,重写destroy()方法\n14. 如果这个Bean在Spring配置了destroy-method属性，执行destory-method属性指向的方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/blog/images/bean.png\"></p>\n<p><strong>简单来说一个Bean的加载顺序：类构造方法 - postProcessBeforeInitialization前置方法 - @PostConstruct注解的方法 - InitializingBean的afterPropertiesSet()方法- XML中定义的bean init-method方法 - postProcessAfterInitialization后置方法</strong></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/l0O3C_UiO3CdfNE2V73qmA\">Spring Boot启动扩展点超详细总结，再也不怕面试官问了</a></li>\n</ul>\n<h3 id=\"BeanFactoryPostProcessor、BeanPostProcessor区别\"><a href=\"#BeanFactoryPostProcessor、BeanPostProcessor区别\" class=\"headerlink\" title=\"BeanFactoryPostProcessor、BeanPostProcessor区别\"></a>BeanFactoryPostProcessor、BeanPostProcessor区别</h3><p>BeanFactoryPostProcessor：针对bean工厂，BeanFactory后置处理器，是对BeanDefinition对象进行修改，可以修改BeanDefinition对象中的属性。（BeanDefinition：存储bean标签的信息，用来生成bean实例）,BeanFactoryPostProcessor接口是针对bean容器的，它的实现类可以在当前BeanFactory初始化（spring容器加载bean定义文件）后，bean实例化之前修改bean的定义属性，达到影响之后实例化bean的效果。也就是说，Spring允许BeanFactoryPostProcessor在容器实例化任何其它bean之前读取配置元数据，并可以根据需要进行修改，例如可以把bean的scope从singleton改为prototype，也可以把property的值给修改掉。可以同时配置多个BeanFactoryPostProcessor，并通过设置’order’属性来控制各个BeanFactoryPostProcessor的执行次序.<br>BeanPostProcessor：针对bean,Bean后置处理器，是对生成的Bean对象进行修改。BeanPostProcessor能在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。初始化方法包括以下两种：</p>\n<ol>\n<li>实现InitializingBean接口的bean，对应方法为afterPropertiesSet</li>\n<li>xml定义中，通过init-method设置的方法,BeanPostProcessor是BeanFactoryPostProcessor之后执行的。</li>\n</ol>\n<h3 id=\"BeanFactroy、ApplicationContext区别\"><a href=\"#BeanFactroy、ApplicationContext区别\" class=\"headerlink\" title=\"BeanFactroy、ApplicationContext区别\"></a>BeanFactroy、ApplicationContext区别</h3><ol>\n<li>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化，这样，我们就不能发现一些存在的Spring的配置问题。而ApplicationContext则相反，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误。相对于基本的BeanFactory，ApplicationContext唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。BeanFacotry延迟加载,如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常；而ApplicationContext则在初始化自身是检验，这样有利于检查所依赖属性是否注入；所以通常情况下我们选择使用ApplicationContext。应用上下文则会在上下文启动后预载入所有的单实例Bean。通过预载入单实例bean,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</li>\n<li>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。（Applicationcontext比beanFactory加入了一些更好使用的功能。而且beanFactory的许多功能需要通过编程实现而Applicationcontext可以通过配置实现。比如后处理bean，Applicationcontext直接配置在配置文件即可而beanFactory这要在代码中显示的写出来才可以被容器识别。）</li>\n<li>beanFactory主要是面对与spring框架的基础设施，面对spring自己。而Applicationcontex主要面对与spring使用的开发者。基本都会使用Applicationcontex并非beanFactory。<br><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493943&idx=1&sn=9eaa46ed730874fce003c66f76fe9c7f&source=41#wechat_redirect\">Spring系列之beanFactory与ApplicationContext</a></li>\n</ol>\n<h3 id=\"BeanFactory和FactoryBean的区别\"><a href=\"#BeanFactory和FactoryBean的区别\" class=\"headerlink\" title=\"BeanFactory和FactoryBean的区别\"></a>BeanFactory和FactoryBean的区别</h3><p>BeanFactory是Spring容器的顶级接口，给具体的IOC容器的实现提供了规范。<br>FactoryBean也是接口，为IOC容器中Bean的实现提供了更加灵活的方式，FactoryBean在IOC容器的基础上给Bean的实现加上了⼀个简单工厂模式和装饰模式,我们可以在getObject()方法中灵活配置。其实在Spring源码中有很多FactoryBean的实现类。<br>区别：BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是⼀个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</p>\n<h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><p>BeanFactory，以Factory结尾，表示它是⼀个工厂类(接口)，它负责生产和管理bean的⼀个工厂。在Spring中，BeanFactory是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。<br>BeanFactory只是个接口，并不是IOC容器的具体实现，但是Spring容器给出了很多种实现，如DefaultListableBeanFactory、XmlBeanFactory、ApplicationContext等，其中XmlBeanFactory就是常用的⼀个，该实现将以XML方式描述组成应用的对象及对象间的依赖关系。XmlBeanFactory类将持有此XML配置元数据，并用它来构建⼀个完全可配置的系统或应用。都是附加了某种功能的实现。它为其他具体的IOC容器提供了最基本的规范，例如DefaultListableBeanFactory,XmlBeanFactory,ApplicationContext等具体的容器都是实现了BeanFactory，再在其基础之上附加了其他的功能。<br>BeanFactory和ApplicationContext就是Spring框架的两个IOC容器，现在⼀般使用ApplicationnContext，其不但包含了BeanFactory的作用，同时还进行更多的扩展。<br>BeanFacotry是Spring中比较原始的Factory。如XMLBeanFactory就是⼀种典型的BeanFactory。原始的BeanFactory无法⽀持Spring的许多插件，如AOP功能、Web应用等。ApplicationContext接口,它由BeanFactory接口派生而来，ApplicationContext包含BeanFactory的所有功能，通常建议比BeanFactory优先，ApplicationContext以⼀种更面向框架的方式工作以及对上下文进行分层和实现继承，ApplicationContext包还提供了以下的功能：<br>MessageSource,提供国际化的消息访问<br>资源访问，如URL和⽂件<br>事件传播<br>载入多个（有继承关系）上下文，使得每⼀个上下文都专注于⼀个特定的层次，比如应⽤的web层;<br>BeanFactory提供的方法及其简单，仅提供了六种方法供客户调用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 判断⼯⼚中是否包含给定名称的bean定义，若有则返回true</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回给定名称注册的bean实例。根据bean的配置情况，如果是singleton模式将返回⼀个共享实例，否则将返回⼀个新建的实例，如果没有找到指定bean,该⽅法可能会抛出异常</span>\n<span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回以给定名称注册的bean实例，并转换为给定class类型</span>\n<span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回给定名称的bean的Class,如果没有找到指定的bean实例，则排除NoSuchBeanDefinitionException异常</span>\n<span class=\"token class-name\">Class</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 判断给定名称的bean定义是否为单例模式</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回给定bean名称的所有别名</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h4><p>⼀般情况下，Spring通过反射机制利用&lt;bean&gt;&lt;bean&gt;的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在&lt;bean&gt;&lt;bean&gt;中提供大量的配置信息。配置⽅式的灵活性是受限的，这时采用编码的方式可能会得到⼀个简单的方案。<br>Spring为此提供了⼀个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接⼝定制实例化Bean的逻辑。FactoryBean接口对于Spring框架来说占重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化⼀些复杂Bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始⽀持泛型，即接口声明改为FactoryBean&lt;T&gt;的形式,以Bean结尾，表示它是⼀个Bean，不同于普通Bean的是：它是实现了FactoryBean&lt;T&gt;接口的Bean，根据该Bean的ID从BeanFactory中获取的实际上是FactoryBean的getObject()返回的对象，而不是FactoryBean本身，如果要获取FactoryBean对象，请在id前面加⼀个&amp;符号来获取。<br>例如自己实现⼀个FactoryBean，功能：用来代理⼀个对象，对该对象的所有方法做⼀个拦截，在调用前后都输出⼀行LOG，模仿ProxyFactoryBean的功能。FactoryBean是⼀个接口，当在IOC容器中的Bean实现了FactoryBean后，通过getBean(StringBeanName)获取到的Bean对象并不是FactoryBean的实现类对象，而是这个实现类中的getObject()方法返回的对象。要想获取FactoryBean的实现类，就要getBean(&amp;BeanName)，在BeanName之前加上&amp;。<br>在该接口中还定义了以下3个⽅法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 返回由FactoryBean创建的Bean实例，如果isSingleton()返回true，则该实例会放到Spring容器中单实例缓存池中；</span>\n<span class=\"token class-name\">T</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回由FactoryBean创建的Bean实例的作⽤域是singleton还是prototype；</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回FactoryBean创建的Bean类型。当配置⽂件中&lt;bean>的class属性配置的实现类是FactoryBean时，通过getBean()⽅法返回的不是FactoryBean本身，⽽是FactoryBean#getObject()⽅法所返回的对象，相当于FactoryBean#getObject()代理了getBean()⽅法。</span>\n<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>总结</strong><br>BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是⼀个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似</p>\n<h3 id=\"Bean的调用\"><a href=\"#Bean的调用\" class=\"headerlink\" title=\"Bean的调用\"></a>Bean的调用</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 1、使用BeanWrapper</span>\n<span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BeanWrapper</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanWrapperImpl</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbw<span class=\"token punctuation\">.</span><span class=\"token function\">setPropertyvalue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyCalue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2、使用BeanFactory</span>\n<span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">XmlBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3、使用ApplicationContext</span>\n<span class=\"token class-name\">ApplicationContext</span> actx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FleSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> actx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s/BW3khRkQwjBsXw7yJhCyXQ\">Spring中获取Bean的八种方式</a></p>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/I8tsf7cFXkHX1pUp7SPByw\">11张流程图帮你搞定Spring Bean生命周期</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/5hAt9_KyyqHy7zzOjZ9LyQ\">面试官：说说Spring Bean的实例化过程？面试必问的！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_je69-0J72X5YMCrS-92MQ\">你知道Spring lazy-init懒加载的原理吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/brlEwyKhwhSkljHLL1zmBA\">如何自己实现一个简单的Spring Bean容器</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AuTnuxIQDPFbuslDz9ffVg\">实力总结四类Bean注入Spring的方式</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494432&amp;idx=1&amp;sn=3acc7e7bf31c6d1f56ad830d6eb1ec41&amp;source=41#wechat_redirect\">关于Spring注入方式的几道面试题，你能答上么</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/u1DcCsRrrHYFOVykwW4Dcg\">最全的Spring依赖注入方式，你都会了吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fVV6dYh0DQOoDiXwLR5miw\">Spring官方为什么建议构造器注入？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/g9iRu1slTMx0dwYJiy2m7w\">Bean放入Spring容器，你知道几种方式？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/i0Y-p7mda5FJCWCMJ8msdg\">Spring注入Bean的7种方式，还有谁不会？？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6CwABJAePAT6hzTmfk7Jjg\">Spring注解@Bean和@Component的区别,你知道吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/lyH72PRAGcR2-aQvMZ1jPA\">@Bean与@Component用在同一个类上，会怎么样？</a></li>\n</ul>\n","more":"<h2 id=\"Spring-IoC\"><a href=\"#Spring-IoC\" class=\"headerlink\" title=\"Spring IoC\"></a>Spring IoC</h2><h3 id=\"谈谈自己对于Spring-IoC的了解\"><a href=\"#谈谈自己对于Spring-IoC的了解\" class=\"headerlink\" title=\"谈谈自己对于Spring IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3><p><strong>IoC（InversionofControl:控制反转）</strong>是一种设计思想，而不是一个具体的技术实现。IoC的思想就是将原本在程序中手动创建对象的控制权，交由Spring框架来管理。不过，IoC并非Spring特有，在其他语言中也有应用。</p>\n<p><strong>为什么叫控制反转？</strong></p>\n<ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权力</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/frc-365faceb5697f04f31399937c059c162.png\" alt=\"img\"></p>\n<p>将对象之间的相互依赖关系交给IoC容器来管理，并由IoC容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IoC容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件&#x2F;注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<p>在实际项目中一个Service类可能依赖了很多其他的类，假如我们需要实例化这个Service，你可能要每次都要搞清这个Service所有底层类的构造函数，这可能会把人逼疯。如果利用IoC的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p>\n<p>在Spring中，IoC容器是Spring用来实现IoC的载体，IoC容器实际上就是个Map（key，value），Map中存放的是各种对象。</p>\n<p>Spring时代我们一般通过XML文件来配置Bean，后来开发人员觉得XML文件来配置不太好，于是SpringBoot注解配置就慢慢开始流行起来。</p>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"https://javadoop.com/post/spring-ioc\">IoC源码阅读</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486938&idx=1&sn=c99ef0233f39a5ffc1b98c81e02dfcd4&chksm=cea24211f9d5cb07fa901183ba4d96187820713a72387788408040822ffb2ed575d28e953ce7&token=1736772241&lang=zh_CN#rd\">面试被问了几百遍的IoC和AOP，还在傻傻搞不清楚？</a></li>\n</ul>\n<h3 id=\"什么是Spring-Bean？\"><a href=\"#什么是Spring-Bean？\" class=\"headerlink\" title=\"什么是Spring Bean？\"></a>什么是Spring Bean？</h3><p>简单来说，Bean代指的就是那些被IoC容器所管理的对象。</p>\n<p>我们需要告诉IoC容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是XML文件、注解或者Java配置类。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- Constructor-arg with 'value' attribute --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下图简单地展示了IoC容器如何使用配置元数据来管理对象。</p>\n<p><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/062b422bd7ac4d53afd28fb74b2bc94d.png\" alt=\"img\"></p>\n<p><strong>org.springframework.beans</strong>和<strong>org.springframework.context</strong>这两个包是IoC实现的基础，如果想要研究IoC相关的源码的话，可以去看看</p>\n<h3 id=\"将一个类声明为Bean的注解有哪些\"><a href=\"#将一个类声明为Bean的注解有哪些\" class=\"headerlink\" title=\"将一个类声明为Bean的注解有哪些?\"></a>将一个类声明为Bean的注解有哪些?</h3><ul>\n<li>@Component：通用的注解，可标注任意类为Spring组件。如果一个Bean不知道属于哪个层，可以使用@Component注解标注。</li>\n<li>@Repository:对应持久层即Dao层，主要用于数据库相关操作。</li>\n<li>@Service:对应服务层，主要涉及一些复杂的逻辑，需要用到Dao层。</li>\n<li>@Controller:对应SpringMVC控制层，主要用于接受用户请求并调用Service层返回数据给前端页面。</li>\n</ul>\n<h3 id=\"Component和-Bean的区别是什么？\"><a href=\"#Component和-Bean的区别是什么？\" class=\"headerlink\" title=\"@Component和@Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3><ul>\n<li>@Component注解作用于类，而@Bean注解作用于方法。</li>\n<li>@Component通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中（我们可以使用@ComponentScan注解定义要扫描的路径从中找出标识了需要装配的类自动装配到Spring的bean容器中）。@Bean注解通常是我们在标有该注解的方法中定义产生这个bean,@Bean告诉了Spring这是某个类的实例，当我需要用它的时候还给我。</li>\n<li>@Bean注解比@Component注解的自定义性更强，而且很多地方我们只能通过@Bean注解来注册bean。比如当我们引用第三方库中的类需要装配到Spring容器时，则只能通过@Bean来实现。</li>\n</ul>\n<p>@Bean注解使用示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TransferService</span> <span class=\"token function\">transferService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransferServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码相当于下面的xml配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transferService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.acme.TransferServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>下面这个例子是通过@Component无法实现的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">OneService</span> <span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n        when <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">serviceImpl1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        when <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">serviceImpl2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        when <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">serviceImpl3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注入Bean的注解有哪些？\"><a href=\"#注入Bean的注解有哪些？\" class=\"headerlink\" title=\"注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3><p>Spring内置的@Autowired以及JDK内置的@Resource和@Inject都可以用于注入Bean。</p>\n<table>\n<thead>\n<tr>\n<th>Annotaion</th>\n<th>Package</th>\n<th>Source</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Autowired</td>\n<td>org.springframework.bean.factory</td>\n<td>Spring 2.5+</td>\n</tr>\n<tr>\n<td>@Resource</td>\n<td>javax.annotation</td>\n<td>Java JSR-250</td>\n</tr>\n<tr>\n<td>@Inject</td>\n<td>javax.inject</td>\n<td>Java JSR-330</td>\n</tr>\n</tbody></table>\n<p>@Autowired和@Resource使用的比较多一些。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a href=\"#Autowired和-Resource的区别是什么？\" class=\"headerlink\" title=\"@Autowired和@Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3><p>Autowired属于Spring内置的注解，默认的注入方式为byType（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入Bean（接口的实现类）。</p>\n<p><strong>这会有什么问题呢？</strong>当一个接口存在多个实现类的话，byType这种方式就无法正确注入对象了,因为这个时候Spring会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。</p>\n<p>这种情况下，注入方式会变为byName（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的smsService就是我这里所说的名称，这样应该比较好理解了吧。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// smsService就是我们上面所说的名称</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>举个例子，SmsService接口有两个实现类:SmsServiceImpl1和SmsServiceImpl2，且它们都已经被Spring容器所管理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 报错，byName和byType都无法匹配到bean</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsServiceImpl1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean</span>\n<span class=\"token comment\">// smsServiceImpl1就是我们上面所说的名称</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"smsServiceImpl1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们还是建议通过@Qualifier注解来显式指定名称而不是依赖变量的名称。</p>\n<p>@Resource属于JDK提供的注解，默认注入方式为byName。如果无法通过名称匹配到对应的Bean的话，注入方式会变为byType。</p>\n<p>@Resource有两个比较重要且日常开发常用的属性：name（名称）、type（类型）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Resource</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果仅指定<code>name</code>属性则注入方式为<code>byName</code>，如果仅指定<code>type</code>属性则注入方式为<code>byType</code>，如果同时指定<code>name</code>和<code>type</code>属性（不建议这么做）则注入方式为<code>byType</code>+<code>byName</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 报错，byName和byType都无法匹配到bean</span>\n<span class=\"token annotation punctuation\">@Resource</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean</span>\n<span class=\"token annotation punctuation\">@Resource</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsServiceImpl1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 正确注入SmsServiceImpl1对象对应的bean（比较推荐这种方式）</span>\n<span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"smsServiceImpl1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SmsService</span> smsService<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单总结一下：</p>\n<ul>\n<li>@Autowired是Spring提供的注解，@Resource是JDK提供的注解。</li>\n<li>Autowired默认的注入方式为byType（根据类型进行匹配），@Resource默认注入方式为byName（根据名称进行匹配）。</li>\n<li>当一个接口存在多个实现类的情况下，@Autowired和@Resource都需要通过名称才能正确匹配到对应的Bean。Autowired可以通过@Qualifier注解来显式指定名称，@Resource可以通过name属性来显式指定名称。</li>\n</ul>\n<p><strong>@Autowired和@Resource区别</strong>😊</p>\n<ol>\n<li>@Autowired与@Resource都可以用来装配bean,都可以写在字段上,或写在setter方法上。</li>\n<li>@Autowired默认按类型装配（这个注解是属于spring的）,默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required&#x3D;false)，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Qualifier</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"baseDao\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BaseDao</span> baseDao<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</li>\n<li>@Autowired只按照byType注入,由Spring提供，@Resource默认按byName自动注入，也提供按照byType注入</li>\n</ol>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/MZX97YKKmjuj7FxrjBQ1hg\">Spring探索｜既生@Resource，何生@Autowired？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/gRqZwUV791RtCI1xCoV3Qw\">@Autowired注解是如何实现的？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/n_syhEFrXykI7ySRtahEmg\">你所不知道的Spring中@Autowired那些实现细节</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/2X5xv8I0b6TcXWVH-SC8Ug\">@Autowired的这些骚操作，你都知道吗？</a></li>\n</ul>\n<p><strong>@Inject</strong></p>\n<ol>\n<li>@Inject是JSR330(Dependency Injection for Java)中的规范，需要导入javax.inject.Inject,实现注入。</li>\n<li>@Inject是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合@Named</li>\n<li>@Inject可以作用在变量、setter方法、构造函数上。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Abc</span> abc<span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Inject</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAbc</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Named</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beanName\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Abc</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://mp.weixin.qq.com/s/YLIsRBSiIjz3dCtSA9onDQ\">@Autowired,@Resource,@Inject三个注解的区别</a></p>\n<ol>\n<li>@Autowired是Spring自带的，@Inject和@Resource都是JDK提供的，其中@Inject是JSR330规范实现的，@Resource是JSR250规范实现的，而Spring通过BeanPostProcessor来提供对JDK规范的支持。</li>\n<li>@Autowired、@Inject用法基本一样，不同之处为@Autowired有一个required属性，表示该注入是否是必须的，即如果为必须的，则如果找不到对应的bean，就无法注入，无法创建当前bean。</li>\n<li>@Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的。如在spring-boot-data项目中自动生成的redisTemplate的bean，是需要通过byName来注入的。如果需要注入该默认的，则需要使用@Resource来注入，而不是@Autowired。</li>\n<li>对于@Autowire和@Inject，如果同一类型存在多个bean实例，则需要指定注入的beanName。@Autowired和@Qualifier一起使用，@Inject和@Named一起使用。</li>\n</ol>\n<h3 id=\"Bean的作用域有哪些\"><a href=\"#Bean的作用域有哪些\" class=\"headerlink\" title=\"Bean的作用域有哪些?\"></a>Bean的作用域有哪些?</h3><p>Spring中Bean的作用域通常有下面几种：</p>\n<ul>\n<li><strong>singleton</strong>:IoC容器中只有唯一的bean实例。Spring中的bean默认都是单例的，是对单例设计模式的应用。</li>\n<li><strong>prototype</strong>:每次获取都会创建一个新的bean实例。也就是说，连续<code>getBean()</code>两次，得到的是不同的Bean实例。</li>\n<li><strong>request</strong>（仅Web应用可用）:每一次HTTP请求都会产生一个新的bean（请求bean），该bean仅在当前HTTPrequest内有效。</li>\n<li><strong>session</strong>（仅Web应用可用）:每一次来自新session的HTTP请求都会产生一个新的bean（会话bean），该bean仅在当前HTTPsession内有效。</li>\n<li><strong>application&#x2F;global-session</strong>（仅Web应用可用）：每个Web应用在启动时创建一个Bean（应用Bean），该bean仅在当前应用启动时间内有效。</li>\n<li><strong>websocket</strong>（仅Web应用可用）：每一次WebSocket会话产生一个新的bean。</li>\n</ul>\n<p><strong>如何配置bean的作用域呢？</strong></p>\n<p>xml方式：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>singleton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注解方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_PROTOTYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">personPrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"单例Bean的线程安全问题了解吗？\"><a href=\"#单例Bean的线程安全问题了解吗？\" class=\"headerlink\" title=\"单例Bean的线程安全问题了解吗？\"></a>单例Bean的线程安全问题了解吗？</h3><p>大部分时候我们并没有在项目中使用多线程，所以很少有人会关注这个问题。单例Bean存在线程问题，主要是因为当多个线程操作同一个对象的时候是存在资源竞争的。</p>\n<p>常见的有两种解决办法：</p>\n<ol>\n<li>在Bean中尽量避免定义可变的成员变量。</li>\n<li>在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal中（推荐的一种方式）。</li>\n</ol>\n<p>不过，大部分Bean实际都是无状态（没有实例变量）的（比如Dao、Service），这种情况下，Bean是线程安全的。</p>\n<h3 id=\"Bean的生命周期-详细介绍见下章\"><a href=\"#Bean的生命周期-详细介绍见下章\" class=\"headerlink\" title=\"Bean的生命周期(详细介绍见下章)\"></a>Bean的生命周期(详细介绍见下章)</h3><blockquote>\n<p>下面的内容整理自：<a href=\"https://yemengying.com/2016/07/14/spring-bean-life-cycle/\">https://yemengying.com/2016/07/14/spring-bean-life-cycle/</a>，除了这篇文章，再推荐一篇很不错的文章：<a href=\"https://www.cnblogs.com/zrtqsk/p/3735273.html\">https://www.cnblogs.com/zrtqsk/p/3735273.html</a>。</p>\n</blockquote>\n<ul>\n<li>Bean容器找到配置文件中Spring Bean的定义。</li>\n<li>Bean容器利用Java Reflection API创建一个Bean的实例。</li>\n<li>如果涉及到一些属性值利用set()方法设置一些属性值。</li>\n<li>如果Bean实现了BeanNameAware接口，调用setBeanName()方法，传入Bean的名字。</li>\n<li>如果Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。</li>\n<li>如果Bean实现了BeanFactoryAware接口，调用setBeanFactory()方法，传入BeanFactory对象的实例。</li>\n<li>与上面的类似，如果实现了其他*.Aware接口，就调用相应的方法。</li>\n<li>如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessBeforeInitialization()方法</li>\n<li>如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。</li>\n<li>如果Bean在配置文件中的定义包含init-method属性，执行指定的方法。</li>\n<li>如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessAfterInitialization()方法</li>\n<li>当要销毁Bean的时候，如果Bean实现了DisposableBean接口，执行destroy()方法。</li>\n<li>当要销毁Bean的时候，如果Bean在配置文件中的定义包含destroy-method属性，执行指定的方法。</li>\n</ul>\n<p>图示：<br><img src=\"https://images.xiaozhuanlan.com/photo/2019/24bc2bad3ce28144d60d9e0a2edf6c7f.jpg\" alt=\"Spring Bean生命周期\"></p>\n<p>与之比较类似的中文版本:</p>\n<p><img src=\"https://images.xiaozhuanlan.com/photo/2019/b5d264565657a5395c2781081a7483e1.jpg\" alt=\"Spring Bean生命周期\"></p>\n<h2 id=\"Spring-Bean生命周期\"><a href=\"#Spring-Bean生命周期\" class=\"headerlink\" title=\"Spring Bean生命周期\"></a>Spring Bean生命周期</h2><h3 id=\"一、获取Bean\"><a href=\"#一、获取Bean\" class=\"headerlink\" title=\"一、获取Bean\"></a>一、获取Bean</h3><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPYhVDaaP8cNKOLWfufL5rQXaMa7xPp4N8NAI2162lm2Rrwvl8sibVCjg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h4 id=\"第一阶段获取Bean\"><a href=\"#第一阶段获取Bean\" class=\"headerlink\" title=\"第一阶段获取Bean\"></a>第一阶段获取Bean</h4><p>这里的流程图的入口在<code>AbstractBeanFactory</code>类的<code>doGetBean</code>方法，这里可以配合前面的getBean方法分析文章进行阅读。主要流程就是<br><strong>1、</strong>先处理Bean的名称，因为如果以“&amp;”开头的Bean名称表示获取的是对应的FactoryBean对象<br><strong>2、</strong>从缓存中获取单例Bean，有则进一步判断这个Bean是不是在创建中，如果是的就等待创建完毕，否则直接返回这个Bean对象<br><strong>3、</strong>如果不存在单例Bean缓存，则先进行循环依赖的解析<br><strong>4、</strong>解析完毕之后先获取父类BeanFactory，获取到了则调用父类的getBean方法，不存在则先合并然后创建Bean</p>\n<h3 id=\"二、创建Bean\"><a href=\"#二、创建Bean\" class=\"headerlink\" title=\"二、创建Bean\"></a>二、创建Bean</h3><h4 id=\"2-1-创建Bean之前\"><a href=\"#2-1-创建Bean之前\" class=\"headerlink\" title=\"2.1 创建Bean之前\"></a>2.1 创建Bean之前</h4><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPicgybuOPvUicWBAxrM1rT0PhJeZ1ftRibJGWGYM7P0f5XMga9QCrSlFFQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>在真正创建Bean之前逻辑</strong><br>这个流程图对应的代码在<code>AbstractAutowireCapableBeanFactory</code>类的<code>createBean</code>方法中。<br><strong>1、</strong>这里会先获取<code>RootBeanDefinition</code>对象中的Class对象并确保已经关联了要创建的Bean的Class。<br><strong>2、</strong>这里会检查3个条件<br>（1）Bean的属性中的<code>beforeInstantiationResolved</code>字段是否为true，默认是false。<br>（2）Bean是原生的Bean<br>（3）Bean的<code>hasInstantiationAwareBeanPostProcessors</code>属性为true，这个属性在Spring准备刷新容器BeanPostProcessors的时候会设置，如果当前Bean实现了<code>InstantiationAwareBeanPostProcessor</code>则这个就会是true。</p>\n<p>当三个条件都存在的时候，就会调用实现的<code>InstantiationAwareBeanPostProcessor</code>接口的<code>postProcessBeforeInstantiation</code>方法，然后获取返回的Bean，如果返回的Bean不是null还会调用实现的<code>BeanPostProcessor</code>接口的<code>postProcessAfterInitialization</code>方法，这里用代码说明</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveBeforeInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Object</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//条件1</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>beforeInstantiationResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//条件2跟条件3</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetType <span class=\"token operator\">=</span> <span class=\"token function\">determineTargetType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//调用实现的postProcessBeforeInstantiation方法</span>\n                    bean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsBeforeInstantiation</span><span class=\"token punctuation\">(</span>targetType<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                       <span class=\"token comment\">//调用实现的postProcessAfterInitialization方法</span>\n                        bean <span class=\"token operator\">=</span> <span class=\"token function\">applyBeanPostProcessorsAfterInitialization</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//不满足2或者3的时候就会设置为false</span>\n            mbd<span class=\"token punctuation\">.</span>beforeInstantiationResolved <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3、</strong>如果上面3个条件其中一个不满足就不会调用实现的方法。默认这里都不会调用的这些<code>BeanPostProcessors</code>的实现方法。然后继续执行后面的<code>doCreateBean</code>方法。</p>\n<h4 id=\"2-2-真正的创建Bean，doCreateBean\"><a href=\"#2-2-真正的创建Bean，doCreateBean\" class=\"headerlink\" title=\"2.2 真正的创建Bean，doCreateBean\"></a>2.2 真正的创建Bean，doCreateBean</h4><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPIhTibribNrjwS7O5fH8doMAibkvl5icWLeq16ibP52JcxspfB8nDtyMhKQA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\"></p>\n<p><strong>doCreateBean方法逻辑</strong><br>这个代码的实现还是在<code>AbstractAutowireCapableBeanFactory</code>方法中。流程是<br><strong>1、</strong>先检查<code>instanceWrapper</code>变量是不是null，这里一般是null，除非当前正在创建的Bean在<code>factoryBeanInstanceCache</code>中存在这个是保存还没创建完成的FactoryBean的集合。<br><strong>2、</strong>调用createBeanInstance方法实例化Bean，这个方法在后面会讲解<br><strong>3、</strong>如果当前<code>RootBeanDefinition</code>对象还没有调用过实现了的<code>MergedBeanDefinitionPostProcessor</code>接口的方法，则会进行调用。<br><strong>4</strong>、当满足以下三点<br>（1）是单例Bean<br>（2）尝试解析bean之间的循环引用<br>（3）bean目前正在创建中<br>则会进一步检查是否实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口如果实现了则调用是实现的<code>getEarlyBeanReference</code>方法<br><strong>5、</strong>调用<code>populateBean</code>方法进行属性填充，这里后面会讲解<br><strong>6、</strong>调用<code>initializeBean</code>方法对Bean进行初始化，这里后面会讲解</p>\n<h5 id=\"2-2-1-实例化Bean，createBeanInstance\"><a href=\"#2-2-1-实例化Bean，createBeanInstance\" class=\"headerlink\" title=\"2.2.1 实例化Bean，createBeanInstance\"></a>2.2.1 实例化Bean，createBeanInstance</h5><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpP4WkTkskaiaq1XKqJAEKWhLeNicuTJSsicuK7licC9doicxAbdr01YF0taQg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>实例化Bean</strong></p>\n<p>这里的逻辑稍微有一点复杂，这个流程图已经是简化过后的了。简要根据代码说明一下流程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">BeanWrapper</span> <span class=\"token function\">createBeanInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//步骤1</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass <span class=\"token operator\">=</span> <span class=\"token function\">resolveBeanClass</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanClass <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isNonPublicAccessAllowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCreationException</span><span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Bean class isn't public, and non-public access not allowed: \"</span> <span class=\"token operator\">+</span> beanClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤2</span>\n    <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> instanceSupplier <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getInstanceSupplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instanceSupplier <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">obtainFromSupplier</span><span class=\"token punctuation\">(</span>instanceSupplier<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤3</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getFactoryMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">instantiateUsingFactoryMethod</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">boolean</span> resolved <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> autowireNecessary <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>constructorArgumentLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span>resolvedConstructorOrFactoryMethod <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resolved <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                autowireNecessary <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span>constructorArgumentsResolved<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤4.1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>autowireNecessary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">autowireConstructor</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">instantiateBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">//步骤4.2</span>\n    <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ctors <span class=\"token operator\">=</span> <span class=\"token function\">determineConstructorsFromBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctors <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_CONSTRUCTOR</span> <span class=\"token operator\">||</span>\n            mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">autowireConstructor</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> ctors<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤5</span>\n    ctors <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPreferredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctors <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">autowireConstructor</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> ctors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">instantiateBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、</strong>先检查Class是否已经关联了，并且对应的修饰符是否是public的<br><strong>2、</strong>如果用户定义了Bean实例化的函数，则调用并返回<br><strong>3、</strong>如果当前Bean实现了<code>FactoryBean</code>接口则调用对应的<code>FactoryBean</code>接口的<code>getObject</code>方法<br><strong>4、</strong>根据getBean时候是否传入构造参数进行处理<br><strong>4.1</strong>如果没有传入构造参数，则检查是否存在已经缓存的无参构造器，有则使用构造器直接创建，没有就会调用<code>instantiateBean</code>方法先获取实例化的策略默认是<code>CglibSubclassingInstantiationStrategy</code>，然后实例化Bean。最后返回<br><strong>4.2</strong>如果传入了构造参数，则会先检查是否实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口，如果实现了会调用<code>determineCandidateConstructors</code>获取返回的候选构造器。<br><strong>4.3</strong>检查4个条件是否满足一个<br>（1）构造器不为null，<br>（2）从RootBeanDefinition中获取到的关联的注入方式是构造器注入（没有构造参数就是setter注入，有则是构造器注入）<br>（3）含有构造参数<br>（4）getBean方法传入构造参数不是空<br>满足其中一个则会调用返回的候选构造器实例化Bean并返回，如果都不满足，则会根据构造参数选则合适的有参构造器然后实例化Bean并返回<br><strong>5、</strong>如果上面都没有合适的构造器，则直接使用无参构造器创建并返回Bean。</p>\n<h5 id=\"2-2-2-填充Bean，populateBean\"><a href=\"#2-2-2-填充Bean，populateBean\" class=\"headerlink\" title=\"2.2.2 填充Bean，populateBean\"></a>2.2.2 填充Bean，populateBean</h5><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPRaNrWofKRqgPdvMFQn03uicb2NmqJCHcRzncyuoobJ7alPiaOpVPGR8g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>填充Bean</strong><br>这里还是根据代码来说一下流程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">populateBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">BeanWrapper</span> bw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bw <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanCreationException</span><span class=\"token punctuation\">(</span>\n                    mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cannot apply property values to null instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Skip property population phase for null instance.</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">boolean</span> continueWithPropertyPopulation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//步骤1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isSynthetic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    continueWithPropertyPopulation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>continueWithPropertyPopulation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤2--------------------</span>\n    <span class=\"token class-name\">PropertyValues</span> pvs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">hasPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> resolvedAutowireMode <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedAutowireMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_NAME</span> <span class=\"token operator\">||</span> resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_TYPE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">MutablePropertyValues</span> newPvs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Add property values based on autowire by name if applicable.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_NAME</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autowireByName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> newPvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Add property values based on autowire by type if applicable.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolvedAutowireMode <span class=\"token operator\">==</span> <span class=\"token constant\">AUTOWIRE_BY_TYPE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autowireByType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> newPvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        pvs <span class=\"token operator\">=</span> newPvs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">boolean</span> hasInstAwareBpps <span class=\"token operator\">=</span> <span class=\"token function\">hasInstantiationAwareBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> needsDepCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getDependencyCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">AbstractBeanDefinition</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEPENDENCY_CHECK_NONE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">PropertyDescriptor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filteredPds <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//步骤3</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasInstAwareBpps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pvs <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span> bp <span class=\"token operator\">:</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> ibp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">)</span> bp<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">PropertyValues</span> pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        filteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    pvsToUse <span class=\"token operator\">=</span> ibp<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessPropertyValues</span><span class=\"token punctuation\">(</span>pvs<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">.</span><span class=\"token function\">getWrappedInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvsToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                pvs <span class=\"token operator\">=</span> pvsToUse<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needsDepCheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filteredPds <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            filteredPds <span class=\"token operator\">=</span> <span class=\"token function\">filterPropertyDescriptorsForDependencyCheck</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">.</span>allowCaching<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">checkDependencies</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> filteredPds<span class=\"token punctuation\">,</span> pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//步骤4</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pvs <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">applyPropertyValues</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> pvs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、</strong>检查当前Bean是否实现了<code>InstantiationAwareBeanPostProcessor</code>的<code>postProcessAfterInstantiation</code>方法则调用，并结束Bean的填充。<br><strong>2、</strong>将按照类型跟按照名称注入的Bean分开，如果注入的Bean还没有实例化的这里会实例化，然后放到<code>PropertyValues</code>对象中。<br><strong>3、</strong>如果实现了<code>InstantiationAwareBeanPostProcessor</code>类的<code>postProcessProperties</code>则调用这个方法并获取返回值，如果返回值是null，则有可能是实现了过期的<code>postProcessPropertyValues</code>方法，这里需要进一步调用<code>postProcessPropertyValues</code>方法<br><strong>4、</strong>进行参数填充</p>\n<h5 id=\"2-2-3-初始化Bean，initializeBean\"><a href=\"#2-2-3-初始化Bean，initializeBean\" class=\"headerlink\" title=\"2.2.3 初始化Bean，initializeBean\"></a>2.2.3 初始化Bean，initializeBean</h5><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPZjJibwdUibfEibHoFzlWI6yFbIlaG2EvckACOCY5mneiaibpOZfZrtQICibw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>初始化Bean</strong><br>同时这里根据代码跟流程图来说明</p>\n<p><strong>1、</strong>如果Bean实现了<code>BeanNameAware</code>,<code>BeanClassLoaderAware</code>,<code>BeanFactoryAware</code>则调用对应实现的方法。<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization</code>则会调用实现的<code>postProcessBeforeInitialization</code>方法。在<code>ApplicationContextAwareProcessor</code>类中实现了<code>postProcessBeforeInitialization</code>方法。而这个类会在Spring刷新容器准备<code>beanFactory</code>的时候会加进去，这里就会被调用，而调用里面会检查Bean是不是<code>EnvironmentAware</code>,<code>EmbeddedValueResolverAware</code>,<code>ResourceLoaderAware</code>,<code>ApplicationEventPublisherAware</code>,<code>MessageSourceAware</code>,<code>ApplicationContextAware</code>的实现类。这里就会调用对应的实现方法。代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationContextAwareProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EnvironmentAware</span> <span class=\"token operator\">||</span> bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EmbeddedValueResolverAware</span> <span class=\"token operator\">||</span>\n            bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ResourceLoaderAware</span> <span class=\"token operator\">||</span> bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ApplicationEventPublisherAware</span> <span class=\"token operator\">||</span>\n            bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessageSourceAware</span> <span class=\"token operator\">||</span> bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">AccessControlContext</span> acc <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        acc <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">invokeAwareInterfaces</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">invokeAwareInterfaces</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>1、</strong>实例化Bean然后，检查是否实现了<code>InitializingBean</code>的<code>afterPropertiesSet</code>方法，如果实现了就会调用<br><strong>2、</strong>Bean不为null并且bean不是合成的，如果实现了<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization</code>则会调用实现的<code>postProcessAfterInitialization</code>方法。</p>\n<p>到此创建Bean的流程就没了，剩下的就是容器销毁的时候的了</p>\n<h3 id=\"三、destory方法跟销毁Bean\"><a href=\"#三、destory方法跟销毁Bean\" class=\"headerlink\" title=\"三、destory方法跟销毁Bean\"></a>三、destory方法跟销毁Bean</h3><p>Bean在创建完毕之后会检查用户是否指定了<code>destroyMethodName</code>以及是否实现了<code>DestructionAwareBeanPostProcessor</code>接口的<code>requiresDestruction</code>方法，如果指定了会记录下来保存在<code>DisposableBeanAdapter</code>对象中并保存在bean的<code>disposableBeans</code>属性中。代码在<code>AbstractBeanFactory</code>的<code>registerDisposableBeanIfNecessary</code>中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDisposableBeanIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n                <span class=\"token function\">registerDisposableBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RootBeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> postProcessors<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">AccessControlContext</span> acc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token class-name\">String</span> destroyMethodName <span class=\"token operator\">=</span> <span class=\"token function\">inferDestroyMethodIfNecessary</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>destroyMethodName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>destroyMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token operator\">!</span>beanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedDestroyMethod</span><span class=\"token punctuation\">(</span>destroyMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroyMethod <span class=\"token operator\">=</span> destroyMethod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors <span class=\"token operator\">=</span> <span class=\"token function\">filterPostProcessors</span><span class=\"token punctuation\">(</span>postProcessors<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在销毁Bean的时候最后都会调用<code>AbstractAutowireCapableBeanFactory</code>的<code>destroyBean</code>方法。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroyBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> existingBean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span>existingBean<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里是创建一个<code>DisposableBeanAdapter</code>对象，这个对象实现了Runnable接口，在实现的<code>run</code>方法中会调用实现的<code>DisposableBean</code>接口的<code>destroy</code>方法。并且在创建<code>DisposableBeanAdapter</code>对象的时候会根据传入的bean是否实现了<code>DisposableBean</code>接口来设置<code>invokeDisposableBean</code>变量，这个变量表实有没有实现<code>DisposableBean</code>接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DisposableBeanAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> postProcessors<span class=\"token punctuation\">,</span><span class=\"token class-name\">AccessControlContext</span> acc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Disposable bean must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//根据传入的bean是否实现了`DisposableBean`接口来设置`invokeDisposableBean`变量</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nonPublicAccessAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanPostProcessors <span class=\"token operator\">=</span> <span class=\"token function\">filterPostProcessors</span><span class=\"token punctuation\">(</span>postProcessors<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">//根据invokeDisposableBean决定是否调用destroy方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invokeDisposableBean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoking destroy() on bean with name '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedExceptionAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DisposableBean</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Invocation of destroy method failed on bean with name '\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"四、Bean的初始化和销毁的几种方式\"><a href=\"#四、Bean的初始化和销毁的几种方式\" class=\"headerlink\" title=\"四、Bean的初始化和销毁的几种方式\"></a>四、Bean的初始化和销毁的几种方式</h3><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ul>\n<li>实现InitializingBean接口,覆盖其中的afterPropertiesSet()方法</li>\n<li>增加@PostConstruct注解</li>\n<li>自定义init方法(@Bean(initMethod &#x3D; “initMethod”))<br>执行的顺序依次是postConstruct,afterPropertiesSet,initMethod</li>\n</ul>\n<h4 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h4><ul>\n<li>实现org.springframework.beans.factory.DisposableBean接口，覆盖destroy()方法</li>\n<li>自定义一个方法，在方法上面增加@PreDestroy注解</li>\n<li>在InitServiceImpl中增加一个自定义销毁方法，然后在配置类中增加Bean的destoryMethod<br>执行的顺序依次是preDestroy,destroy,destroyMethod</li>\n</ul>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>最后来一个大的流程</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPQu4pzSyprviaBic07GicVGPvAUdAibkFqybnvOfgdzdw1M1iaMtm9qfBLDQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>实例化前的准备阶段</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPic9W1CbpBia73nS2WJAGKRMdW9LtwbxG30IqbNT8ibvH5DfqcHO2IueBw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>实例化前</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPp3ia71rKnC0FeypESdhAFYAqGicz9KP9LeBxaJHKmvMPUDIGrBdBkBiag/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>实例化后</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPjfQ5qaic2Ro6hoqhCdoicgiabmkibR518z7vSpXxmibq91FH1XxgHvdet8Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>初始化前</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGPI5JCBzTotEAS720l5YpPABU277ApFU3EVr8iaHxtFEVvsawgghYyJd7WlJQFwEkQvXoDW2sQEYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"><br>初始化后&amp;销毁</p>\n<h2 id=\"Bean的扩展接口\"><a href=\"#Bean的扩展接口\" class=\"headerlink\" title=\"Bean的扩展接口\"></a>Bean的扩展接口</h2><h3 id=\"初始化bean的顺序\"><a href=\"#初始化bean的顺序\" class=\"headerlink\" title=\"初始化bean的顺序\"></a>初始化bean的顺序</h3><p>在将一个Bean对象配置在IOC容器中之后，这个Bean的生命周期就会交由IOC容器进行管理。一般担当管理者的角色是BeanFactory或ApplicationContext。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1. Bean的创建\n在解析IOC容器时，根据解析容器的工厂，决定bean的初始化时间\nBeanFactory-getBean()方法调用时初始化bean\nApplicationContext-解析ioc容器时初始化bean\n2. 注入\n根据Bean子元素的配置实现Bean之间的被动注入\n3. BeanNameAware\n如果Bean实现了该接口，执行其setBeanName(String name)方法.参数name是Bean在容器中的名称,即XML里面Bean的id名称\n4. BeanFactoryAware\n如果实现了该接口，执行其setBeanFactory(BeanFactory factory)方法，参数是创建Bean的BeanFactory本身\n5. ApplicationContextAware\n如果这个Bean已经实现了该接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）\nimport org.springframework.beans.context.ApplicationContextAware\n&#x2F;&#x2F; 当需要从Spring容器中获取Bean时一般使用这种方式获取\nApplicationContext appContext &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext-common.xml&quot;);\nAbcService abcService &#x3D; (AbcService)appContext.getBean(&quot;abcService&quot;);\n&#x2F;&#x2F; 但是这样就会存在一个问题：因为它会重新装载applicationContext-common.xml并实例化上下文Bean，如果有些线程配置类也是在这个配置文件中，那么会造成做相同工作的的线程会被启两次。一次是web容器初始化时启动，另一次是上述代码显示的实例化了一次。当于重新初始化一遍！这样就产生了冗余,所以可以通过实现ApplicationContextAware接口获取Bean,当一个类实现了这个接口（ApplicationContextAware）之后，这个类就可以方便获得ApplicationContext中的所有Bean。换句话说，就是这个类可以直接获取Spring配置文件中，所有有引用到的Bean对象\n\nprivate static ApplicationContext applicationContext;\n \t@Override\n    public void setApplicationContext(ApplicationContext arg0) throws BeansException &#123;\n        applicationContext &#x3D; arg0;\n    &#125;\n&#125;\n&#x2F;&#x2F; 注意：从ApplicationContextAware获取ApplicationContext上下文的情况，仅仅适用于当前运行的代码和已启动的Spring代码处于同一个Spring上下文，否则获取到的ApplicationContext是空的\n\n6. BeanPostProcessor (前置方法)\nIOC容器中如果有Bean实现了该接口，那所有的Bean在初始化之前都会执行其实例的postProcessBeforeInitialization(Object bean, String beanName)前置方法，BeanPostProcessor经常被用作是Bean内容的更改,该方法最后返回Bean\n7. @PostConstruct修饰的非静态方法\n8. InitializingBean\n如果实现了该接口，则允许一个Bean在它的所有必须属性被BeanFactory设置后，来执行初始化的工作，会自动调用afterPropertiesSet()方法对Bean进行初始化，实现此接口的话正常情况下配置文件就不用指定init-method属性了。\n9. 如果Bean在Spring中配置了init-method属性，调用init-method属性指向的方法,此时完成Bean的初始化\n10. BeanPostProcessor(后置方法)\nIOC容器中如果有Bean实现了接口，那所有的Bean在初始化之后都会执行其实例的postProcessAfterInitialization(Object bean, String beanName)后置方法\n11. 实现SmartInitializingSingleton的接口后，当所有单例Bean都初始化完成以后，Spring的IOC容器会回调该接口的afterSingletonsInstantiated()方法,主要应用场合就是在所有单例Bean创建完成之后，可以在该回调中做一些事情。执行时机在ApplicationContextAware执行之后\n12. @PreDestroy修饰的方法\n13. IOC容器关闭时，如果Bean实现了DisposableBean接口，则执行其destory()方法，在Bean生命周期结束前调用destory()方法做一些收尾工作,重写destroy()方法\n14. 如果这个Bean在Spring配置了destroy-method属性，执行destory-method属性指向的方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/blog/images/bean.png\"></p>\n<p><strong>简单来说一个Bean的加载顺序：类构造方法 - postProcessBeforeInitialization前置方法 - @PostConstruct注解的方法 - InitializingBean的afterPropertiesSet()方法- XML中定义的bean init-method方法 - postProcessAfterInitialization后置方法</strong></p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/l0O3C_UiO3CdfNE2V73qmA\">Spring Boot启动扩展点超详细总结，再也不怕面试官问了</a></li>\n</ul>\n<h3 id=\"BeanFactoryPostProcessor、BeanPostProcessor区别\"><a href=\"#BeanFactoryPostProcessor、BeanPostProcessor区别\" class=\"headerlink\" title=\"BeanFactoryPostProcessor、BeanPostProcessor区别\"></a>BeanFactoryPostProcessor、BeanPostProcessor区别</h3><p>BeanFactoryPostProcessor：针对bean工厂，BeanFactory后置处理器，是对BeanDefinition对象进行修改，可以修改BeanDefinition对象中的属性。（BeanDefinition：存储bean标签的信息，用来生成bean实例）,BeanFactoryPostProcessor接口是针对bean容器的，它的实现类可以在当前BeanFactory初始化（spring容器加载bean定义文件）后，bean实例化之前修改bean的定义属性，达到影响之后实例化bean的效果。也就是说，Spring允许BeanFactoryPostProcessor在容器实例化任何其它bean之前读取配置元数据，并可以根据需要进行修改，例如可以把bean的scope从singleton改为prototype，也可以把property的值给修改掉。可以同时配置多个BeanFactoryPostProcessor，并通过设置’order’属性来控制各个BeanFactoryPostProcessor的执行次序.<br>BeanPostProcessor：针对bean,Bean后置处理器，是对生成的Bean对象进行修改。BeanPostProcessor能在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。初始化方法包括以下两种：</p>\n<ol>\n<li>实现InitializingBean接口的bean，对应方法为afterPropertiesSet</li>\n<li>xml定义中，通过init-method设置的方法,BeanPostProcessor是BeanFactoryPostProcessor之后执行的。</li>\n</ol>\n<h3 id=\"BeanFactroy、ApplicationContext区别\"><a href=\"#BeanFactroy、ApplicationContext区别\" class=\"headerlink\" title=\"BeanFactroy、ApplicationContext区别\"></a>BeanFactroy、ApplicationContext区别</h3><ol>\n<li>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化，这样，我们就不能发现一些存在的Spring的配置问题。而ApplicationContext则相反，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误。相对于基本的BeanFactory，ApplicationContext唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。BeanFacotry延迟加载,如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常；而ApplicationContext则在初始化自身是检验，这样有利于检查所依赖属性是否注入；所以通常情况下我们选择使用ApplicationContext。应用上下文则会在上下文启动后预载入所有的单实例Bean。通过预载入单实例bean,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</li>\n<li>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。（Applicationcontext比beanFactory加入了一些更好使用的功能。而且beanFactory的许多功能需要通过编程实现而Applicationcontext可以通过配置实现。比如后处理bean，Applicationcontext直接配置在配置文件即可而beanFactory这要在代码中显示的写出来才可以被容器识别。）</li>\n<li>beanFactory主要是面对与spring框架的基础设施，面对spring自己。而Applicationcontex主要面对与spring使用的开发者。基本都会使用Applicationcontex并非beanFactory。<br><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493943&idx=1&sn=9eaa46ed730874fce003c66f76fe9c7f&source=41#wechat_redirect\">Spring系列之beanFactory与ApplicationContext</a></li>\n</ol>\n<h3 id=\"BeanFactory和FactoryBean的区别\"><a href=\"#BeanFactory和FactoryBean的区别\" class=\"headerlink\" title=\"BeanFactory和FactoryBean的区别\"></a>BeanFactory和FactoryBean的区别</h3><p>BeanFactory是Spring容器的顶级接口，给具体的IOC容器的实现提供了规范。<br>FactoryBean也是接口，为IOC容器中Bean的实现提供了更加灵活的方式，FactoryBean在IOC容器的基础上给Bean的实现加上了⼀个简单工厂模式和装饰模式,我们可以在getObject()方法中灵活配置。其实在Spring源码中有很多FactoryBean的实现类。<br>区别：BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是⼀个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</p>\n<h4 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h4><p>BeanFactory，以Factory结尾，表示它是⼀个工厂类(接口)，它负责生产和管理bean的⼀个工厂。在Spring中，BeanFactory是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。<br>BeanFactory只是个接口，并不是IOC容器的具体实现，但是Spring容器给出了很多种实现，如DefaultListableBeanFactory、XmlBeanFactory、ApplicationContext等，其中XmlBeanFactory就是常用的⼀个，该实现将以XML方式描述组成应用的对象及对象间的依赖关系。XmlBeanFactory类将持有此XML配置元数据，并用它来构建⼀个完全可配置的系统或应用。都是附加了某种功能的实现。它为其他具体的IOC容器提供了最基本的规范，例如DefaultListableBeanFactory,XmlBeanFactory,ApplicationContext等具体的容器都是实现了BeanFactory，再在其基础之上附加了其他的功能。<br>BeanFactory和ApplicationContext就是Spring框架的两个IOC容器，现在⼀般使用ApplicationnContext，其不但包含了BeanFactory的作用，同时还进行更多的扩展。<br>BeanFacotry是Spring中比较原始的Factory。如XMLBeanFactory就是⼀种典型的BeanFactory。原始的BeanFactory无法⽀持Spring的许多插件，如AOP功能、Web应用等。ApplicationContext接口,它由BeanFactory接口派生而来，ApplicationContext包含BeanFactory的所有功能，通常建议比BeanFactory优先，ApplicationContext以⼀种更面向框架的方式工作以及对上下文进行分层和实现继承，ApplicationContext包还提供了以下的功能：<br>MessageSource,提供国际化的消息访问<br>资源访问，如URL和⽂件<br>事件传播<br>载入多个（有继承关系）上下文，使得每⼀个上下文都专注于⼀个特定的层次，比如应⽤的web层;<br>BeanFactory提供的方法及其简单，仅提供了六种方法供客户调用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 判断⼯⼚中是否包含给定名称的bean定义，若有则返回true</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回给定名称注册的bean实例。根据bean的配置情况，如果是singleton模式将返回⼀个共享实例，否则将返回⼀个新建的实例，如果没有找到指定bean,该⽅法可能会抛出异常</span>\n<span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回以给定名称注册的bean实例，并转换为给定class类型</span>\n<span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回给定名称的bean的Class,如果没有找到指定的bean实例，则排除NoSuchBeanDefinitionException异常</span>\n<span class=\"token class-name\">Class</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 判断给定名称的bean定义是否为单例模式</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回给定bean名称的所有别名</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h4><p>⼀般情况下，Spring通过反射机制利用&lt;bean&gt;&lt;bean&gt;的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在&lt;bean&gt;&lt;bean&gt;中提供大量的配置信息。配置⽅式的灵活性是受限的，这时采用编码的方式可能会得到⼀个简单的方案。<br>Spring为此提供了⼀个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接⼝定制实例化Bean的逻辑。FactoryBean接口对于Spring框架来说占重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化⼀些复杂Bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始⽀持泛型，即接口声明改为FactoryBean&lt;T&gt;的形式,以Bean结尾，表示它是⼀个Bean，不同于普通Bean的是：它是实现了FactoryBean&lt;T&gt;接口的Bean，根据该Bean的ID从BeanFactory中获取的实际上是FactoryBean的getObject()返回的对象，而不是FactoryBean本身，如果要获取FactoryBean对象，请在id前面加⼀个&amp;符号来获取。<br>例如自己实现⼀个FactoryBean，功能：用来代理⼀个对象，对该对象的所有方法做⼀个拦截，在调用前后都输出⼀行LOG，模仿ProxyFactoryBean的功能。FactoryBean是⼀个接口，当在IOC容器中的Bean实现了FactoryBean后，通过getBean(StringBeanName)获取到的Bean对象并不是FactoryBean的实现类对象，而是这个实现类中的getObject()方法返回的对象。要想获取FactoryBean的实现类，就要getBean(&amp;BeanName)，在BeanName之前加上&amp;。<br>在该接口中还定义了以下3个⽅法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 返回由FactoryBean创建的Bean实例，如果isSingleton()返回true，则该实例会放到Spring容器中单实例缓存池中；</span>\n<span class=\"token class-name\">T</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回由FactoryBean创建的Bean实例的作⽤域是singleton还是prototype；</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回FactoryBean创建的Bean类型。当配置⽂件中&lt;bean>的class属性配置的实现类是FactoryBean时，通过getBean()⽅法返回的不是FactoryBean本身，⽽是FactoryBean#getObject()⽅法所返回的对象，相当于FactoryBean#getObject()代理了getBean()⽅法。</span>\n<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>总结</strong><br>BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是⼀个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似</p>\n<h3 id=\"Bean的调用\"><a href=\"#Bean的调用\" class=\"headerlink\" title=\"Bean的调用\"></a>Bean的调用</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 1、使用BeanWrapper</span>\n<span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BeanWrapper</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanWrapperImpl</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbw<span class=\"token punctuation\">.</span><span class=\"token function\">setPropertyvalue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyCalue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2、使用BeanFactory</span>\n<span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">XmlBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3、使用ApplicationContext</span>\n<span class=\"token class-name\">ApplicationContext</span> actx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FleSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> actx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://mp.weixin.qq.com/s/BW3khRkQwjBsXw7yJhCyXQ\">Spring中获取Bean的八种方式</a></p>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/I8tsf7cFXkHX1pUp7SPByw\">11张流程图帮你搞定Spring Bean生命周期</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/5hAt9_KyyqHy7zzOjZ9LyQ\">面试官：说说Spring Bean的实例化过程？面试必问的！</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_je69-0J72X5YMCrS-92MQ\">你知道Spring lazy-init懒加载的原理吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/brlEwyKhwhSkljHLL1zmBA\">如何自己实现一个简单的Spring Bean容器</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/AuTnuxIQDPFbuslDz9ffVg\">实力总结四类Bean注入Spring的方式</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&amp;mid=2247494432&amp;idx=1&amp;sn=3acc7e7bf31c6d1f56ad830d6eb1ec41&amp;source=41#wechat_redirect\">关于Spring注入方式的几道面试题，你能答上么</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/u1DcCsRrrHYFOVykwW4Dcg\">最全的Spring依赖注入方式，你都会了吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/fVV6dYh0DQOoDiXwLR5miw\">Spring官方为什么建议构造器注入？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/g9iRu1slTMx0dwYJiy2m7w\">Bean放入Spring容器，你知道几种方式？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/i0Y-p7mda5FJCWCMJ8msdg\">Spring注入Bean的7种方式，还有谁不会？？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/6CwABJAePAT6hzTmfk7Jjg\">Spring注解@Bean和@Component的区别,你知道吗？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/lyH72PRAGcR2-aQvMZ1jPA\">@Bean与@Component用在同一个类上，会怎么样？</a></li>\n</ul>\n","categories":[{"name":"Spring","path":"api/categories/Spring.json"}],"tags":[]}