{"title":"序列化和反序列化","slug":"序列化和反序列化","date":"2023-03-21T01:05:38.048Z","updated":"2023-07-05T04:59:59.752Z","comments":true,"path":"api/articles/序列化和反序列化.json","excerpt":null,"covers":"https://pica.zhimg.com/v2-67884d8a1020d53d82736b030e1d6b1d_1440w.jpg","content":"\r\n\r\n## 序列化和反序列化\r\n\r\n### 什么是序列化?什么是反序列化?\r\n\r\n如果我们需要持久化Java对象比如将Java对象保存在文件中，或者在网络传输Java对象，这些场景都需要用到序列化。简单来说：\r\n\r\n- **序列化**：将数据结构或对象转换成二进制字节流的过程\r\n- **反序列化**：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\r\n\r\n对于Java这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而class对应的是对象类型。\r\n\r\n下面是序列化和反序列化常见应用场景：\r\n\r\n- 对象在进行网络传输（比如远程方法调用RPC的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；\r\n- 将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；\r\n- 将对象存储到数据库（如Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；\r\n- 将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。\r\n\r\n> 维基百科是如是介绍序列化的：\r\n> **序列化**（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。\r\n\r\n综上：**序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中**。\r\n\r\n![img](https://oss.javaguide.cn/github/javaguide/a478c74d-2c48-40ae-9374-87aacf05188c.png)\r\n\r\n\r\n**序列化协议对应于TCP/IP4层模型的哪一层？**\r\n\r\n我们知道网络通信的双方必须要采用和遵守相同的协议。TCP/IP四层模型是下面这样的，序列化协议属于哪一层呢？\r\n\r\n1. 应用层\r\n2. 传输层\r\n3. 网络层\r\n4. 网络接口层\r\n\r\n![TCP/IP四层模型](https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png)\r\n\r\n如上图所示，OSI七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。这不就对应的是序列化和反序列化么？OSI七层协议模型中的应用层、表示层和会话层对应的都是TCP/IP四层模型中的应用层，所以序列化协议属于TCP/IP协议应用层的一部分。\r\n\r\n### 如果有些字段不想进行序列化怎么办？(transient)\r\n\r\n对于不想进行序列化的变量，使用**transient**关键字修饰。\r\n\r\ntransient关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。关于transient还有几点注意：\r\n\r\n- transient只能修饰变量，不能修饰类和方法。\r\n- transient修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰int类型，那么反序列后结果就是0。\r\n- static变量因为不属于任何对象(Object)，所以无论有没有transient关键字修饰，均不会被序列化。\r\n\r\n### 常见序列化协议有哪些？\r\n\r\nJDK自带的序列化方式一般不会用，因为序列化效率低并且存在安全问题。比较常用的序列化协议有Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。像JSON和XML这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。\r\n\r\n\r\n#### JDK自带的序列化方式\r\n\r\nJDK自带的序列化，只需实现java.io.Serializable接口即可。\r\n\r\n```java\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Getter\r\n@Builder\r\n@ToString\r\npublic class RpcRequest implements Serializable {\r\n    private static final long serialVersionUID = 1905122041950251207L;\r\n    private String requestId;\r\n    private String interfaceName;\r\n    private String methodName;\r\n    private Object[] parameters;\r\n    private Class<?>[] paramTypes;\r\n    private RpcMessageTypeEnum rpcMessageTypeEnum;\r\n}\r\n```\r\n\r\n\r\n**serialVersionUID有什么作用？**\r\n\r\n序列化号serialVersionUID属于版本控制的作用。反序列化时，会检查serialVersionUID是否和当前类的serialVersionUID一致。如果serialVersionUID不一致则会抛出InvalidClassException异常。强烈推荐每个序列化类都手动指定其serialVersionUID，如果不手动指定，那么编译器会动态生成默认的serialVersionUID。\r\n\r\n**serialVersionUID不是被static变量修饰了吗？为什么还会被“序列化”？**\r\n\r\nstatic修饰的变量是静态变量，位于方法区，本身是不会被序列化的。static变量是属于类的而不是对象。你反序列之后，static变量的值就像是默认赋予给了对象一样，看着就像是static变量被序列化，实际只是假象罢了。\r\n\r\n\r\n**为什么不推荐使用JDK自带的序列化？**\r\n\r\n我们很少或者说几乎不会直接使用JDK自带的序列化方式，主要原因有下面这些原因：\r\n\r\n- **不支持跨语言调用**：如果调用的是其他语言开发的服务的时候就不支持了。\r\n\r\n- **性能差**：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。\r\n\r\n- **存在安全问题**：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。\r\n  > 相关阅读：[应用安全:JAVA反序列化漏洞之殇-Cryin](https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/)、[Java反序列化安全漏洞怎么回事?-Monica](https://www.zhihu.com/question/37562657/answer/1916596031)。\r\n\r\n#### Kryo\r\n\r\nKryo是一个高性能的序列化/反序列化工具，由于其变长存储特性并使用了字节码生成机制，拥有较高的运行速度和较小的字节码体积。另外，Kryo已经是一种非常成熟的序列化实现了，已经在Twitter、Groupon、Yahoo以及多个著名开源项目（如Hive、Storm）中广泛的使用。[guide-rpc-framework](https://github.com/Snailclimb/guide-rpc-framework)就是使用的kryo进行序列化，序列化和反序列化相关的代码如下：\r\n\r\n```java\r\n/**\r\n * Kryo serialization class, Kryo serialization efficiency is very high, but only compatible with Java language\r\n *\r\n * @author shuang.kou\r\n * @createTime 2020年05月13日 19:29:00\r\n */\r\n@Slf4j\r\npublic class KryoSerializer implements Serializer {\r\n\r\n    /**\r\n     * Because Kryo is not thread safe. So, use ThreadLocal to store Kryo objects\r\n     */\r\n    private final ThreadLocal<Kryo> kryoThreadLocal = ThreadLocal.withInitial(() -> {\r\n        Kryo kryo = new Kryo();\r\n        kryo.register(RpcResponse.class);\r\n        kryo.register(RpcRequest.class);\r\n        return kryo;\r\n    });\r\n\r\n    @Override\r\n    public byte[] serialize(Object obj) {\r\n        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n             Output output = new Output(byteArrayOutputStream)) {\r\n            Kryo kryo = kryoThreadLocal.get();\r\n            // Object->byte:将对象序列化为byte数组\r\n            kryo.writeObject(output, obj);\r\n            kryoThreadLocal.remove();\r\n            return output.toBytes();\r\n        } catch (Exception e) {\r\n            throw new SerializeException(\"Serialization failed\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public <T> T deserialize(byte[] bytes, Class<T> clazz) {\r\n        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\r\n             Input input = new Input(byteArrayInputStream)) {\r\n            Kryo kryo = kryoThreadLocal.get();\r\n            // byte->Object:从byte数组中反序列化出对象\r\n            Object o = kryo.readObject(input, clazz);\r\n            kryoThreadLocal.remove();\r\n            return clazz.cast(o);\r\n        } catch (Exception e) {\r\n            throw new SerializeException(\"Deserialization failed\");\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n> [Github地址](https://github.com/EsotericSoftware/kryo)。\r\n\r\n#### Protobuf\r\n\r\nProtobuf出自于Google，性能还比较优秀，也支持多种语言，同时还是跨平台的。就是在使用中过于繁琐，因为你需要自己定义IDL文件和生成对应的序列化代码。这样虽然不灵活，但是，另一方面导致protobuf没有序列化漏洞的风险。\r\n\r\n> Protobuf包含序列化格式的定义、各种语言的库以及一个IDL编译器。正常情况下你需要定义proto文件，然后使用IDL编译器编译成你需要的语言\r\n\r\n一个简单的proto文件如下：\r\n\r\n```protobuf\r\n// protobuf的版本\r\nsyntax = \"proto3\";\r\n// SearchRequest会被编译成不同的编程语言的相应对象，比如Java中的class、Go中的struct\r\nmessage Person {\r\n  //string类型字段\r\n  string name = 1;\r\n  // int 类型字段\r\n  int32 age = 2;\r\n}\r\n```\r\n\r\n>  [Github地址](https://github.com/protocolbuffers/protobuf)\r\n\r\n\r\n#### ProtoStuff\r\n\r\n由于Protobuf的易用性，它的哥哥Protostuff诞生了。protostuff基于Google protobuf，但是提供了更多的功能和更简易的用法。虽然更加易用，但是不代表ProtoStuff性能更差。\r\n\r\n> [Github地址](https://github.com/protostuff/protostuff)。\r\n\r\n#### Hessian\r\n\r\nHessian是一个轻量级的，自定义描述的二进制RPC协议。Hessian是一个比较老的序列化实现了，并且同样也是跨语言的。\r\n\r\n![img](https://oss.javaguide.cn/github/javaguide/8613ec4c-bde5-47bf-897e-99e0f90b9fa3.png)\r\n\r\nDubbo2.x默认启用的序列化方式是Hessian2,但是，Dubbo对Hessian2进行了修改，不过大体结构还是差不多。\r\n\r\n#### 总结\r\n\r\nKryo是专门针对Java语言序列化方式并且性能非常好，如果你的应用是专门针对Java语言的话可以考虑使用，并且Dubbo官网的[一篇文章](https://dubbo.apache.org/zh/docs/v2.7/user/references/protocol/rest/)中提到说推荐使用Kryo作为生产环境的序列化方式。\r\n\r\n![img](https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2020-8/569e541a-22b2-4846-aa07-0ad479f07440.png)\r\n\r\n像Protobuf、ProtoStuff、hessian这类都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。除了我上面介绍到的序列化方式的话，还有像Thrift，Avro这些。\r\n\r\n> [原文链接](https://javaguide.cn/java/basis/serialization.html)\r\n\r\n\r\n## 测试代码\r\n\r\n```java\r\npublic class SerializableTest {\r\n    public static void main(String[] args) throws Exception {\r\n        serializeFlyPig();\r\n        FlyPig flyPig = deserializeFlyPig();\r\n        System.out.println(flyPig.toString());\r\n    }\r\n    /**\r\n     * 序列化\r\n     */\r\n    private static void serializeFlyPig() throws Exception {\r\n        FlyPig flyPig = new FlyPig();\r\n        flyPig.setColor(\"black\");\r\n        flyPig.setName(\"riemann\");\r\n        flyPig.setName(\"audi\");\r\n        // ObjectOutputStream对象输出流，将flyPig对象存储到E盘的flyPig.txt文件中，完成对flyPig对象的序列化操作\r\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(\"C:\\\\Users\\\\wangx\\\\Desktop\\\\flypig.txt\")));\r\n        oos.writeObject(flyPig);\r\n        System.out.println(\"FlyPig 对象序列化成功！\");\r\n        oos.close();\r\n    }\r\n\r\n    /**\r\n     * 反序列化\r\n     */\r\n    private static FlyPig deserializeFlyPig() throws Exception {\r\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(\"C:\\\\Users\\\\wangx\\\\Desktop\\\\flypig.txt\")));\r\n        FlyPig pig = (FlyPig) ois.readObject();\r\n        System.out.println(\"FlyPig 对象反序列化成功！\");\r\n        return pig;\r\n    }\r\n\r\n    /**\r\n     * map写文件\r\n     */\r\n    public void writeFileByMap(Map<String,Object> map){\r\n        File file = new File(\"\");\r\n        try{\r\n            StringBuffer stringBuffer = new StringBuffer();\r\n            FileWriter fileWriter = new FileWriter(file,true);\r\n            Set<Entry<String,Object>> set = map.entrySet();\r\n            Iterator<Entry<String,Object>> it = set.iterator();\r\n            while(it.hasNext()){\r\n                Map.Entry<String,Object> en = it.next();\r\n                if(en.getKey().equals(\"anObject\")){\r\n                    stringBuffer.append(en.getKey()+\":\"+en.getValue()).append(System.getProperty(\"line.separator\"));\r\n\r\n                }\r\n            }\r\n            fileWriter.write(stringBuffer.toString());\r\n            fileWriter.close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass FlyPig implements Serializable {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n    \r\n    private static String AGE = \"269\";\r\n    private String name;\r\n    private String color;\r\n    transient private String car;\r\n\r\n    private String addTip;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getColor() {\r\n        return color;\r\n    }\r\n\r\n    public void setColor(String color) {\r\n        this.color = color;\r\n    }\r\n\r\n    public String getCar() {\r\n        return car;\r\n    }\r\n\r\n    public void setCar(String car) {\r\n        this.car = car;\r\n    }\r\n\r\n    public String getAddTip() {\r\n        return addTip;\r\n    }\r\n\r\n    public void setAddTip(String addTip) {\r\n        this.addTip = addTip;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"FlyPig{\" + \"name='\" + name + '\\'' + \", color='\" + color + '\\'' + \", car='\" + car + '\\'' + \", AGE='\"\r\n                + AGE + '\\'' + '}';\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 相关文章\r\n\r\n- [Java Serializable：明明就一个空的接口嘛](https://mp.weixin.qq.com/s/7ojBbuJ4For2VvgcpqIuVw)\r\n- [什么是序列化,怎么序列化,为什么序列化,反序列化会遇到什么问题，如何解决](https://mp.weixin.qq.com/s/iIqQeQNeDKimTT5nvye-ow)\r\n- [Java序列化和反序列化为什么要实现Serializable接口](https://mp.weixin.qq.com/s/RLzpPOlKv5omoqRv-5ckPQ)\r\n- [关于序列化/反序列化，我梭哈](https://mp.weixin.qq.com/s/uTrNn_C-wnKPQieUcQ9z5g)\r\n\r\n","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"代码实战","path":"api/tags/代码实战.json"}]}