{"title":"Docker","slug":"Docker","date":"2022-09-28T07:09:19.982Z","updated":"2024-12-04T02:06:26.723Z","comments":true,"path":"api/articles/Docker.json","excerpt":null,"covers":"https://pic2.zhimg.com/v2-98bbd70b053dd779240634a00c7f0950_1440w.jpg","content":"\r\n\r\n## 基本概念\r\n\r\n### Docker架构\r\n\r\nDocker架构包括以下几个核心组件：\r\n\r\n1. Docker客户端(Client):用户与Docker交互的命令行工具或API。\r\n\r\n2. Docker服务器(Server):负责管理镜像、容器、网络等资源的后台服务。\r\n\r\n3. Docker镜像(Image):是一个只读的模板，包含用于创建容器的文件系统和应用程序代码。\r\n\r\n4. Docker容器(Container):是Docker的基本执行单元，一个镜像可以创建多个容器，容器之间互相隔离，包括文件系统、网络、进程等资源。\r\n\r\n5. Docker Registry(仓库):存储Docker镜像的中央仓库，提供镜像的下载和上传服务。\r\n\r\n6. Docker Compose:是一个用于定义和运行多个容器的工具，简化了容器编排的复杂度。\r\n\r\n7. Docker Swarm:是Docker的集群管理工具，可以将多个Docker主机组成一个虚拟的Docker主机集群，提供负载均衡、容错等功能。\r\n\r\n\r\n这些组件协同工作，构成了Docker强大的应用容器化解决方案\r\n\r\n### Docker隔离原理\r\n\r\nDocker通过多种技术实现容器的隔离，包括：\r\n\r\n1. 命名空间(Namespace)：Docker使用多种命名空间，如mount、pid、net、ipc、uts等，将容器的进程、网络、文件系统等资源与主机分离，使得容器拥有自己独立的运行环境。\r\n\r\n2. 控制组(Cgroups)：Docker使用Cgroups控制组技术，限制容器内部进程使用的资源，如CPU、内存、磁盘等。\r\n\r\n3. 文件系统：Docker使用OverlayFS技术，将容器的文件系统与主机分离，每个容器都有自己独立的文件系统，并可以使用Docker镜像中的文件系统层，实现镜像共享和快速启动。\r\n\r\n4. 安全机制：Docker使用安全机制，如seccomp、AppArmor、SELinux等，限制容器内部进程的系统调用和权限，防止容器被攻击和滥用。\r\n\r\n5. 网络隔离：Docker使用网络隔离技术，将容器的网络与主机分离，每个容器都有自己独立的网络命名空间和IP地址，实现容器之间的隔离和互通。\r\n\r\n通过这些技术的组合，Docker实现了容器之间的隔离，使得容器可以在相互独立的环境中运行，同时也保障了容器的安全和稳定性。\r\n\r\n\r\n## 安装\r\n\r\n### 在线安装\r\n\r\n(1) 安装docker需要关闭selinux,由于selinux和LXC（Docker实现虚拟化的方式）有冲突，所以需要禁用selinux。编辑/etc/selinux/config，设置两个关键变量。\r\n\r\n```shell\r\nSELINUX=disabled\r\n\r\nSELINUXTYPE=targeted\r\n```\r\n\r\n(2) 关闭防火墙\r\n\r\n```shell\r\nsystemctl stop firewalld\r\n```\r\n\r\n(3) 安装容器\r\n\r\n```shell\r\n# 如果有旧版本的话先移除旧版本\r\nsudo yum remove docker*\r\n# 更新yum源\r\nyum -y update\r\n# 加软件源\r\n# sudo yum install -y yum-utils\r\nyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\r\n# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\n# 更新缓存\r\nyum makecache fast\r\n# 安装\r\nyum -y install docker-ce\r\n# sudo yum install docker-ce docker-ce-cli containerd.io\r\n```\r\n\r\n**安装指定版本的docker image**\r\n\r\n```shell\r\n#找到所有可用docker版本列表\r\nyum list docker-ce --showduplicates | sort -r\r\n# 安装指定版本，用上面的版本号替换<VERSION_STRING>\r\nsudo yum install docker-ce-<VERSION_STRING>.x86_64 docker-ce-cli-\r\n<VERSION_STRING>.x86_64 containerd.io\r\n#例如：\r\n#yum install docker-ce-3:20.10.5-3.el7.x86_64 docker-ce-cli-3:20.10.5-3.el7.x86_64 containerd.io\r\n#注意加上.x86_64大版本号\r\n```\r\n(4) 启动服务\r\n\r\n```shell\r\nsystemctl start docker\r\n```\r\n\r\n(5) 测试容器\r\n\r\n```shell\r\ndocker run hello-world\r\n# PS: centos7安装命令 yum -y install docker-ce | ubuntu安装命令 apt install docker-ce\r\n```\r\n\r\n### 离线安装\r\n\r\n(1) [下载离线包](https://download.docker.com/linux/static/stable/x86_64/)\r\n\r\n> [centos rpm版本](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\r\n> `rpm -ivh xxx.rpm`\r\n> 可以下载tar,解压启动即可\r\n> [官方文档](https://docs.docker.com/engine/install/binaries/#install-daemon-and-client-binaries-on-linux)\r\n\r\n(2) 解压\r\n\r\n```shell\r\ntar -zxvf docker-18.06.1-ce.tgz\r\n```\r\n\r\n(3) 将解压出来的docker文件内容移动到/usr/bin/目录下\r\n\r\n```shell\r\ncp docker/* /usr/bin/\r\n```\r\n\r\n(4) 将docker注册为service\r\n```\r\nvim /etc/systemd/system/docker.service\r\n```\r\n> `vim /etc/systemd/system/docker.service`\r\n> `lib/systemd/system`、`/usr/lib/systemd/system`、`/etc/systemd/system`三个地方都可以\r\n> `lib/systemd/system`真实地址是`/usr/lib/system/system`地址\r\n> `/usr/lib/systemd/system/`软件包安装的单元\r\n> `/etc/systemd/system/`系统管理员安装的单元,优先级更高\r\n> 优先级为`/etc/systemd/system`，`/run/systemd/system`，`/lib/systemd/system`\r\n> 如果同一选项三个地方都配置了，优先级高的会覆盖优先级低的。\r\n\r\n编辑docker.service\r\n```shell\r\n[Unit]\r\nDescription=Docker Application Container Engine\r\nDocumentation=https://docs.docker.com\r\nAfter=network-online.target firewalld.service\r\nWants=network-online.target\r\n\r\n[Service]\r\nType=notify\r\n# the default is not to use systemd for cgroups because the delegate issues still\r\n# exists and systemd currently does not support the cgroup feature set required\r\n# for containers run by docker\r\n\r\nExecStart=/usr/bin/dockerd\r\n# ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\r\n\r\nExecReload=/bin/kill -s HUP $MAINPID\r\n\r\n# Having non-zero Limit*s causes performance problems due to accounting overhead\r\n# in the kernel. We recommend using cgroups to do container-local accounting.\r\n\r\nLimitNOFILE=infinity\r\n\r\nLimitNPROC=infinity\r\n\r\nLimitCORE=infinity\r\n\r\n# Uncomment TasksMax if your systemd version supports it.\r\n# Only systemd 226 and above support this version.\r\n# TasksMax=infinity\r\n\r\nTimeoutStartSec=0\r\n\r\n# set delegate yes so that systemd does not reset the cgroups of docker containers\r\n\r\nDelegate=yes\r\n\r\n# kill only the docker process, not all processes in the cgroup\r\n\r\nKillMode=process\r\n\r\n# restart the docker process if it exits prematurely\r\n\r\nRestart=on-failure\r\n\r\nStartLimitBurst=3\r\n\r\nStartLimitInterval=60s\r\n\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\n(5) 添加文件权限并启动docker\r\n\r\n```shell\r\nchmod +x /etc/systemd/system/docker.service\r\n```\r\n\r\n(6) 重载unit配置文件\r\n\r\n```shell\r\nsystemctl daemon-reload\r\n```\r\n\r\n(7) 启动Docker\r\n\r\n```shell\r\nsystemctl start docker\r\n```\r\n\r\n(8) 设置开机自启\r\n\r\n```shell\r\nsystemctl enable docker.service\r\n```\r\n\r\n(9) 查看Docker状态\r\n\r\n```shell\r\nsystemctl status docker\r\n```\r\n\r\n(10) 查看Docker版本\r\n\r\n```shell\r\ndocker -v\r\n```\r\n\r\n## 卸载\r\n\r\n**CentOS上卸载**\r\n\r\n```shell\r\n# 停止所有运行的容器\r\nsudo docker stop $(docker ps -aq)\r\n# 删除所有容器\r\nsudo docker rm $(docker ps -aq)\r\n# 删除所有镜像\r\nsudo docker rmi $(docker images -q)\r\nsudo systemctl stop docker\r\nsudo yum remove docker-ce docker-ce-cli containerd.io\r\nsudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\r\n# 删除Docker数据目录\r\nsudo rm -rf /var/lib/docker\r\nsudo rm -rf /var/lib/containerd\r\nsudo rm -rf /etc/systemd/system/docker.service.d\r\nsudo rm -rf /etc/systemd/system/docker.service\r\nsudo rm -rf /var/run/docker\r\nsudo rm -rf /usr/local/docker\r\nsudo rm -rf /etc/docker\r\nsudo rm -rf /usr/bin/docker* /usr/bin/containerd* /usr/bin/runc /usr/bin/ctr\r\n\r\n```\r\n\r\n\r\n## 常用命令\r\n\r\n### docker images\r\n\r\n- 查看镜像\r\n```shell\r\ndocker images\r\n-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；\r\n--digests :显示镜像的摘要信息；\r\n-f :显示满足条件的镜像；\r\n--format :指定返回值的模板文件；\r\n--no-trunc :显示完整的镜像信息；\r\n-q :只显示镜像ID。\r\n```\r\n\r\n### docker pull\r\n\r\n- 拉取镜像\r\n```shell\r\ndocker pull name:tag\r\n```\r\n\r\n### docker push\r\n\r\n- 推送镜像\r\n```shell\r\ndocker push myapache:v1\r\n```\r\n\r\n### docker save\r\n\r\n- 导出镜像\r\n```shell\r\ndocker save -o <保存路径> <镜像名称:标签>(或者镜像id)\r\ndocker save -o ./ubuntu18.tar ubuntu:18.04\r\n# docker save 仓库名称 > 本地镜像文件名称.tar\r\n```\r\n\r\n### docker load\r\n\r\n- 导入镜像\r\n```shell\r\ndocker load -i 文件名\r\n# 或者\r\ndocker load --input 文件名\r\ndocker load --input ./ubuntu18.tar\r\ndocker load < 本地镜像.tar\r\n```\r\n\r\n### docker rmi\r\n\r\n- 删除镜像\r\n```shell\r\ndocker rmi images_id\r\n```\r\n\r\n- 删除所有镜像\r\n```shell\r\ndocker rmi `docker images -q`\r\n```\r\n\r\n### docker rm\r\n\r\n- 删除容器\r\n```shell\r\ndocker rm [OPTIONS] container_id\r\n\r\nOPTIONS说明:\r\n-f: 通过 SIGKILL 信号强制删除一个运行中的容器。\r\n-l: 移除容器间的网络连接，而非容器本身。\r\n-v: 删除与容器关联的卷。\r\n```\r\n\r\n- 删除所有容器\r\n```shell\r\ndocker rm $(docker ps -a -q) \r\n或者\r\ndocker rm `docker ps -a -q`\r\n```\r\n\r\n### docker search\r\n\r\n- 搜索镜像\r\n```shell\r\ndocker search *\r\n```\r\n\r\n### docker history\r\n\r\n- 查看指定镜像的创建历史\r\n```shell\r\ndocker history [OPTIONS] IMAGE\r\n\r\nOPTIONS说明:\r\n-H :以可读的格式打印镜像大小和日期，默认为true；\r\n--no-trunc :显示完整的提交记录；\r\n-q :仅列出提交记录ID。\r\n```\r\n\r\n### docker ps\r\n\r\n- 查看正在运行的容器\r\n```shell\r\ndocker ps\r\n# 或者\r\ndocker container ls\r\n```\r\n\r\n- 查看所有容器\r\n```shell\r\ndocker ps -a\r\n# 或者\r\ndocker container ls -a\r\n```\r\n\r\n### docker export\r\n\r\n- 导出容器\r\n```shell\r\ndocker export <容器名> > <保存路径>\r\ndocker export ubuntu18 > ./ubuntu18.tar\r\n# 或者\r\ndocker export -o <容器名> <保存路径> # -o :将输入内容写到文件。\r\n# 将id为a404c6c174a2的容器按日期保存为tar文件\r\ndocker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\r\n```\r\n\r\n### docker import\r\n\r\n- 导入容器\r\n```shell\r\ndocker import <文件路径> <容器名>\r\ndocker import ./ubuntu18.tar ubuntu18\r\n```\r\n\r\n### docker (container) start\r\n\r\n- 启动容器\r\n```shell\r\ndocker container start container_id\r\n```\r\n\r\n### docker stop\r\n\r\n- 停止所有容器\r\n```shell\r\ndocker stop $(docker ps -a -q)\r\n```\r\n\r\n### docker kill\r\n\r\n- 杀掉运行中的容器\r\n```shell\r\ndocker kill -s(可忽略) CONTAINER\r\n# -s :向容器发送一个信号 例:\r\ndocker kill -s KILL mynginx\r\n```\r\n\r\n### docker exec\r\n\r\n- 在运行的容器中执行命令\r\n```shell\r\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\r\n# 例如：进入容器\r\ndocker exec -it 容器id /bin/bash\r\n# -i:即使没有附加也保持STDIN打开 -t:分配一个伪终端\r\n# /bin/bash: 在container中启动一个bash shell。exit:退出bash shell\r\n```\r\n\r\n### docker pause\r\n\r\n- 暂停容器中所有的进程\r\n```shell\r\ndocker pause container_id\r\n```\r\n\r\n### docker unpause\r\n\r\n- 恢复容器中所有的进程\r\n```shell\r\ndocker unpause container_id\r\n```\r\n\r\n### docker create\r\n\r\n- 创建一个新的容器不运行\r\n```shell\r\ndocker create # 参数同docker run\r\n```\r\n\r\n### docker run\r\n\r\n- 创建一个新的容器并运行\r\n```shell\r\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...].其中，OPTIONS是一系列用于配置容器运行方式的选项，IMAGE是要运行的容器镜像，COMMAND是在容器内部执行的命令，ARG是传递给命令的参数。\r\nOPTIONS:\r\n-i: 以交互模式运行容器，通常与-t同时使用\r\n-t: 为容器重新分配一个伪输入终端，通常与-i同时使用\r\n-it 以交互模式运行\r\n-P: 随机端口映射，容器内部端口随机映射到主机的端口\r\n-p: 指定端口映射，格式为主机(宿主)端口:容器端口\r\n-d: 后台运行并返回容器ID\r\n-v,--volume: 挂载主机目录:容器目录,绑定一个卷\r\n-u,--user=\"\": 指定容器的用户\r\n-a,--attach=[]: 登录容器（必须是以docker run -d启动的容器）\r\n-w,--workdir=\"\": 指定容器的工作目录\r\n-c,--cpu-shares=0: 设置容器CPU权重,在CPU共享场景使用\r\n-e username=\"ritchie\",--env=[]: 设置环境变量容器中可以使用该环境变量\r\n-m,--memory=\"\": 指定容器的内存上限\r\n-P,--publish-all=false: 指定容器暴露的端口\r\n-h,--hostname=\"\": 指定容器的主机名\r\n--name=””: 容器命名\r\n--cap-add=[]: 添加权限,权限清单详见:http://linux.die.net/man/7/capabilities\r\n--cap-drop=[]: 删除权限,权限清单详见:http://linux.die.net/man/7/capabilities\r\n--cidfile=\"\": 运行容器后,在指定文件中写入容器PID值,一种典型的监控系统用法\r\n--cpuset=\"\": 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU\r\n--device=[]: 添加主机设备给容器，相当于设备直通\r\n--dns=[]: 指定容器的dns服务器\r\n--dns-search=[]: 指定容器的dns搜索域名,写入到容器的/etc/resolv.conf文件\r\n--entrypoint=\"\": 覆盖image的入口点\r\n--env-file=[]: 从指定文件读入环境变量\r\n--expose=[]: 指定容器暴露的端口,即修改镜像的暴露端口\r\n--link=[]: 添加链接到另一个容器,使用其他容器的IP、env等信息\r\n--lxc-conf=[]: 指定容器的配置文件,只有在指定`--exec-driver=lxc`时使用\r\n--net=bridge(或--network=bridge): 容器网络设置。bridge:使用docker daemon指定的网桥。host:容器使用主机的网络。container:NAME_or_ID:使用其他容器的网路，共享IP和PORT等网络资源。none:容器使用自己的网络（类似`--net=bridge`），但是不进行配置\r\n--privileged=false: 指定容器是否为特权容器,特权容器拥有所有的capabilities(能力),它赋予了容器几乎与宿主机相同的权限\r\n--restart=\"no\": 指定容器停止后的重启策略。no:容器退出时不重启。on-failure:只在容器以非0状态码退出时重启，可选的，可以退出docker daemon尝试重启容器的次数。on-failure:3，在容器非正常退出时重启容器，最多重启3次。always:不管退出状态码是什么始终重启容器，当指定always时，docker daemon将无限次数地重启容器，容器也会在daemon启动时尝试重启，不管容器当时的状态如何。unless-stopped:不管退出状态码是什么始终重启容器，不过当daemon启动时，如果容器之前已经为停止状态，不要尝试启动它。\r\n--rm: 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)\r\n--sig-proxy=true: 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\r\n--log-driver=json-file --log-opt max-size=10m --log-opt max-file=3: 使用--log-opt参数限制容器日志大小。在启动容器时,可以使用--log-opt参数设置日志驱动程序的选项.在这个例子中,我们设置了以下选项:max-size=10m:限制单个日志文件的最大大小为10MB.max-file=3:限制日志文件的数量为3个.当日志文件达到10MB时，Docker会自动轮换日志文件，保留最新的3个日志文件。\r\n```\r\n\r\n### docker inspect\r\n\r\n- 获取容器/镜像的元数据\r\n```shell\r\ndocker inspect [OPTIONS] NAME|ID [NAME|ID...]\r\nOPTIONS说明:\r\n-f: 指定返回值的模板文件。\r\n-s: 显示总的文件大小。\r\n--type: 为指定类型返回JSON。\r\n```\r\n\r\n### docker top\r\n\r\n- 查看容器中运行的进程信息\r\n```shell\r\ndocker top container_id\r\n```\r\n\r\n### docker attach\r\n\r\n- 连接到正在运行中的容器\r\n```shell\r\ndocker attach container_id\r\n```\r\n\r\n### docker wait\r\n\r\n- 阻塞运行直到容器停止，然后打印出它的退出代码\r\n```shell\r\ndocker wait containser_id\r\n```\r\n\r\n### docker events\r\n\r\n- 从服务器获取实时事件\r\n```shell\r\ndocker events OPTIONS\r\n\r\nOPTIONS说明:\r\n-f: 根据条件过滤事件\r\n--since: 从指定的时间戳后显示所有事件\r\n--until: 流水时间显示到指定的时间为止\r\ndocker events --since=\"1467302400\"\r\n```\r\n\r\n### docker logs\r\n\r\n- 查看日志\r\n```shell\r\ndocker logs [OPTIONS] CONTAINER\r\nOPTIONS说明:\r\n--details: 显示更多的信息\r\n-f, --follow: 跟踪实时日志\r\n--since string: 显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）\r\n--tail string: 从日志末尾显示多少行日志，默认是all\r\n-t, --timestamps: 显示时间戳\r\n--until string: 显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）\r\n\r\n# 查看指定时间后的日志，只显示最后100行：\r\ndocker logs -f -t --since=\"2018-02-08\" --tail=100 CONTAINER_ID\r\n# 查看最近30分钟的日志:\r\ndocker logs --since 30m CONTAINER_ID\r\n# 查看某时间之后的日志：\r\ndocker logs -t --since=\"2018-02-08T13:23:37\" CONTAINER_ID\r\n# 查看某时间段日志：\r\ndocker logs -t --since=\"2018-02-08T13:23:37\" --until \"2018-02-09T12:23:37\" CONTAINER_ID\r\n```\r\n\r\n### docker port\r\n\r\n- 列出指定的容器的端口映射\r\n```shell\r\ndocker port container_id\r\n```\r\n\r\n### docker commit\r\n\r\n- 提交\r\n```shell\r\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\r\n\r\nOPTIONS说明:\r\n-a: 提交的镜像作者；\r\n-c: 使用Dockerfile指令来创建镜像；\r\n-m: 提交时的说明文字；\r\n-p: 在commit时，将容器暂停。\r\n\r\n# 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\r\ndocker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2 mymysql:v1\r\n```\r\n\r\n### docker cp\r\n\r\n- 容器与主机之间的数据拷贝\r\n```shell\r\n# 将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下\r\ndocker cp /www/runoob 96f7f14e99ab:/www/\r\n```\r\n\r\n### docker diff\r\n\r\n- 查看容器文件结构更改\r\n```shell\r\ndocker diff mymysql\r\n```\r\n\r\n### docker build\r\n\r\n- 使用 Dockerfile 创建镜像\r\n```shell\r\ndocker build\r\n--build-arg=[]: 设置镜像创建时的变量\r\n--cpu-shares: 设置cpu使用权重\r\n--cpu-period: 限制CPU CFS周期\r\n--cpu-quota: 限制CPU CFS配额\r\n--cpuset-cpus: 指定使用的CPU id\r\n--cpuset-mems: 指定使用的内存id\r\n--disable-content-trust: 忽略校验，默认开启\r\n-f: 指定要使用的Dockerfile路径\r\n--force-rm: 设置镜像过程中删除中间容器\r\n--isolation: 使用容器隔离技术\r\n--label=[]: 设置镜像使用的元数据\r\n-m: 设置内存最大值\r\n--memory-swap: 设置Swap的最大值为内存+swap，\"-1\"表示不限swap\r\n--no-cache: 创建镜像的过程不使用缓存\r\n--pull: 尝试去更新镜像的新版本\r\n--quiet, -q: 安静模式，成功后只输出镜像ID\r\n--rm: 设置镜像成功后删除中间容器\r\n--shm-size: 设置/dev/shm的大小，默认值是64M\r\n--ulimit: Ulimit配置\r\n--squash: 将Dockerfile中所有的操作压缩为一层。\r\n--tag, -t: 镜像的名字及标签，通常name:tag或者name格式；可以在一次构建中为一个镜像设置多个标签。\r\n--network: 默认default。在构建期间设置RUN指令的网络模式\r\n```\r\n`docker build`最后参数表示Docker上下文的路径。当你执行`docker build`命令并指定一个Dockerfile时，Docker会将这个路径下的所有文件和目录发送到Docker守护进程，以便它可以在构建镜像时使用这些文件。如果你在命令行中看到一个点作为`docker build`命令的最后一个参数，即`docker build .`通常是因为用户想要在当前目录下执行构建，并且没有明确指定一个不同的路径。这里的点（.）表示当前目录，Dockerfile将在这个目录下查找任何需要的构建上下文。如果你有一个特定的Dockerfile名字或者你想要指定一个不同的上下文目录，你可以使用**-f**标志来指定Dockerfile的路径和名字，然后指定你想要发送到守护进程的上下文目录：`docker build -f /path/to/a/Dockerfile /path/to/a/context/`，在这个例子中，Docker会使用/path/to/a/Dockerfile作为构建的Dockerfile，并将/path/to/a/context/目录下的所有文件和目录发送到守护进程。\r\n\r\n### docker login\r\n\r\n- 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\r\n```shell\r\n# -u:登陆的用户名 -p:登陆的密码\r\ndocker login -u -p\r\n```\r\n\r\n### docker logout\r\n\r\n- 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库Docker Hub\r\n```shell\r\ndocker logout\r\n```\r\n\r\n### docker tag\r\n\r\n- 标记本地镜像，将其归入某一仓库\r\n```shell\r\ndocker tag\r\n```\r\n\r\n### docker network\r\n\r\n- 创建网络\r\n```shell\r\ndocker network create -d bridge my-net\r\ndocker network ls\r\n```\r\n\r\n- 指定容器ip\r\n\r\n```shell\r\n# 使用自定义Bridge网络\r\n# 创建了一个名为mybridge的自定义Bridge网络，其IP地址段为172.25.0.0/16。\r\ndocker network create --driver=bridge --subnet=172.25.0.0/16 mybridge\r\n# 在mybridge网络中创建了一个名为mycontainer的容器，并为其分配了静态IP地址172.25.0.2。\r\ndocker run -itd --name=mycontainer --network=mybridge --ip=172.25.0.2 your_image_name\r\n\r\n# 使用Macvlan网络模式\r\n# 创建名为macvlan-network的Macvlan网络,其IP地址段为192.168.88.0/24,网关为192.168.88.254,并指定了父网卡为eth0。\r\ndocker network create -d macvlan --subnet=192.168.88.0/24 --gateway=192.168.88.254 -o parent=eth0 macvlan-network\r\n# 在macvlan-network网络中创建了一个名为mycontainer的容器，并为其分配了静态IP地址192.168.88.56\r\ndocker run -itd --name=mycontainer --privileged=true --network=macvlan-network --ip=192.168.88.56 your_image_name\r\n```\r\n```yml\r\n# 使用Docker Compose\r\nversion: '3'  \r\nservices:  \r\n  myservice:  \r\n    image: your_image_name  \r\n    networks:  \r\n      mynet:  \r\n        ipv4_address: 172.18.0.2  \r\nnetworks:  \r\n  mynet:  \r\n    ipam:  \r\n      config:  \r\n        - subnet: 172.18.0.0/16  \r\n          gateway: 172.18.0.1\r\n```\r\n\r\n> [Docker有几种网络模式](https://mp.weixin.qq.com/s/KU3bpxiNbHGJQ_XVRqsedg)\r\n\r\n### docker system\r\n\r\n```shell\r\n# 这个命令的缩写docker info\r\ndocker system info\r\n# 提供Docker整体磁盘使用率的概况，包括镜像、容器和(本地)volume。所以我们现在随时都可以查看Docker使用了多少资源。\r\ndocker system df\r\n# 显示Docker系统中的实时事件，如容器创建、启动、停止、删除等。\r\ndocker system events\r\n# 这两个命令用于设置Docker守护进程的网络相关配置，例如DNS查找超时时间和HTTP代理设置。\r\ndocker system dial-timeout 和 docker system http-proxy\r\n# 列出所有当前配置文件。\r\ndocker system config ls\r\n# (谨慎使用)此命令将重置Docker到初始化状态，删除所有数据包括镜像、容器、网络和定制配置。\r\ndocker system reset\r\n```\r\n### docker prune\r\n\r\n**docker system prune**\r\n\r\n官网描述：删除所有未使用的容器、网络、映像（包括悬挂的和未引用的），以及卷（可选）。\r\n> **名词解释**：\r\n> 未使用的容器：所有已停止的容器将被删除。\r\n> 未使用的镜像：只有悬挂的镜像（未被任何容器引用）将被删除，除非使用了-a或--all参数。\r\n> 未使用的网络：所有未被容器使用的自定义网络将被删除。\r\n> 未使用的卷（如果使用--volumes或-v选项）：所有未被容器引用的卷将被删除。\r\n> **相关参数**：\r\n> -a,--all：删除未被任何容器引用的所有镜像，而不仅仅是悬挂的镜像。\r\n> --filter：根据提供的条件过滤要删除的内容。\r\n> --force,-f：跳过确认步骤，直接执行删除，不加的话在执行步骤时需要手动确认，建议不用。手动容错率高一点\r\n> --volumes,-v：删除所有未被至少一个容器引用的卷。\r\n\r\n```shell\r\n# 删除所有未使用的容器、镜像、网络\r\ndocker system prune\r\n#删除所有未使用的容器、镜像（包括未被引用的）、网络\r\ndocker system prune -a\r\n# 删除所有未使用的容器、镜像、网络、卷\r\ndocker system prune --volumes\r\n# 最后使用时间超过1小时的日志保留\r\ndocker system prune --filter \"until=1h\"\r\n# 删除所有带有“version=1.21.0”标签的未使用的容器、镜像和网络\r\ndocker system prune --filter \"label=version=1.21.0\"\r\n# 删除所有不带有“app=nginx”标签的未使用的容器、镜像和网络\r\ndocker system prune --filter \"label!=app=nginx\"\r\ndocker system prune -a -v --filter \"label!=app=nginx\"\r\n```\r\nlabel可以使用`docker inspect <容器id或名称>`来查看labels\r\n```json\r\n{\r\n  \r\n  \"Labels\": {\r\n              \"com.docker.compose.config-hash\": \"b637c41bf29efe8fcd1d3c7baa3ad5ba8dc44f21cec0d3937d665fb79df76644\",\r\n              \"com.docker.compose.container-number\": \"1\",\r\n              \"com.docker.compose.oneoff\": \"False\",\r\n              \"com.docker.compose.project\": \"jpom\",\r\n              \"com.docker.compose.project.config_files\": \"docker-compose.yml\",\r\n              \"com.docker.compose.project.working_dir\": \"/www/docker-compose/jpom\",\r\n              \"com.docker.compose.service\": \"jpom\",\r\n              \"com.docker.compose.version\": \"1.29.2\"\r\n  }\r\n}\r\n```\r\n删除特定项目的所有容器、图像和网络：\r\n```shell\r\ndocker system prune --filter \"label=com.docker.compose.project=jpom\"\r\n```\r\n删除特定服务的所有容器、图像和网络：\r\n```shell\r\ndocker system prune --filter \"label=com.docker.compose.service=jpom\"\r\n```\r\n删除使用特定版本的Docker Compose创建的所有容器、图像和网络：\r\n```shell\r\ndocker system prune --filter \"label=com.docker.compose.version=1.29.2\"\r\n```\r\n\r\n**docker image prune**\r\n\r\n修剪镜像,清理none镜像(虚悬镜像),默认情况下，`docker image prune`命令只会清理虚无镜像（没被标记且没被其它任何镜像或容器引用的镜像）。当添加`-a`或`--all`选项时，`docker image prune`的行为会发生变化。这个命令不仅会删除未使用的镜像，还会删除所有没有标签（即dangling或者说悬挂的）的镜像，即使这些镜像被其他标记了的镜像所引用。换句话说，`docker image prune -a` 会清理所有不带有标签且不在使用中的镜像，以及所有未被任何容器引用的镜像。默认情况下，系统会提示是否继续。要绕过提示，请使用-f或--force标志。可以使用--filter标志使用过滤表达式来限制修剪哪些镜像。例如，只考虑24小时前创建的镜像：\r\n```shell\r\ndocker image prune -a --filter \"until=24h\"\r\n```\r\n\r\n**docker container prune**\r\n\r\n修剪容器,停止容器后不会自动删除这个容器，除非在启动容器的时候指定了–rm标志。使用`docker ps -a`命令查看Docker主机上包含停止的容器在内的所有容器。要清理掉这些，可以使用`docker container prune`命令。默认情况下，系统会提示是否继续。要绕过提示，请使用-f或--force标志。默认情况下，所有停止状态的容器会被删除。可以使用--filter标志来限制范围。例如，可以只删除24小时之前创建的停止状态的容器：\r\n\r\n**docker volume prune**\r\n\r\n修剪卷。卷可以被一个或多个容器使用，并占用Docker主机上的空间。卷永远不会被自动删除，因为这么做会破坏数据。\r\n\r\n**docker network prune**\r\n\r\n修剪网络。Docker网络不会占用太多磁盘空间，但是它们会创建iptables规则，桥接网络设备和路由表条目。要清理这些东西，可以使用`docker network prune`来清理没有被容器未使用的网络。\r\n\r\n\r\n### 其他\r\n\r\n#### 查看镜像版本为latest的具体版本号\r\n```bash\r\ndocker image inspect nginx:latest|grep -i version\r\n```\r\n\r\n#### 查看docker日志文件大小\r\n```shell\r\nls -lh $(find /var/lib/docker/containers/ -name '*-json.log')\r\n```\r\n#### 删除日志文件\r\n```shell\r\n rm -rf /var/lib/docker/containers/*/*.log\r\n```\r\n#### 查看docker日志存储路径\r\n\r\n> 一般在/var/lib/docker/containers/container_id/\\*-json.log\r\n\r\n```shell\r\ndocker inspect -f '{{.LogPath}}' <container_id_or_name>\r\n```\r\n\r\n#### 设置日志文件的大小\r\n1. 使用--log-opt参数限制容器日志大小:在启动容器时,可以使用--log-opt参数设置日志驱动程序的选项。示例：`docker run -d --name example-container --log-opt max-size=10m --log-opt max-file=3 nginx:latest`。在这个例子中，我们设置了以下选项：max-size=10m:限制单个日志文件的最大大小为10MB。max-file=3:限制日志文件的数量为3个。当日志文件达到10MB时，Docker会自动轮换日志文件，保留最新的3个日志文件。\r\n2. 永久方法：全局设置：新建/etc/docker/daemon.json，若有就不用新建了；添加log-dirver和log-opts参数。\r\n```json\r\n{\r\n\"log-driver\":\"json-file\",\r\n\"log-opts\":{\r\n\t\"max-size\":\"500m\",\r\n    \"max-file\":\"3\"\r\n\t}\r\n}\r\n```\r\nmax-size=500m，意味着一个容器日志大小上限是500M，max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。\r\n\r\n\r\n### 表格\r\n\r\n|   **命令**    |                           **作用**                           |\r\n| :-----------: | :----------------------------------------------------------: |\r\n|  **attach**   | **绑定到运行中容器的 标准输入, 输出,以及错误流（这样似乎也能进入容器内容，但 是一定小心，他们操作的就是控制台，控制台的退出命令会生效，比如 redis,nginx...）** |\r\n|   **build**   |               **从一个Dockerfile文件构建镜像**               |\r\n|  **commit**   |            **把容器的改变 提交创建一个新的镜像**             |\r\n|    **cp**     | **容器和本地文件系统间 复制 文件/文件夹cp -rp[原文件或目录] [目标文件或目录] －r 复制目录 - p 保留文件属性** |\r\n|  **create**   | **创建新容器，但并不启动（注意与docker run 的区分）需要手动启动。start\\\\stop** |\r\n|   **diff**    | **检查容器里文件系统结构的更改【A：添加文件或目录 D：文件或者目录删除 C：文 件或者目录更改】** |\r\n|  **events**   |                   **获取服务器的实时事件**                   |\r\n|   **exec**    |                 **在运行时的容器内运行命令**                 |\r\n|  **export**   | **导出容器的文件系统为一个tar文件。commit是直接提交成镜像，export是导出成文 件方便传输** |\r\n|  **history**  |                      **显示镜像的历史**                      |\r\n|  **images**   |                       **列出所有镜像**                       |\r\n|  **import**   | **导入tar的内容创建一个镜像，再导入进来的镜像直接启动不了容器。 /docker-entrypoint.sh nginx -g 'daemon o** |\r\n|   **info**    |                       **显示系统信息**                       |\r\n|  **inspect**  |                 **获取docker对象的底层信息**                 |\r\n|   **kill**    |                   **杀死一个或者多个容器**                   |\r\n|   **load**    |         **从tar文件加载镜像 docker load -i xxx.tar**         |\r\n|   **login**   |                   **登录Docker registry**                    |\r\n|  **logout**   |                   **退出Docker registry**                    |\r\n|   **logs**    | **获取容器日志；容器以前在前台控制台能输出的所有内容，都可以看到** |\r\n|   **pause**   |                   **暂停一个或者多个容器**                   |\r\n|   **port**    |                    **列出容器的端口映射**                    |\r\n|    **ps**     |    **列出所有容器 docker ps -a 列出包括已停止的所有容器**    |\r\n|   **pull**    |          **从registry下载一个image 或者repository**          |\r\n|   **push**    |          **给registry推送一个image或者repository**           |\r\n|  **rename**   |                      **重命名一个容器**                      |\r\n|  **restart**  |                   **重启一个或者多个容器**                   |\r\n|    **rm**     |                   **移除一个或者多个容器**                   |\r\n|    **rmi**    |                   **移除一个或者多个镜像**                   |\r\n|    **run**    |                      **创建并启动容器**                      |\r\n|   **save**    | **把一个或者多个镜像保存为tar文件 docker save -o [容器名称]:[容器标签] > xxx.tar** |\r\n|  **search**   |                   **去docker hub寻找镜像**                   |\r\n|   **start**   |                   **启动一个或者多个容器**                   |\r\n|   **stop**    |                   **停止一个或者多个容器**                   |\r\n|    **tag**    |          **给源镜像创建一个新的标签，变成新的镜像**          |\r\n|  **unpause**  |                      **pause的反操作**                       |\r\n|  **update**   |              **更新一个或者多个docker容器配置**              |\r\n|  **version**  |           **Show the Docker version information**            |\r\n| **container** |                         **管理容器**                         |\r\n|   **image**   |                         **管理镜像**                         |\r\n|  **network**  |                         **管理网络**                         |\r\n|  **volume**   |                          **管理卷**                          |\r\n|   **stats**   |                **显示容器资源的实时使用状态**                |\r\n|    **top**    |                  **显示正在运行容器的进程**                  |\r\n\r\n\r\n> [Docker常用命令，还有谁不会？](https://mp.weixin.qq.com/s/fzlNnJe9SMA5k3TDXOfZUA)\r\n\r\n## Dockerfile\r\n\r\n1. 文件没有后缀，名字就是Dockerfile\r\n2. 命令约定全部使用大写，如RUN,ADD,FROM\r\n3. 第一条命令必需是FROM，作用是指定在哪个基础镜像上创建镜像。\r\n4. 注释以“#”形状\r\n\r\n### 常用参数/命令\r\n\r\n#### FROM\r\n\r\n语法：\r\n\r\n```dockerfile\r\nFROM 镜像名\r\n#例 在jre8镜像基础上创建自己镜像。\r\nFROM livingobjects/jre8\r\n```\r\n最简单的命令，指定在哪个基础镜像上创建镜像\r\n\r\n#### RUN\r\n\r\n它接受命令作为参数并用于创建镜像,RUN命令用于创建镜像。在镜像构建的过程中执行,这个指令有两种格式\r\n\r\n第一种形式：\r\n\r\n```dockerfile\r\nRUN chown user2:user2 /home/webapi #以shell形式执行命令，等同于/bin/sh -c\r\n```\r\n\r\n第二种形式：\r\n\r\n```dockerfile\r\nRUN [\"executable\",\"param1\", \"param2\"] # (等同于exec命令形式)，注意此处必须是双引号(\")，因为这种格式被解析为JSON数组。\r\n```\r\n\r\n#### CMD\r\n\r\n语法：\r\n\r\n```dockerfile\r\nCMD [\"executable\", \"param1\", \"param2\"?]\r\n# 例\r\nCMD exec java -Djava.security.egd=file:/dev/./urandom -jar /app.jar\r\n```\r\n\r\n1. 在镜像构建容器后执行\r\n2. 只能存在一条CMD命令\r\n\r\n#### ENTRYPOINT\r\n\r\n语法：\r\n\r\n```dockerfile\r\nENTRYPOINT [\"executable\", \"param1\", \"param2\"?]\r\n# 例\r\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\r\n```\r\n这个命令和CMD功能一样。区别在于ENTRYPOINT后面携带的参数不会被docker run提供的参数覆盖，而CMD会被覆盖。\r\n\r\n##### 扩展CMD与ENTRYPOINT\r\n\r\n二者的区别看：[docker CMD ENTRYPOINT区别终极解读](https://blog.csdn.net/u010900754/article/details/78526443)\r\n\r\n从根本上说, ENTRYPOINT和CMD都是让用户指定一个可执行程序, 这个可执行程序在container启动后自动启动。实际上, 如果你想让自己制作的镜像自动运行程序(不需要在docker run后面添加命令行指定运行的命令), 你必须在Dockerfile里面，使用ENTRYPOINT或者CMD命令。在命令行启动docker镜像时, 执行其他命令行参数，覆盖默认的CMD。和CMD类似, 默认的ENTRYPOINT也在docker run时, 也可以被覆盖. 在运行时, 用--entrypoint覆盖默认的ENTRYPOINT。\r\n\r\ndockerfile中的CMD命令被覆盖：\r\n\r\n![img](https://pic4.zhimg.com/v2-4a8d016349ee808822659ca2bf66fab3_r.jpg)\r\n\r\n**CMD**：提供了容器默认的执行命令。Dockerfile只允许使用一次CMD指令。使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。CMD有三种形式：\r\n\r\n```dockerfile\r\nCMD [\"executable\",\"param1\",\"param2\"] (exec form, thisis the preferred form)\r\n```\r\n\r\n**ENTRYPOINT**：配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\r\n\r\n```dockerfile\r\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\r\n```\r\n\r\n#### ADD\r\n\r\n语法：\r\n\r\n```dockerfile\r\nADD [source directory or URL] [destination directory]\r\n```\r\n\r\n它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。\r\n\r\n1. 如果源是一个URL，那该URL的内容将被下载并复制到容器中。\r\n2. 如果如果文件是可识别的压缩格式，则docker会帮忙解压缩\r\n3. 如果要ADD本地文件，则本地文件必须在docker build PATH指定的path目录下\r\n4. ADD只有在build镜像的时候运行一次，后面运行container的时候不会再重新加载了\r\n\r\nADD指令不仅能够将构建命令所在的主机本地的文件或目录，而且能够将远程URL所对应的文件或目录，作为资源复制到镜像文件系统。所以，可以认为ADD是增强版的COPY，支持将远程URL的资源加入到镜像的文件系统。\r\n\r\nexec格式用法（推荐）：\r\n\r\n```dockerfile\r\nADD [\"<src>\",... \"<dest>\"]\r\n```\r\n\r\n特别适合路径中带有空格的情况。\r\n\r\nshell格式用法：\r\n\r\n```dockerfile\r\nADD <src>... <dest>\r\n```\r\n\r\n对于从远程URL获取资源的情况，由于ADD指令不支持认证，如果从远程获取资源需要认证，则只能使用RUN wget或RUN curl替代。另外，如果源路径的资源发生变化，则该ADD指令将使Docker Cache失效，Dockerfile中后续的所有指令都不能使用缓存。因此尽量将ADD指令放在Dockerfile的后面。\r\n\r\n#### COPY\r\n\r\nCOPY指令能够将构建命令所在的主机本地的文件或目录，复制到镜像文件系统。\r\n\r\nexec格式用法（推荐）：\r\n\r\n```dockerfile\r\nCOPY [\"<src>\",... \"<dest>\"]\r\n```\r\n\r\n特别适合路径中带有空格的情况。\r\n\r\nshell格式用法：\r\n\r\n```dockerfile\r\nCOPY <src>... <dest>\r\n```\r\n\r\n#### EXPOSE\r\n\r\n语法：\r\n\r\n```dockerfile\r\nEXPOSE [port] #暴露容器内部端口\r\n# 例\r\nEXPOSE 5000\r\n```\r\n\r\n暴露的是容器内部端口，不是主机端口，如果外部想使用这个端口需要在运行时映射，如下：**docker run -d -p 127.0.0.1:8080:5000 hello-world**。指令用于标明，这个镜像中的应用将会侦听某个端口，并且希望能将这个端口映射到主机的网络界面上。但是，为了安全，docker run命令如果没有带上响应的端口映射参数，docker并不会将端口映射到宿主机。\r\n\r\n#### MAINTAINER\r\n\r\n语法：\r\n\r\n```dockerfile\r\nMAINTAINER 作者名 #申明作者，辅助使用，放在FROM命令后面\r\n```\r\n\r\n#### WORKDIR\r\n\r\n语法：\r\n\r\n```dockerfile\r\nWORKDIR /path # 指定容器工作目录\r\n```\r\n\r\n#### VOLUME\r\n\r\n语法：\r\n\r\n```dockerfile\r\nVOLUME [\"/dir_1\", \"/dir_2\" ..] # 可以将本地文件夹或者其他container的文件夹挂载到container中，容器即可以访问该目录\r\nVOLUME [\"/data\"] (exec格式指令)\r\n```\r\n\r\nVOLUME指令创建一个可以从本地主机或其他容器挂载的挂载点。经常用到的是**docker run -ti -v /data:/data nginx:1.12 bash**时指定本地路径和容器内路径的映射。\r\n\r\n相信大部分人对`docker run -v`这个参数都比较熟悉，无非就是把宿主机目录和容器目录做映射，以便于容器中的某些文件可以直接保存在宿主机上，实现容器被删除之后数据还在，比如我们把mysql装在容器中，肯定不能说容器被删mysql所有的数据也都不在了。第二个作用是也可以用来实现多容器共享同一份文件。但如果玩过dockerfile的话就知道dockerfile还有个VOLUME指令，如\r\n```dockerfile\r\nFROM centos:latest\r\nRUN groupadd -r redis && useradd -r -g redis rediså\r\nRUN yum -y update &&  yum -y install epel-release && yum -y install redis && yum -y install net-tools\r\nRUN mkdir -p /config && chown -R redis:redis /config\r\nVOLUME /share/data　#声明容器中/share/data为匿名卷\r\nEXPOSE 6379\r\n```\r\n这个指令很容易和启动时的-v指令搞混淆，他们之间到底有什么区别呢，什么时候需要使用volume呢？volume指令指定的位置在容器被删除以后数据文件会被删除吗？如果-v和volume指定了同一个位置，会发生什么事呢？\r\n\r\n1. volume和run -v的区别，什么时候需要使用volume\r\n    容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在Dockerfile中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\r\n\r\n2. 那么Dockerfile中的VOLUME指令实际使用中是不是就是跟docker run中的-v参数一样是将宿主机的一个目录绑定到容器中的目录以达到共享目录的作用呢？\r\n    并不然，其实VOLUME指令只是起到了声明了容器中的目录作为匿名卷，但是并没有将匿名卷绑定到宿主机指定目录的功能。当我们生成镜像的Dockerfile中以Volume声明了匿名卷，并且我们以这个镜像run了一个容器的时候，docker会在安装目录下的指定目录下面生成一个目录来绑定容器的匿名卷（这个指定目录不同版本的docker会有所不同），我当前的目录为：/var/lib/docker/volumes/{容器ID}。\r\n    **总结**：volume只是指定了一个目录，用以在用户忘记启动时指定-v参数也可以保证容器的正常运行。比如mysql，你不能说用户启动时没有指定-v，然后删了容器，就把mysql的数据文件都删了，那样生产上是会出大事故的，所以mysql的dockerfile里面就需要配置volume，这样即使用户没有指定-v，容器被删后也不会导致数据文件都不在了。还是可以恢复的。\r\n\r\n3. volume指令指定的位置在容器被删除以后数据文件会被删除吗\r\n    volume与-v指令一样，容器被删除以后映射在主机上的文件不会被删除。\r\n\r\n4. 如果-v和volume指定了同一个位置，会发生什么事呢？\r\n    会以-v设定的目录为准，其实volume指令的设定的目的就是为了避免用户忘记指定-v的时候导致的数据丢失，那么如果用户指定了-v，自然而然就不需要volume指定的位置了。\r\n    **总结**：其实一般的dockfile如果不是数据库类的这种需要持久化数据到磁盘上的应用，都是无需指定volume的。指定volume只是为了避免用户忘记指定-v时导致的数据全部在容器中，这样的话容器一旦被删除所有的数据都丢失了。\r\n\r\n那么为什么dockerfile中不提供一个能够映射为主机目录:容器目录这样的指令呢？其实这样的设计是有道理的，如果在dockerfile中指定了主机目录，这样dockerfile就不具备了可移植性了，毕竟每个人所需要映射的目录可能是不同的，那么最好的办法就是把这个权利交给每个运行这个dockerfile的人，所以才会有`run -v主机目录:容器目录`这样的指令。\r\n\r\n#### ENV\r\n\r\n语法：\r\n\r\n```dockerfile\r\n# 设置变量，可能在容器和脚本里直接使用\r\nENV key value\r\n#例：\r\nENV WORKPATH /tmp\r\n# 或\r\nENV abc=bye def=$abc\r\n\r\n# 第一种用法用于设置单个变量(第一个空格前为key，之后都是value,包括后面的空格)，第二种用于同时设置多个变量(空格为分隔符，value中包含空格时可以用双引号把value括起来，或者在空格前加反斜线)，当需要同时设置多个环境变量时推荐使用第二种格式。这些环境变量可以通过docker run命令的--env参数来进行修改。\r\n```\r\n\r\n#### ARG\r\n\r\n```dockerfile\r\nARG <name>[=<default value>]\r\n```\r\n\r\nARG指令设置一些创建镜像时的参数，这些参数可以在执行docker build命令时通过`--build-arg= `设置，如果指定的创建参数在Dockerfile中没有指定，创建时会输出错误信息: One or more build-args were not consumed, failing build.\r\n\r\nDockerfile作者可以为ARG设置一个默认参数值，当创建镜像时如果没有传入参数就会使用默认值：\r\n\r\n\r\n我们可以使用ARG或者ENV指令来指定RUN指令使用的变量。我们可以使用ENV定义与ARG定义名称相同的变量来覆盖ARG定义的变量值。如下示例，我们执行\r\n\r\n```dockerfile\r\ndocker build --build-arg CONT_IMG_VER=v2.0.1 Dockerfile\r\n```\r\n\r\n后将获取到的CONTIMGVER变量值为v2.0.0:\r\n\r\n```dockefile\r\nARG CONT_IMG_VER\r\nENV MY_SECRET_KEY=$CONT_IMG_VER\r\n\r\n```\r\n\r\n#### WORKDIR\r\n\r\n```dockerfile\r\nWORKDIR /path/to/workdir\r\n```\r\n\r\nWORKDIR指令用来设置Dockerfile中任何使用目录的命令(包括RUN、CMD、ENTRYPOINT、COPY、ADD等指令)的当前工作目录，此目录如果不存在就会被自动创建，即使这个目录不被使用\r\n\r\n\r\n### 示例\r\n\r\n```dockerfile\r\nFROM anapsix/alpine-java:8_server-jre_unlimited\r\nVOLUME /tmp\r\nENV TZ=Asia/Shanghai\r\nEXPOSE 19990\r\nADD applet-provider.jar app.jar\r\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\r\n```\r\n\r\n```shell\r\n#!/bin/bash\r\necho \"自动构建pc包的镜像和运行容器\"\r\n#1.停掉容器和删掉容器\r\nid=$(docker ps |grep mdjz  | tail -n 1| awk 'RS {print $1 }')\r\necho $id\r\n#杀掉进程\r\necho \"docker kill $id\"\r\ndocker kill $id\r\n#删除容器\r\necho \"docker rm $id\"\r\ndocker rm $id\r\n#删掉镜像\r\nmid=$(docker images |grep mdjz  | tail -n 1| awk 'RS {print $1 }')\r\necho \"docker rmi $mid\"\r\ndocker rmi $mid\r\n#重新打包镜像\r\ndocker build -f /composetest/pc/Dockerfile -t mdjz /composetest/pc/\r\n#运行容器\r\necho \"run app docker run -itd --name mdjz --restart always  -p  19901:19901 \"\r\ndocker run -itd --name mdjz --network=my-net --restart always -p 19901:19901 -v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro mdjz\r\n```\r\n\r\n\r\n> [如何编写最佳的Dockerfile](https://mp.weixin.qq.com/s/x-M5iKvvuseIQwUdVmxSPQ)\r\n> [构建Java镜像的10个最佳实践](https://mp.weixin.qq.com/s/gmZDBuYDXnNdykEx66Y0Cw)\r\n\r\n\r\n## 使用docker安装主流软件\r\n\r\n### 安装mysql8.0\r\n\r\n1. 拉取镜像\r\n```bash\r\ndocker pull mysql:8.0.16\r\n```\r\n2. 创建目录\r\n```bash\r\nmkdir -p /app/mysql/conf /app/mysql/data\r\n```\r\n3. 创建配置文件\r\n```bash\r\nvim /app/mysql/conf/my.cnf\r\n```\r\n配置文件\r\n```\r\n[client]\r\n#socket = /app/mysql/mysqld.sock\r\ndefault-character-set = utf8mb4\r\n\r\n[mysqld]\r\ndatadir = /var/lib/mysql\r\ncharacter_set_server = utf8mb4\r\ncollation_server = utf8mb4_bin\r\nsecure-file-priv= NULL\r\n# Disabling symbolic-links is recommended to prevent assorted security risks\r\nsymbolic-links=0\r\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\r\n# Custom config should go here\r\n!includedir /etc/mysql/conf.d/\r\n```\r\n4. 创建和启动容器\r\n```bash\r\ndocker run --restart=always --network=my-net -d --name mysql \r\n-v /app/mysql/conf/my.cnf:/etc/mysql/my.cnf\r\n-v /app/mysql/data:/var/lib/mysql\r\n-p 3306:3306 -e MYSQL_ROOT_PASSWORD=1qaz@WSX mysql:8.0.16\r\n```\r\n5. 修改mysql密码以及授权可访问主机\r\n进入容器内部\r\n```bash\r\ndocker exec -it mysql /bin/bash\r\n```\r\n连接mysql\r\n```bash\r\nmysql -uroot -p\r\n```\r\n使用mysql库\r\n```bash\r\nuse mysql\r\n```\r\n修改主机及访问密码，设置所有主机可访问\r\n```bash\r\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1qaz@WSX';\r\n```\r\n刷新\r\n```bash\r\nflush privileges;\r\n```\r\n\r\n### 安装nginx\r\n\r\n1. 拉取最新镜像\r\n```bash\r\ndocker pull nginx\r\n```\r\n2. 新建目录\r\n```bash\r\n# 创建挂载目录\r\nmkdir -p /app/nginx/conf /app/nginx/log /app/nginx/html\r\n#创建前端发版的目录\r\nmkdir -p /app/nginx/web_dist /app/nginx/app_dist\r\n```\r\n3. 容器中的nginx.conf文件和conf.d文件夹复制到宿主机\r\n```bash\r\n# 生成容器\r\ndocker run --name nginx -p 9090:80 -d nginx\r\n# 将容器nginx.conf文件复制到宿主机\r\ndocker cp nginx:/etc/nginx/nginx.conf /app/nginx/conf/nginx.conf\r\n# 将容器conf.d文件夹下内容复制到宿主机\r\ndocker cp nginx:/etc/nginx/conf.d /app/nginx/conf/conf.d\r\n# 将容器中的html文件夹复制到宿主机\r\ndocker cp nginx:/usr/share/nginx/html /app/nginx/\r\n```\r\n4. 删掉临时的nginx容器，并且创建新的容器\r\n```bash\r\n# 直接执行docker rm nginx或者以容器id方式关闭容器\r\n# 找到nginx对应的容器id\r\ndocker ps -a\r\n# 关闭该容器\r\ndocker stop nginx\r\n# 删除该容器\r\ndocker rm nginx\r\n# 删除正在运行的nginx容器\r\ndocker run --privileged=true --restart unless-stopped\r\n-p 9090:9090\r\n--name nginx\r\n-v /app/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\r\n-v /app/nginx/conf/conf.d:/etc/nginx/conf.d \\\r\n-v /app/nginx/log:/var/log/nginx \\\r\n-v /app/nginx/html:/usr/share/nginx/html \\\r\n-d nginx:latest\r\n```\r\n> 注意ngin配置文件里面所有的路径指向的都是容器里面的路径，而并非宿主机上面的路径，端口也是指向容器内部的端口，如果路径没有挂载或者挂载不正确访问nginx的时候会出现500错误。\r\n\r\n### 安装nacos\r\n\r\n1. 拉取镜像\r\n```bash\r\ndocker pull nacos/nacos-server:2.2.3\r\n```\r\n2. 创建挂载目录\r\n```bash\r\nmkdir -p /app/nacos/logs/ /app/nacos/conf/\r\n#创建一个配置文件\r\nvim /app/nacos/conf/application.properties\r\n\r\n#修改配置文件\r\nserver.servlet.contextPath=/nacos\r\nserver.error.include-message=ALWAYS\r\nserver.port=18848\r\n\r\ndb.pool.config.connectionTimeout=30000\r\ndb.pool.config.validationTimeout=10000\r\ndb.pool.config.maximumPoolSize=20\r\ndb.pool.config.minimumIdle=2\r\n\r\nnacos.naming.empty-service.auto-clean=true\r\nnacos.naming.empty-service.clean.initial-delay-ms=50000\r\nnacos.naming.empty-service.clean.period-time-ms=30000\r\n\r\nmanagement.metrics.export.elastic.enabled=false\r\n#management.metrics.export.elastic.host=http://localhost:9200\r\nmanagement.metrics.export.influx.enabled=false\r\n\r\nserver.tomcat.accesslog.enabled=true\r\nserver.tomcat.accesslog.pattern=%h %l %u %t \"%r\" %s %b %D %{User-Agent}i %{Request-Source}i\r\nserver.tomcat.basedir=file:.\r\n\r\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\r\nnacos.core.auth.system.type=nacos\r\nnacos.core.auth.enabled=true\r\nnacos.core.auth.caching.enabled=true\r\nnacos.core.auth.enable.userAgentAuthWhite=false\r\nnacos.core.auth.server.identity.key=abc\r\nnacos.core.auth.server.identity.value=abc/123\r\nnacos.core.auth.plugin.nacos.token.cache.enable=false\r\nnacos.core.auth.plugin.nacos.token.expire.seconds=18000\r\nnacos.core.auth.plugin.nacos.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\r\nnacos.istio.mcp.server.enabled=false\r\n```\r\n3. 创建内部桥接网络\r\n```bash\r\ndocker network create -d bridge my-net\r\n```\r\n4. 运行容器\r\n```bash\r\ndocker run -d\r\n--network=my-net\r\n--privileged=true\r\n-e PREFER_HOST_MODE=ip\r\n-e MODE=standalone\r\n-e TIME_ZONE='Asia/Shanghai'\r\n-v /app/nacos/conf/application.properties:/home/nacos/conf/application.properties\r\n-v /app/nacos/logs:/home/nacos/logs\r\n-p 8848:8848\r\n--name nacos\r\n--restart=always\r\nnacos/nacos-server:2.2.3\r\n```\r\n5. 进入容器内部修改配置文件\r\n```bash\r\ndocker exec -it nacos /bin/bash\r\ncd /home/nacos/conf\r\nvim application.properties\r\n```\r\n6. 复制容器内的文件出来，修改和挂载\r\n```bash\r\ndocker cp nacos:/home/nacos/conf/application.properties /app/nacos/conf/application.properties\r\n```\r\n7. 重启容器\r\n```bash\r\ndocker restart nacos\r\n```\r\n\r\n### 安装redis\r\n\r\n1. 拉取最新镜像\r\n```bash\r\ndocker pull redis\r\n```\r\n2. 创建挂载目录\r\n```bash\r\nmkdir -p /app/redis/data\r\n```\r\n3. 运行容器\r\n```bash\r\ndocker run --name redis -d \r\n--privileged=true \r\n-p 6379:6379\r\n-v /app/redis/redis.conf:/etc/redis/redis.conf\r\n-v /app/redis/data:/data\r\nredis redis-server /etc/redis/redis.conf\r\n--appendonly yes\r\n```\r\n\r\n### 部署ElasticSearch\r\n\r\n```shell\r\n# 准备文件和文件夹，并chmod -R 777 xxx\r\n# 配置文件内容，参照\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.5/node.name.html 搜索相\r\n关配置\r\n# 考虑为什么挂载使用esconfig ...\r\ndocker run --name=elasticsearch -p 9200:9200 -p 9300:9300 \\\r\n-e \"discovery.type=single-node\" \\\r\n-e ES_JAVA_OPTS=\"-Xms300m -Xmx300m\" \\\r\n-v /app/es/data:/usr/share/elasticsearch/data \\\r\n-v /app/es/plugins:/usr/shrae/elasticsearch/plugins \\\r\n-v esconfig:/usr/share/elasticsearch/config \\\r\n-d elasticsearch:7.12.0\r\n```\r\n\r\n### 部署Tomcat\r\n\r\n```shell\r\n# 考虑，如果我们每次-v都是指定磁盘路径，是不是很麻烦？\r\ndocker run --name tomcat-app -p 8080:8080 \\\r\n-v tomcatconf:/usr/local/tomcat/conf \\\r\n-v tomcatwebapp:/usr/local/tomcat/webapps \\\r\n-d tomcat:jdk8-openjdk-slim-buster\r\n```\r\n\r\n## 其他\r\n\r\n### docker加速命令\r\n\r\n```shell\r\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io\r\n或\r\nvim /etc/docker/daemon.json\r\n{\r\n  \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\r\n}\r\n```\r\n**其他方案**\r\n\r\n\r\n```shell\r\nsudo mkdir -p /etc/docker\r\nsudo tee /etc/docker/daemon.json <<-'EOF'\r\n{\r\n\"registry-mirrors\": [\"https://mfs5bvup.mirror.aliyuncs.com%22/]\r\n}\r\nEOF\r\nsudo systemctl daemon-reload\r\nsudo systemctl restart docker\r\n```\r\n以后docker下载直接从阿里云拉取相关镜像\r\n\r\n\r\n### 可视化界面-Portainer\r\n\r\n**什么是Portainer**\r\n\r\nPortainer社区版2.0拥有超过50万的普通用户，是功能强大的开源工具集，可让您轻松地在Docker，Swarm，Kubernetes和Azure ACI中构建和管理容器。 Portainer的工作原理是在易于使用的GUI后面隐藏使管理容器变得困难的复杂性。通过消除用户使用CLI，编写YAML或理解清单的需求，Portainer使部署应用程序和解决问题变得如此简单，任何人都可以做到。 Portainer开发团队在这里为您的Docker之旅提供帮助；\r\n\r\n**安装**\r\n\r\n服务端部署\r\n```shell\r\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v\r\n/var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data\r\nportainer/portainer-ce\r\n# 访问9000端口即可\r\n```\r\nagent端部署\r\n```shell\r\ndocker run -d -p 9001:9001 --name portainer_agent --restart=always -v\r\n/var/run/docker.sock:/var/run/docker.sock -v\r\n/var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent\r\n```\r\n\r\n### 与Spring Boot\r\n\r\n| [一键部署Spring Boot到远程Docker容器](https://mp.weixin.qq.com/s/15ZAVUg5DfcF53QpEetT7Q) | [Jenkins+Docker一键自动化部署SpringBoot项目](https://mp.weixin.qq.com/s/dP-c3twzR0PMUvPWZA-U0Q) | [搭建SpringBoot项目并将其Docker化](https://mp.weixin.qq.com/s/CXUwpTbAVoXEeB7EcrCjAw) |\r\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\r\n| [SpringBoot使用Docker快速部署项目](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493762&idx=1&sn=114663a4a13ba5bb27d05e0d77de37c1&source=41#wechat_redirect) | [Docker部署Spring Boot项目的2种方式！](https://mp.weixin.qq.com/s/du2sypGQczJh7gQz_4IX9g) | [SpringBoot项目构建Docker镜像深度调优](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493962&idx=1&sn=af6c945d629003cfd30564698c017598&source=41#wechat_redirect) |\r\n| [还在手动部署springboot项目？不妨试试它，让你部署项目飞起来！](https://mp.weixin.qq.com/s/01SZo3NNf5zuAC8wAI6C-g) | [Docker+Spring Boot+FastDFS搭建一套分布式文件服务器，太强了！](https://mp.weixin.qq.com/s/HSRIYQVKR9TGtwetd3LU5w) |                                                              |\r\n\r\n### 相关文章\r\n\r\n| [图解Docker架构，傻瓜都能看懂！](https://mp.weixin.qq.com/s/ELZo2z4fHonoBGXQI0M9CA) | [10个冷门但又非常实用的Docker使用技巧！！](https://mp.weixin.qq.com/s/LOmqsoBJd7h1HPwf0i1uwQ) | [Docker实战总结](https://mp.weixin.qq.com/s/tTsizeLeVyvQ44GXMNqrjA) |\r\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\r\n| [Docker从入门到干活，看这一篇足矣](https://mp.weixin.qq.com/s/t81enr-ypBxk1K4lYqWZww) | [Docker：Docker Compose详解](https://www.jianshu.com/p/658911a8cff3) | [CentOS/Ubuntu安装Docker和Docker Compose](https://mp.weixin.qq.com/s/fB59zXK7cPBt1asSyUpqDg) |\r\n| [DaoCloud安装docker指南](http://guide.daocloud.io/dcs/docker-9152677.html) | [一款吊炸天的Docker图形化工具，太强大](https://mp.weixin.qq.com/s/PpI7_fY5ACjmtmnlqr7ZMQ) | [5款顶级Docker容器GUI管理工具！免费又好用](https://mp.weixin.qq.com/s/w0sFaHApOSrwgva0886ijQ) |\r\n| [Docker轻量级编排创建工具Humpback](https://mp.weixin.qq.com/s/rAOsia2LU2_Fl4vrjQ2tvA) | [IDEA使用Docker插件，实现一键自动化部署](https://mp.weixin.qq.com/s/yg5ACCeeyJa0AVP1LatUhA) |                                                              |\r\n","categories":[{"name":"技术栈","path":"api/categories/技术栈.json"}],"tags":[{"name":"安装","path":"api/tags/安装.json"}]}