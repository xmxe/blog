{"title":"Docker","slug":"Docker","date":"2022-09-28T07:09:19.982Z","updated":"2023-07-04T06:08:54.130Z","comments":true,"path":"api/articles/Docker.json","excerpt":null,"covers":"https://pic2.zhimg.com/v2-98bbd70b053dd779240634a00c7f0950_1440w.jpg","content":"\r\n\r\n#### 安装\r\n\r\n##### 在线安装\r\n\r\n1. 安装docker需要关闭selinux,由于selinux和LXC（Docker实现虚拟化的方式）有冲突，所以需要禁用selinux。编辑/etc/selinux/config，设置两个关键变量。\r\n```shell\r\nSELINUX=disabled\r\n\r\nSELINUXTYPE=targeted\r\n```\r\n2. 关闭防火墙\r\n3. 安装容器\r\n```shell\r\nyum -y install docker-ce\r\n```\r\n4. 启动服务\r\n```shell\r\nsystemctl start docker\r\n```\r\n5. 测试容器\r\n```shell\r\ndocker run hello-world\r\n# PS: centos7安装命令 yum -y install docker-ce | ubuntu安装命令 apt install docker-ce\r\n```\r\n\r\n##### 离线安装\r\n\r\n1. [下载离线包](https://download.docker.com/linux/static/stable/x86_64/)\r\n2. 解压\r\n```shell\r\ntar -xvf docker-18.06.1-ce.tgz\r\n```\r\n3. 将解压出来的docker文件内容移动到/usr/bin/目录下\r\n```shell\r\ncp docker/* /usr/bin/\r\n```\r\n4.将docker注册为service：\r\n```shell\r\n# vim /etc/systemd/system/docker.service\r\n\r\n# lib/systemd/system、/usr/lib/systemd/system、/etc/systemd/system都可以，lib/systemd/system真实地址是/usr/lib/system/system地址，\r\n# /usr/lib/systemd/system/ 软件包安装的单元\r\n# /etc/systemd/system/ 系统管理员安装的单元,优先级更高\r\n# 优先级为 /etc/systemd/system，/run/systemd/system，/lib/systemd/system\r\n# 如果同一选项三个地方都配置了，优先级高的会覆盖优先级低的。\r\n\r\n[Unit]\r\nDescription=Docker Application Container Engine\r\nDocumentation=https://docs.docker.com\r\nAfter=network-online.target firewalld.service\r\nWants=network-online.target\r\n\r\n[Service]\r\n\r\nType=notify\r\n# the default is not to use systemd for cgroups because the delegate issues still\r\n# exists and systemd currently does not support the cgroup feature set required\r\n# for containers run by docker\r\n\r\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\r\n\r\nExecReload=/bin/kill -s HUP $MAINPID\r\n\r\n# Having non-zero Limit*s causes performance problems due to accounting overhead\r\n# in the kernel. We recommend using cgroups to do container-local accounting.\r\n\r\nLimitNOFILE=infinity\r\n\r\nLimitNPROC=infinity\r\n\r\nLimitCORE=infinity\r\n\r\n# Uncomment TasksMax if your systemd version supports it.\r\n# Only systemd 226 and above support this version.\r\n# TasksMax=infinity\r\n\r\nTimeoutStartSec=0\r\n\r\n# set delegate yes so that systemd does not reset the cgroups of docker containers\r\n\r\nDelegate=yes\r\n\r\n# kill only the docker process, not all processes in the cgroup\r\n\r\nKillMode=process\r\n\r\n# restart the docker process if it exits prematurely\r\n\r\nRestart=on-failure\r\n\r\nStartLimitBurst=3\r\n\r\nStartLimitInterval=60s\r\n\r\n\r\n[Install]\r\n\r\nWantedBy=multi-user.target\r\n```\r\n\r\n5. 添加文件权限并启动docker\r\n```shell\r\nchmod +x /etc/systemd/system/docker.service\r\n```\r\n6. 重载unit配置文件\r\n```shell\r\nsystemctl daemon-reload\r\n```\r\n7. 启动Docker\r\n```shell\r\nsystemctl start docker\r\n```\r\n8. 设置开机自启\r\n```shell\r\nsystemctl enable docker.service\r\n```\r\n9. 查看Docker状态\r\n```shell\r\nsystemctl status docker\r\n```\r\n10. 查看Docker版本\r\n```shell\r\ndocker -v\r\n```\r\n\r\n#### 常用命令\r\n\r\n##### 镜像\r\n- 查看镜像\r\n```\r\ndocker images\r\n-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；\r\n--digests :显示镜像的摘要信息；\r\n-f :显示满足条件的镜像；\r\n--format :指定返回值的模板文件；\r\n--no-trunc :显示完整的镜像信息；\r\n-q :只显示镜像ID。\r\n```\r\n\r\n- 拉取镜像\r\n```\r\ndocker pull name:tag\r\n```\r\n\r\n- 推送镜像\r\n```\r\ndocker push myapache:v1\r\n```\r\n\r\n- 导出镜像\r\n```\r\ndocker save -o <保存路径> <镜像名称:标签>\r\n\r\ndocker save -o ./ubuntu18.tar ubuntu:18.04\r\n```\r\n\r\n- 导入镜像\r\n```\r\ndocker load -i 文件名 或者docker load --input 文件名\r\n\r\ndocker load --input ./ubuntu18.tar\r\n```\r\n\r\n- 删除镜像\r\n```\r\ndocker rmi images_id\r\n```\r\n\r\n- 删除所有镜像\r\n```\r\ndocker rmi `docker images -q`\r\n```\r\n\r\n- 搜索镜像\r\n```\r\ndocker search *\r\n```\r\n\r\n- 查看指定镜像的创建历史\r\n```\r\ndocker history [OPTIONS] IMAGE\r\n\r\nOPTIONS说明：\r\n-H :以可读的格式打印镜像大小和日期，默认为true；\r\n--no-trunc :显示完整的提交记录；\r\n-q :仅列出提交记录ID。\r\n```\r\n\r\n##### 容器\r\n\r\n- 查看正在运行的容器\r\n```\r\ndocker ps 或者docker container ls\r\n```\r\n\r\n- 查看所有容器\r\n```\r\ndocker ps -a 或者 docker container ls -a\r\n```\r\n\r\n- 导出容器\r\n```\r\ndocker export <容器名> > <保存路径>\r\n\r\n或者docker export -o <容器名> <保存路径> -o :将输入内容写到文件。\r\ndocker export ubuntu18 > ./ubuntu18.tar\r\n将id为a404c6c174a2的容器按日期保存为tar文件\r\ndocker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\r\n```\r\n\r\n- 导入容器\r\n```\r\ndocker import <文件路径> <容器名>\r\ndocker import ./ubuntu18.tar ubuntu18\r\n```\r\n\r\n- 删除容器\r\n```\r\ndocker rm [OPTIONS] container_id\r\n\r\nOPTIONS说明：\r\n-f :通过 SIGKILL 信号强制删除一个运行中的容器。\r\n-l :移除容器间的网络连接，而非容器本身。\r\n-v :删除与容器关联的卷。\r\n```\r\n\r\n- 删除所有容器\r\n```\r\ndocker rm $(docker ps -a -q) \r\n或者\r\ndocker rm `docker ps -a -q`\r\n```\r\n\r\n- 启动容器\r\n```\r\ndocker container start container_id\r\n```\r\n\r\n- 停止所有容器\r\n```\r\ndocker stop $(docker ps -a -q)\r\n```\r\n\r\n- 杀掉运行中的容器\r\n```\r\ndocker kill -s(可忽略) CONTAINER\r\n-s :向容器发送一个信号 \r\n例：docker kill -s KILL mynginx\r\n```\r\n\r\n- 在运行的容器中执行命令\r\n```\r\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\r\n例如：进入容器 docker exec -itd 容器id /bin/bash\r\n（-d :分离模式: 在后台运行 -i :即使没有附加也保持STDIN 打开-t :分配一个伪终端）\r\n/bin/bash：在container中启动一个bash shell\r\nexit 退出bash shell\r\n```\r\n\r\n- 暂停容器中所有的进程\r\n```\r\ndocker pause container_id\r\n```\r\n\r\n- 恢复容器中所有的进程\r\n```\r\ndocker unpause container_id\r\n```\r\n\r\n- 创建一个新的容器不运行\r\n```\r\ndocker create 参数同docker run\r\n```\r\n\r\n- 创建一个新的容器并运行\r\n```\r\ndocker run\r\n-i: 以交互模式运行容器，通常与-t同时使用\r\n-t: 为容器重新分配一个伪输入终端，通常与-i同时使用\r\n-it 以交互模式运行\r\n-P: 随机端口映射，容器内部端口随机映射到主机的端口\r\n-p: 指定端口映射，格式为：主机(宿主)端口:容器端口\r\n-d 后台运行 并返回容器ID\r\n-v,--volume 挂载 主机目录:容器目录,绑定一个卷\r\n-u,--user=\"\"， 指定容器的用户\r\n-a,--attach=[]， 登录容器（必须是以docker run -d启动的容器）\r\n-w,--workdir=\"\"， 指定容器的工作目录\r\n-c,--cpu-shares=0， 设置容器CPU权重，在CPU共享场景使用\r\n-e username=\"ritchie\",--env=[] 设置环境变量容器中可以使用该环境变量\r\n-m,--memory=\"\"， 指定容器的内存上限\r\n-P,--publish-all=false，指定容器暴露的端口\r\n-h,--hostname=\"\"， 指定容器的主机名\r\n--name=”” 容器命名\r\n--cap-add=[]添加权限，权限清单详见：\thttp://linux.die.net/man/7/capabilities\r\n--cap-drop=[]删除权限，权限清单详见：\thttp://linux.die.net/man/7/capabilities\r\n--cidfile=\"\" 运行容器后,在指定文件中写入容器PID值，一种典型的监控系\t统用法\r\n--cpuset=\"\"， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU\r\n--device=[]， 添加主机设备给容器，相当于设备直通\r\n--dns=[]， 指定容器的dns服务器\r\n--dns-search=[]指定容器的dns搜索域名,写入到容器的/etc/resolv.conf文\t件\r\n--entrypoint=\"\"， 覆盖image的入口点\r\n--env-file=[]， 从指定文件读入环境变量\r\n--expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口\r\n--link=[]， 添加链接到另一个容器，使用其他容器的IP、env等信息\r\n--lxc-conf=[]， 指定容器的配置文件，只有在指定--exec-driver=lxc时\t使用\r\n--net=\"bridge\"， 容器网络设置:\r\nbridge 使用docker daemon指定的网桥\r\nhost 容器使用主机的网络\r\ncontainer:NAME_or_ID > 使用其他容器的网路，共享IP和PORT等网络资源\r\nnone 容器使用自己的网络（类似--net=bridge），但是不进行配置\r\n--privileged=false指定容器是否为特权容器,特权容器拥有所有的capabilities\r\n--restart=\"no\"，指定容器停止后的重启策略:\r\nno - 容器退出时不重启\r\non-failure - 只在容器以非0状态码退出时重启。可选的，可以退出docker daemon尝试重启容器的次数\r\nalways – 不管退出状态码是什么始终重启容器。当指定always时，docker daemon将无限次数地重启容器。容器也会在daemon启动时尝试重启，不管容器当时的状态如何。\r\nunless-stopped – 不管退出状态码是什么始终重启容器，不过当daemon启动时，如果容器之前已经为停止状态，不要尝试启动它。\r\n--rm=false指定容器停止后自动删除容器(不支持以docker run -d启动的容器)\r\n--sig-proxy=true 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和\tSIGKILL不能被代理\r\n```\r\n\r\n- 获取容器/镜像的元数据\r\n```\r\ndocker inspect [OPTIONS] NAME|ID [NAME|ID...]\r\nOPTIONS说明：\r\n-f :指定返回值的模板文件。\r\n-s :显示总的文件大小。\r\n--type :为指定类型返回JSON。\r\n```\r\n\r\n- 查看容器中运行的进程信息\r\n```\r\ndocker top container_id\r\n```\r\n\r\n- 连接到正在运行中的容器\r\n```\r\ndocker attach container_id\r\n```\r\n\r\n- 阻塞运行直到容器停止，然后打印出它的退出代码\r\n```\r\ndocker wait containser_id\r\n```\r\n\r\n##### 其他\r\n\r\n- 从服务器获取实时事件\r\n```\r\ndocker events OPTIONS\r\n\r\nOPTIONS说明：\r\n-f ：根据条件过滤事件；\r\n--since ：从指定的时间戳后显示所有事件;\r\n--until ：流水时间显示到指定的时间为止；\r\ndocker events --since=\"1467302400\"\r\n```\r\n\r\n- 查看日志\r\n```\r\ndocker logs [OPTIONS] CONTAINER\r\n--details 显示更多的信息\r\n-f, --follow 跟踪实时日志\r\n--since string 显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）\r\n--tail string 从日志末尾显示多少行日志，默认是all\r\n-t, --timestamps 显示时间戳\r\n--until string 显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）\r\n\r\n查看指定时间后的日志，只显示最后100行：\r\ndocker logs -f -t --since=\"2018-02-08\" --tail=100 CONTAINER_ID\r\n查看最近30分钟的日志:\r\ndocker logs --since 30m CONTAINER_ID\r\n查看某时间之后的日志：\r\ndocker logs -t --since=\"2018-02-08T13:23:37\" CONTAINER_ID\r\n查看某时间段日志：\r\ndocker logs -t --since=\"2018-02-08T13:23:37\" --until \"2018-02-09T12:23:37\" CONTAINER_ID\r\n```\r\n\r\n- 列出指定的容器的端口映射\r\n```\r\ndocker port container_id\r\n```\r\n\r\n- 提交\r\n```\r\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\r\n\r\nOPTIONS说明：\r\n-a :提交的镜像作者；\r\n-c :使用Dockerfile指令来创建镜像；\r\n-m :提交时的说明文字；\r\n-p :在commit时，将容器暂停。\r\n\r\n将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\r\ndocker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2 mymysql:v1\r\n```\r\n\r\n- 容器与主机之间的数据拷贝\r\n```\r\n将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\r\ndocker cp /www/runoob 96f7f14e99ab:/www/\r\n```\r\n\r\n- 查看容器文件结构更改\r\n```\r\ndocker diff mymysql\r\n```\r\n\r\n- 使用 Dockerfile 创建镜像\r\n```\r\ndocker build\r\n--build-arg=[] :设置镜像创建时的变量；\r\n--cpu-shares :设置 cpu 使用权重；\r\n--cpu-period :限制 CPU CFS周期；\r\n--cpu-quota :限制 CPU CFS配额；\r\n--cpuset-cpus :指定使用的CPU id；\r\n--cpuset-mems :指定使用的内存 id；\r\n--disable-content-trust :忽略校验，默认开启；\r\n-f :指定要使用的Dockerfile路径；\r\n--force-rm :设置镜像过程中删除中间容器；\r\n--isolation :使用容器隔离技术；\r\n--label=[] :设置镜像使用的元数据；\r\n-m :设置内存最大值；\r\n--memory-swap :设置Swap的最大值为内存+swap，\"-1\"表示不限swap；\r\n--no-cache :创建镜像的过程不使用缓存；\r\n--pull :尝试去更新镜像的新版本；\r\n--quiet, -q :安静模式，成功后只输出镜像 ID；\r\n--rm :设置镜像成功后删除中间容器；\r\n--shm-size :设置/dev/shm的大小，默认值是64M；\r\n--ulimit :Ulimit配置。\r\n--squash :将Dockerfile中所有的操作压缩为一层。\r\n--tag, -t: 镜像的名字及标签，通常name:tag或者name格式；可以在一次构建中为一个镜像设置多个标签。\r\n--network: 默认default。在构建期间设置RUN指令的网络模式\r\n```\r\n\r\n- 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\r\n```\r\ndocker login -u -p\r\n-u 登陆的用户名 -p :登陆的密码\r\n```\r\n\r\n- 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库Docker Hub\r\n```\r\ndocker logout\r\n```\r\n\r\n- 标记本地镜像，将其归入某一仓库\r\n```\r\ndocker tag\r\n```\r\n\r\n#### docker加速命令\r\n\r\n```\r\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io\r\n或\r\nvim /etc/docker/daemon.json\r\n{\r\n  \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\r\n}\r\n\r\n其他站点\r\nhttp://hub-mirror.c.163.com\r\nhttps://3laho3y3.mirror.aliyuncs.com\r\nhttp://f1361db2.m.daocloud.io\r\nhttps://mirror.ccs.tencentyun.com\r\nhttps://docker.mirrors.ustc.edu.cn\r\n```\r\n\r\n#### 与Spring Boot\r\n\r\n- [一键部署Spring Boot到远程Docker容器](https://mp.weixin.qq.com/s/15ZAVUg5DfcF53QpEetT7Q)\r\n- [Jenkins+Docker一键自动化部署SpringBoot项目](https://mp.weixin.qq.com/s/dP-c3twzR0PMUvPWZA-U0Q)\r\n- [搭建SpringBoot项目并将其Docker化](https://mp.weixin.qq.com/s/CXUwpTbAVoXEeB7EcrCjAw)\r\n- [SpringBoot使用Docker快速部署项目](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493762&idx=1&sn=114663a4a13ba5bb27d05e0d77de37c1&source=41#wechat_redirect)\r\n- [Docker部署Spring Boot项目的2种方式！](https://mp.weixin.qq.com/s/du2sypGQczJh7gQz_4IX9g)\r\n- [SpringBoot项目构建Docker镜像深度调优](https://mp.weixin.qq.com/s?__biz=Mzg2MDYzODI5Nw==&mid=2247493962&idx=1&sn=af6c945d629003cfd30564698c017598&source=41#wechat_redirect)\r\n- [还在手动部署springboot项目？不妨试试它，让你部署项目飞起来！](https://mp.weixin.qq.com/s/01SZo3NNf5zuAC8wAI6C-g)\r\n- [Docker+Spring Boot+FastDFS搭建一套分布式文件服务器，太强了！](https://mp.weixin.qq.com/s/HSRIYQVKR9TGtwetd3LU5w)\r\n\r\n\r\n#### 相关文章\r\n\r\n- [图解Docker架构，傻瓜都能看懂！](https://mp.weixin.qq.com/s/ELZo2z4fHonoBGXQI0M9CA)\r\n- [构建Java镜像的10个最佳实践](https://mp.weixin.qq.com/s/gmZDBuYDXnNdykEx66Y0Cw)\r\n- [10个冷门但又非常实用的Docker使用技巧！！](https://mp.weixin.qq.com/s/LOmqsoBJd7h1HPwf0i1uwQ)\r\n- [Docker实战总结](https://mp.weixin.qq.com/s/tTsizeLeVyvQ44GXMNqrjA)\r\n- [Docker从入门到干活，看这一篇足矣](https://mp.weixin.qq.com/s/t81enr-ypBxk1K4lYqWZww)\r\n- [如何编写最佳的Dockerfile](https://mp.weixin.qq.com/s/x-M5iKvvuseIQwUdVmxSPQ)\r\n- [Docker：Docker Compose详解](https://www.jianshu.com/p/658911a8cff3)\r\n- [CentOS/Ubuntu安装Docker和Docker Compose](https://mp.weixin.qq.com/s/fB59zXK7cPBt1asSyUpqDg)\r\n- [DaoCloud安装docker指南](http://guide.daocloud.io/dcs/docker-9152677.html)\r\n- [Docker常用命令，还有谁不会？](https://mp.weixin.qq.com/s/fzlNnJe9SMA5k3TDXOfZUA)\r\n- [一款吊炸天的Docker图形化工具，太强大](https://mp.weixin.qq.com/s/PpI7_fY5ACjmtmnlqr7ZMQ)\r\n- [5款顶级Docker容器GUI管理工具！免费又好用](https://mp.weixin.qq.com/s/w0sFaHApOSrwgva0886ijQ)\r\n- [Docker轻量级编排创建工具Humpback](https://mp.weixin.qq.com/s/rAOsia2LU2_Fl4vrjQ2tvA)\r\n- [带着问题学Kubernetes架构！](https://mp.weixin.qq.com/s/6smzsvYSbRvSPcpbfnH98A)\r\n- [为什么大家都在学习k8s](https://mp.weixin.qq.com/s/B2tIs6YitA93iYxEZ_8Ovw)\r\n- [Kuboard-Kubernetes多集群管理界面](https://kuboard.cn/)\r\n- [图文详解Kubernetes，傻瓜都能看懂！](https://mp.weixin.qq.com/s/WWRp-e9QPcLg8-m-V3UU1Q)\r\n- [Kubernetes缺少的多租户功能，你可以通过这些方式实现](https://mp.weixin.qq.com/s/8UJnsx0NJyxlKXeduhg5Yw)\r\n- [IDEA使用Docker插件，实现一键自动化部署](https://mp.weixin.qq.com/s/yg5ACCeeyJa0AVP1LatUhA)\r\n- [Docker有几种网络模式](https://mp.weixin.qq.com/s/KU3bpxiNbHGJQ_XVRqsedg)\r\n","categories":[{"name":"技术栈","path":"api/categories/技术栈.json"}],"tags":[{"name":"安装","path":"api/tags/安装.json"}]}